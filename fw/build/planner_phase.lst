ARM GAS  /tmp/cc27eAcR.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"planner_phase.cpp"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._ZN13Planner_phaseC2Ei,"ax",%progbits
  18              		.align	1
  19              		.global	_ZN13Planner_phaseC2Ei
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	_ZN13Planner_phaseC2Ei:
  27              	.LVL0:
  28              	.LFB3322:
  29              		.file 1 "alohal/events/planner/planner_phase.cpp"
   1:alohal/events/planner/planner_phase.cpp **** #include "planner_phase.hpp"
   2:alohal/events/planner/planner_phase.cpp **** 
   3:alohal/events/planner/planner_phase.cpp **** Planner_phase::Planner_phase(int phase_number) :
  30              		.loc 1 3 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  35              	.LBB886:
   4:alohal/events/planner/planner_phase.cpp ****     phase_number(phase_number){ }
  36              		.loc 1 4 30 is_stmt 0 view .LVU1
  37 0000 0160     		str	r1, [r0]
  38              	.LVL1:
  39              	.LBB887:
  40              	.LBI887:
  41              		.file 2 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // Map implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  /tmp/cc27eAcR.s 			page 2


  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Copyright (c) 1996,1997
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  */
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** /** @file bits/stl_map.h
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  *  Do not attempt to use it directly. @headername{map}
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****  */
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #ifndef _STL_MAP_H
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #define _STL_MAP_H 1
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #include <bits/functexcept.h>
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #include <bits/concept_check.h>
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #include <initializer_list>
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #include <tuple>
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** {
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 3


  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****   template <typename _Key, typename _Tp, typename _Compare, typename _Alloc>
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     class multimap;
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****   /**
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @brief A standard container made up of (key,value) pairs, which can be
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  retrieved based on a key, in logarithmic time.
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @ingroup associative_containers
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @tparam _Key  Type of key objects.
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @tparam  _Tp  Type of mapped objects.
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @tparam _Compare  Comparison function object type, defaults to less<_Key>.
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  @tparam _Alloc  Allocator type, defaults to
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *                  allocator<pair<const _Key, _Tp>.
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  <a href="tables.html#66">reversible container</a>, and an
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  <a href="tables.html#69">associative container</a> (using unique keys).
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  For a @c map<Key,T> the key_type is Key, the mapped_type is T, and the
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  value_type is std::pair<const Key,T>.
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  Maps support bidirectional iterators.
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  The private tree data is declared exactly the same way for map and
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  multimap; the distinction is made entirely in how the tree functions are
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****    *  called (*_unique versus *_equal, same as the standard).
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****   */
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****   template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     class map
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     {
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     public:
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Key					key_type;
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Tp					mapped_type;
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef std::pair<const _Key, _Tp>		value_type;
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Compare					key_compare;
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Alloc					allocator_type;
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     private:
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // concept requirements
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** # if __cplusplus < 201103L
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** # endif
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       __glibcxx_class_requires4(_Compare, bool, _Key, _Key,
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				_BinaryFunctionConcept)
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       __glibcxx_class_requires2(value_type, _Alloc_value_type, _SameTypeConcept)
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L && defined(__STRICT_ANSI__)
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       static_assert(is_same<typename _Alloc::value_type, value_type>::value,
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  "std::map must have the same value_type as its allocator");
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     public:
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       class value_compare
ARM GAS  /tmp/cc27eAcR.s 			page 4


 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : public std::binary_function<value_type, value_type, bool>
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	friend class map<_Key, _Tp, _Compare, _Alloc>;
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       protected:
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	_Compare comp;
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	value_compare(_Compare __c)
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	: comp(__c) { }
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       public:
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	bool operator()(const value_type& __x, const value_type& __y) const
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return comp(__x.first, __y.first); }
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       };
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     private:
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// This turns a red-black tree into a [multi]map.
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	rebind<value_type>::other _Pair_alloc_type;
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 		       key_compare, _Pair_alloc_type> _Rep_type;
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// The actual tree structure.
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       _Rep_type _M_t;
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef __gnu_cxx::__alloc_traits<_Pair_alloc_type> _Alloc_traits;
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****     public:
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // many of these are specified differently in ISO, but the following are
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // "functionally equivalent"
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc_traits::pointer		 pointer;
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc_traits::const_pointer	 const_pointer;
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc_traits::reference		 reference;
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Alloc_traits::const_reference	 const_reference;
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::iterator		 iterator;
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::const_iterator	 const_iterator;
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::size_type		 size_type;
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::difference_type	 difference_type;
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::reverse_iterator	 reverse_iterator;
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201402L
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       using node_type = typename _Rep_type::node_type;
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       using insert_return_type = typename _Rep_type::insert_return_type;
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // [23.3.1.1] construct/copy/destroy
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // (get_allocator() is also listed in this section)
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Default constructor creates no elements.
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus < 201103L
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map() : _M_t() { }
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map() = default;
  42              		.loc 2 183 7 is_stmt 1 view .LVU2
ARM GAS  /tmp/cc27eAcR.s 			page 5


  43              	.LBB888:
  44              	.LBI888:
  45              		.file 3 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // RB tree implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Copyright (c) 1996,1997
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Silicon Graphics Computer Systems, Inc.
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * in supporting documentation.  Silicon Graphics makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Copyright (c) 1994
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Hewlett-Packard Company
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  */
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** /** @file bits/stl_tree.h
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *  This is an internal header file, included by other library headers.
ARM GAS  /tmp/cc27eAcR.s 			page 6


  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  *  Do not attempt to use it directly. @headername{map,set}
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****  */
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #ifndef _STL_TREE_H
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #define _STL_TREE_H 1
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #pragma GCC system_header
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <bits/stl_algobase.h>
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <bits/allocator.h>
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <bits/stl_function.h>
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <bits/cpp_type_traits.h>
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #include <ext/alloc_traits.h>
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # include <ext/aligned_buffer.h>
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201402L
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # include <bits/node_handle.h>
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** namespace std _GLIBCXX_VISIBILITY(default)
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** {
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201103L
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # define __cpp_lib_generic_associative_lookup 201304
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // Red-black tree class, designed for use in implementing STL
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // associative containers (set, multiset, map, and multimap). The
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // insertion and deletion algorithms are based on those in Cormen,
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // Leiserson, and Rivest, Introduction to Algorithms (MIT Press,
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // 1990), except that
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   //
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // (1) the header cell is maintained with links not only to the root
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // but also to the leftmost node of the tree, to enable constant
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // time begin(), and to the rightmost node of the tree, to enable
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // linear time performance when used with the generic set algorithms
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // (set_union, etc.)
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   //
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // (2) when a node being deleted has two children its successor node
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // is relinked into its place, rather than copied, so that the only
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // iterators invalidated are those referring to the deleted node.
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   enum _Rb_tree_color { _S_red = false, _S_black = true };
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   struct _Rb_tree_node_base
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   {
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typedef _Rb_tree_node_base* _Base_ptr;
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typedef const _Rb_tree_node_base* _Const_Base_ptr;
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree_color	_M_color;
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Base_ptr		_M_parent;
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Base_ptr		_M_left;
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Base_ptr		_M_right;
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     static _Base_ptr
ARM GAS  /tmp/cc27eAcR.s 			page 7


 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x->_M_left != 0) __x = __x->_M_left;
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return __x;
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     static _Const_Base_ptr
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x->_M_left != 0) __x = __x->_M_left;
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return __x;
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     static _Base_ptr
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x->_M_right != 0) __x = __x->_M_right;
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return __x;
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     static _Const_Base_ptr
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x->_M_right != 0) __x = __x->_M_right;
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return __x;
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   };
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // Helper type offering value initialization guarantee on the compare functor.
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key_compare>
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_key_compare
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Key_compare		_M_key_compare;
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_key_compare()
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_NOEXCEPT_IF(
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	is_nothrow_default_constructible<_Key_compare>::value)
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_key_compare()
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_key_compare(const _Key_compare& __comp)
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_key_compare(__comp)
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Copy constructor added for consistency with C++98 mode.
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_key_compare(const _Rb_tree_key_compare&) = default;
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_key_compare(_Rb_tree_key_compare&& __x)
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	noexcept(is_nothrow_copy_constructible<_Key_compare>::value)
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_key_compare(__x._M_key_compare)
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     };
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   // Helper type to manage default initialization of node count and header.
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   struct _Rb_tree_header
ARM GAS  /tmp/cc27eAcR.s 			page 8


 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   {
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree_node_base	_M_header;
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     size_t		_M_node_count; // Keeps track of size of tree.
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree_header() _GLIBCXX_NOEXCEPT
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_color = _S_red;
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reset();
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree_header(_Rb_tree_header&& __x) noexcept
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__x._M_header._M_parent != nullptr)
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_move_data(__x);
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_header._M_color = _S_red;
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_reset();
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_move_data(_Rb_tree_header& __from)
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_color = __from._M_header._M_color;
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_parent = __from._M_header._M_parent;
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_left = __from._M_header._M_left;
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_right = __from._M_header._M_right;
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_parent->_M_parent = &_M_header;
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_node_count = __from._M_node_count;
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       __from._M_reset();
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_reset()
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_parent = 0;
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_left = &_M_header;
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_right = &_M_header;
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_node_count = 0;
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   };
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Val>
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_node : public _Rb_tree_node_base
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node<_Val>* _Link_type;
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Val _M_value_field;
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Val*
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_valptr()
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return std::__addressof(_M_value_field); }
ARM GAS  /tmp/cc27eAcR.s 			page 9


 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const _Val*
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_valptr() const
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return std::__addressof(_M_value_field); }
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       __gnu_cxx::__aligned_membuf<_Val> _M_storage;
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Val*
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_valptr()
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_storage._M_ptr(); }
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const _Val*
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_valptr() const
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_storage._M_ptr(); }
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     };
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _GLIBCXX_PURE _Rb_tree_node_base*
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_increment(_Rb_tree_node_base* __x) throw ();
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _GLIBCXX_PURE const _Rb_tree_node_base*
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_increment(const _Rb_tree_node_base* __x) throw ();
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _GLIBCXX_PURE _Rb_tree_node_base*
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_decrement(_Rb_tree_node_base* __x) throw ();
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _GLIBCXX_PURE const _Rb_tree_node_base*
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_decrement(const _Rb_tree_node_base* __x) throw ();
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Tp>
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_iterator
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Tp  value_type;
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Tp& reference;
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Tp* pointer;
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef bidirectional_iterator_tag iterator_category;
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef ptrdiff_t			 difference_type;
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_iterator<_Tp>		_Self;
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node_base::_Base_ptr	_Base_ptr;
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node<_Tp>*		_Link_type;
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_iterator() _GLIBCXX_NOEXCEPT
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node() { }
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       explicit
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       reference
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator*() const _GLIBCXX_NOEXCEPT
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pointer
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator->() const _GLIBCXX_NOEXCEPT
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type> (_M_node)->_M_valptr(); }
ARM GAS  /tmp/cc27eAcR.s 			page 10


 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self&
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator++() _GLIBCXX_NOEXCEPT
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Self __tmp = *this;
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self&
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator--() _GLIBCXX_NOEXCEPT
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Self __tmp = *this;
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node != __y._M_node; }
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr _M_node;
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   };
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Tp>
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_const_iterator
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Tp	 value_type;
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Tp& reference;
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Tp* pointer;
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_iterator<_Tp> iterator;
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef bidirectional_iterator_tag iterator_category;
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef ptrdiff_t			 difference_type;
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_const_iterator<_Tp>		_Self;
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node_base::_Const_Base_ptr	_Base_ptr;
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Rb_tree_node<_Tp>*			_Link_type;
ARM GAS  /tmp/cc27eAcR.s 			page 11


 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node() { }
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       explicit
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_const_cast() const _GLIBCXX_NOEXCEPT
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       reference
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator*() const _GLIBCXX_NOEXCEPT
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pointer
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator->() const _GLIBCXX_NOEXCEPT
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(_M_node)->_M_valptr(); }
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self&
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator++() _GLIBCXX_NOEXCEPT
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Self __tmp = *this;
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_increment(_M_node);
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self&
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator--() _GLIBCXX_NOEXCEPT
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Self
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Self __tmp = *this;
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_node = _Rb_tree_decrement(_M_node);
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 12


 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator!=(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node != __y._M_node; }
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr _M_node;
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     };
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   void
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_insert_and_rebalance(const bool __insert_left,
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				_Rb_tree_node_base* __x,
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				_Rb_tree_node_base* __p,
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				_Rb_tree_node_base& __header) throw ();
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_node_base*
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			       _Rb_tree_node_base& __header) throw ();
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201402L
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Cmp, typename _SfinaeType, typename = __void_t<>>
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct __has_is_transparent
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     { };
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Cmp, typename _SfinaeType>
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct __has_is_transparent<_Cmp, _SfinaeType,
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				__void_t<typename _Cmp::is_transparent>>
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     { typedef void type; };
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Cmp, typename _SfinaeType>
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     using __has_is_transparent_t
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       = typename __has_is_transparent<_Cmp, _SfinaeType>::type;
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201402L
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Tree1, typename _Cmp2>
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     struct _Rb_tree_merge_helper { };
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc = allocator<_Val> >
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     class _Rb_tree
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	rebind<_Rb_tree_node<_Val> >::other _Node_allocator;
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     protected:
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node_base* 		_Base_ptr;
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Rb_tree_node_base* 	_Const_Base_ptr;
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_node<_Val>* 		_Link_type;
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const _Rb_tree_node<_Val>*	_Const_Link_type;
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Functor recycling a pool of nodes and using allocation once the pool
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // is empty.
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       struct _Reuse_or_alloc_node
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
ARM GAS  /tmp/cc27eAcR.s 			page 13


 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Reuse_or_alloc_node(_Rb_tree& __t)
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	: _M_root(__t._M_root()), _M_nodes(__t._M_rightmost()), _M_t(__t)
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_M_root)
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _M_root->_M_parent = 0;
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_M_nodes->_M_left)
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_M_nodes = _M_nodes->_M_left;
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_nodes = 0;
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Reuse_or_alloc_node(const _Reuse_or_alloc_node&) = delete;
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	~_Reuse_or_alloc_node()
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{ _M_t._M_erase(static_cast<_Link_type>(_M_root)); }
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	template<typename _Arg>
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  operator()(const _Arg& __arg)
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  operator()(_Arg&& __arg)
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _Link_type __node = static_cast<_Link_type>(_M_extract());
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__node)
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_M_t._M_destroy_node(__node);
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_M_t._M_construct_node(__node, _GLIBCXX_FORWARD(_Arg, __arg));
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return __node;
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg));
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       private:
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Base_ptr
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_extract()
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (!_M_nodes)
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_nodes;
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Base_ptr __node = _M_nodes;
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_nodes = _M_nodes->_M_parent;
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_M_nodes)
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_M_nodes->_M_right == __node)
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		{
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  _M_nodes->_M_right = 0;
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  if (_M_nodes->_M_left)
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		    {
ARM GAS  /tmp/cc27eAcR.s 			page 14


 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _M_nodes = _M_nodes->_M_left;
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      while (_M_nodes->_M_right)
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_right;
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      if (_M_nodes->_M_left)
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_M_nodes = _M_nodes->_M_left;
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		    }
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		}
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else // __node is on the left.
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_M_nodes->_M_left = 0;
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_root = 0;
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __node;
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Base_ptr _M_root;
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Base_ptr _M_nodes;
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Rb_tree& _M_t;
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       };
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Functor similar to the previous one but without any pool of nodes to
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // recycle.
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       struct _Alloc_node
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_node(_Rb_tree& __t)
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	: _M_t(__t) { }
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	template<typename _Arg>
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  operator()(const _Arg& __arg) const
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  operator()(_Arg&& __arg) const
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       private:
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Rb_tree& _M_t;
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       };
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Key 				key_type;
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Val 				value_type;
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef value_type* 			pointer;
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const value_type* 		const_pointer;
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef value_type& 			reference;
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef const value_type& 		const_reference;
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef size_t 				size_type;
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef ptrdiff_t 			difference_type;
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Alloc 				allocator_type;
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Node_allocator&
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl; }
ARM GAS  /tmp/cc27eAcR.s 			page 15


 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const _Node_allocator&
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl; }
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       allocator_type
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return allocator_type(_M_get_Node_allocator()); }
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     protected:
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_node()
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_construct_node(_Link_type __node, const value_type& __x)
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { get_allocator().construct(__node->_M_valptr(), __x); }
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_put_node(__node);
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_create_node(const value_type& __x)
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __tmp = _M_get_node();
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_construct_node(__tmp, __x);
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __tmp;
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_construct_node(_Link_type __node, _Args&&... __args)
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __try
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      ::new(__node) _Rb_tree_node<_Val>;
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Alloc_traits::construct(_M_get_Node_allocator(),
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				       __node->_M_valptr(),
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				       std::forward<_Args>(__args)...);
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __catch(...)
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __node->~_Rb_tree_node<_Val>();
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _M_put_node(__node);
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __throw_exception_again;
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
ARM GAS  /tmp/cc27eAcR.s 			page 16


 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_create_node(_Args&&... __args)
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type __tmp = _M_get_node();
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __tmp;
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	get_allocator().destroy(__p->_M_valptr());
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__p->~_Rb_tree_node<_Val>();
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_destroy_node(__p);
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_put_node(__p);
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_clone_node(_Const_Link_type __x, _NodeGen& __node_gen)
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type __tmp = __node_gen(*__x->_M_valptr());
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __tmp->_M_color = __x->_M_color;
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __tmp->_M_left = 0;
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __tmp->_M_right = 0;
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __tmp;
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     protected:
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if _GLIBCXX_INLINE_VERSION
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Key_compare>
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Unused _Is_pod_comparator is kept as it is part of mangled name.
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Key_compare,
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	struct _Rb_tree_impl
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	: public _Node_allocator
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	, public _Rb_tree_key_compare<_Key_compare>
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	, public _Rb_tree_header
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl()
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _GLIBCXX_NOEXCEPT_IF(
ARM GAS  /tmp/cc27eAcR.s 			page 17


 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		is_nothrow_default_constructible<_Node_allocator>::value
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		&& is_nothrow_default_constructible<_Base_key_compare>::value )
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator()
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(const _Rb_tree_impl& __x)
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(_Alloc_traits::_S_select_on_copy(__x))
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  , _Base_key_compare(__x._M_key_compare)
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(__a), _Base_key_compare(__comp)
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(_Rb_tree_impl&&) = default;
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  explicit
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(_Node_allocator&& __a)
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(std::move(__a))
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(_Rb_tree_impl&& __x, _Node_allocator&& __a)
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(std::move(__a)),
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _Base_key_compare(std::move(__x)),
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _Rb_tree_header(std::move(__x))
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  { }
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	};
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_impl<_Compare> _M_impl;
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     protected:
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr&
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_root() _GLIBCXX_NOEXCEPT
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_parent; }
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_root() const _GLIBCXX_NOEXCEPT
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_parent; }
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr&
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_leftmost() _GLIBCXX_NOEXCEPT
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_left; }
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_leftmost() const _GLIBCXX_NOEXCEPT
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_left; }
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr&
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_rightmost() _GLIBCXX_NOEXCEPT
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_right; }
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 18


 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_rightmost() const _GLIBCXX_NOEXCEPT
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return this->_M_impl._M_header._M_right; }
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_begin() _GLIBCXX_NOEXCEPT
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Link_type
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_begin() const _GLIBCXX_NOEXCEPT
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return static_cast<_Const_Link_type>
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  (this->_M_impl._M_header._M_parent);
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_end() _GLIBCXX_NOEXCEPT
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_end() const _GLIBCXX_NOEXCEPT
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static const_reference
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_value(_Const_Link_type __x)
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *__x->_M_valptr(); }
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static const _Key&
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_key(_Const_Link_type __x)
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// If we're asking for the key we're presumably using the comparison
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// object, and so this is a good place to sanity check it.
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	static_assert(__is_invocable<_Compare&, const _Key&, const _Key&>{},
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      "comparison object must be invocable "
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      "with two arguments of key type");
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # if __cplusplus >= 201703L
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// 2542. Missing const requirements for associative containers
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if constexpr (__is_invocable<_Compare&, const _Key&, const _Key&>{})
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  static_assert(
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      is_invocable_v<const _Compare&, const _Key&, const _Key&>,
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      "comparison object must be invocable as const");
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** # endif // C++17
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif // C++11
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _KeyOfValue()(*__x->_M_valptr());
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Link_type
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Const_Link_type
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Const_Link_type>(__x->_M_left); }
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 19


 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Link_type
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Const_Link_type
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Const_Link_type>(__x->_M_right); }
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static const_reference
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_value(_Const_Base_ptr __x)
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Const_Link_type>(__x)->_M_valptr(); }
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static const _Key&
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_key(_Const_Base_ptr __x)
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _S_key(static_cast<_Const_Link_type>(__x)); }
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Base_ptr
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_minimum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_minimum(__x); }
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Const_Base_ptr
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_minimum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_minimum(__x); }
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Base_ptr
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_maximum(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_maximum(__x); }
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       static _Const_Base_ptr
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _S_maximum(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Rb_tree_node_base::_S_maximum(__x); }
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_iterator<value_type>       iterator;
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef _Rb_tree_const_iterator<value_type> const_iterator;
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef std::reverse_iterator<iterator>       reverse_iterator;
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201402L
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       using node_type = _Node_handle<_Key, _Val, _Node_allocator>;
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       using insert_return_type = _Node_insert_return<
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	conditional_t<is_same_v<_Key, _Val>, const_iterator, iterator>,
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	node_type>;
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_insert_unique_pos(const key_type& __k);
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_insert_equal_pos(const key_type& __k);
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_insert_hint_unique_pos(const_iterator __pos,
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    const key_type& __k);
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr>
ARM GAS  /tmp/cc27eAcR.s 			page 20


 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_get_insert_hint_equal_pos(const_iterator __pos,
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				   const key_type& __k);
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg, typename _NodeGen>
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_lower(_Base_ptr __y, _Arg&& __v);
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal_lower(_Arg&& __x);
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_lower_node(_Base_ptr __p, _Link_type __z);
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal_lower_node(_Link_type __z);
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_(_Base_ptr __x, _Base_ptr __y,
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const value_type& __v, _NodeGen&);
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // 233. Insertion hints in associative containers.
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_lower(_Base_ptr __y, const value_type& __v);
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal_lower(const value_type& __x);
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen&);
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_copy(const _Rb_tree& __x, _NodeGen& __gen)
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type __root = _M_copy(__x._M_begin(), _M_end(), __gen);
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_leftmost() = _S_minimum(__root);
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_rightmost() = _S_maximum(__root);
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_impl._M_node_count = __x._M_impl._M_node_count;
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __root;
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_copy(const _Rb_tree& __x)
ARM GAS  /tmp/cc27eAcR.s 			page 21


 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_node __an(*this);
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_copy(__x, __an);
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_erase(_Link_type __x);
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_lower_bound(_Link_type __x, _Base_ptr __y,
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		     const _Key& __k);
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		     const _Key& __k) const;
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_upper_bound(_Link_type __x, _Base_ptr __y,
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		     const _Key& __k);
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		     const _Key& __k) const;
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // allocation/deallocation
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus < 201103L
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree() { }
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree() = default;
  46              		.loc 3 939 7 view .LVU3
  47              	.LBB889:
  48              	.LBI889:
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _GLIBCXX_NOEXCEPT_IF(
  49              		.loc 3 680 4 view .LVU4
  50              	.LBB890:
  51              	.LBI890:
  52              		.file 4 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 22


  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  *
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  */
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** /** @file bits/allocator.h
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****  */
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #include <type_traits>
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #endif
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #define __cpp_lib_incomplete_container_elements 201505
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** # define __cpp_lib_allocator_is_always_equal 201411
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #endif
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** {
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   /**
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  @addtogroup allocators
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  @{
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    */
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   /// allocator<void> specialization.
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   template<>
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     class allocator<void>
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     {
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     public:
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef size_t      size_type;
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef void*       pointer;
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef const void* const_pointer;
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef void        value_type;
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 23


  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       template<typename _Tp1>
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	struct rebind
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       template<typename _Up, typename... _Args>
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	void
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	construct(_Up* __p, _Args&&... __args)
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	noexcept(noexcept(::new((void *)__p)
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 			    _Up(std::forward<_Args>(__args)...)))
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       template<typename _Up>
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	void
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	destroy(_Up* __p)
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	noexcept(noexcept(__p->~_Up()))
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	{ __p->~_Up(); }
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #endif
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     };
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   /**
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  for further details.
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    */
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****   template<typename _Tp>
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     class allocator : public __allocator_base<_Tp>
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****     {
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****    public:
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef size_t     size_type;
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef _Tp*       pointer;
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef const _Tp* const_pointer;
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef _Tp&       reference;
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef const _Tp& const_reference;
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef _Tp        value_type;
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       template<typename _Tp1>
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	struct rebind
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 	{ typedef allocator<_Tp1> other; };
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #if __cplusplus >= 201103L
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       typedef true_type is_always_equal;
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** #endif
ARM GAS  /tmp/cc27eAcR.s 			page 24


 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h **** 
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       _GLIBCXX20_CONSTEXPR
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
  53              		.loc 4 138 7 view .LVU5
  54              	.LBB891:
  55              	.LBI891:
  56              		.file 5 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****  */
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <new>
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <bits/move.h>
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #include <type_traits>
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** {
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****   using std::size_t;
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****   /**
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
ARM GAS  /tmp/cc27eAcR.s 			page 25


  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *  @ingroup allocators
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard.
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****    */
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****   template<typename _Tp>
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****     class new_allocator
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****     {
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****     public:
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	struct rebind
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	{ typedef new_allocator<_Tp1> other; };
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  57              		.loc 5 80 7 view .LVU6
  58              		.loc 5 80 7 is_stmt 0 view .LVU7
  59              	.LBE891:
  60              	.LBE890:
  61              	.LBB892:
  62              	.LBI892:
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_NOEXCEPT_IF(
  63              		.loc 3 146 7 is_stmt 1 view .LVU8
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_NOEXCEPT_IF(
  64              		.loc 3 146 7 is_stmt 0 view .LVU9
  65              	.LBE892:
  66              	.LBB893:
  67              	.LBI893:
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
  68              		.loc 3 173 5 is_stmt 1 view .LVU10
  69              	.LBB894:
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reset();
  70              		.loc 3 175 7 view .LVU11
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reset();
  71              		.loc 3 175 26 is_stmt 0 view .LVU12
  72 0002 0022     		movs	r2, #0
  73 0004 0272     		strb	r2, [r0, #8]
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
  74              		.loc 3 176 7 is_stmt 1 view .LVU13
  75              	.LVL2:
ARM GAS  /tmp/cc27eAcR.s 			page 26


  76              	.LBB895:
  77              	.LBI895:
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
  78              		.loc 3 206 5 view .LVU14
  79              	.LBB896:
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_left = &_M_header;
  80              		.loc 3 208 7 view .LVU15
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_left = &_M_header;
  81              		.loc 3 208 27 is_stmt 0 view .LVU16
  82 0006 C260     		str	r2, [r0, #12]
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_right = &_M_header;
  83              		.loc 3 209 7 is_stmt 1 view .LVU17
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_right = &_M_header;
  84              		.loc 3 209 27 is_stmt 0 view .LVU18
  85 0008 00F10801 		add	r1, r0, #8
  86              	.LVL3:
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_header._M_right = &_M_header;
  87              		.loc 3 209 25 view .LVU19
  88 000c 0161     		str	r1, [r0, #16]
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_node_count = 0;
  89              		.loc 3 210 7 is_stmt 1 view .LVU20
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_node_count = 0;
  90              		.loc 3 210 26 is_stmt 0 view .LVU21
  91 000e 4161     		str	r1, [r0, #20]
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
  92              		.loc 3 211 7 is_stmt 1 view .LVU22
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
  93              		.loc 3 211 21 is_stmt 0 view .LVU23
  94 0010 8261     		str	r2, [r0, #24]
  95              	.LVL4:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
  96              		.loc 3 211 21 view .LVU24
  97              	.LBE896:
  98              	.LBE895:
  99              	.LBE894:
 100              	.LBE893:
 101              	.LBE889:
 102              	.LBE888:
 103              	.LBE887:
 104              	.LBB897:
 105              	.LBI897:
 106              		.file 6 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 27


  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  */
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****  */
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #include <initializer_list>
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #include <debug/assertions.h>
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** extern "C" void
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 					  const void*, const void*);
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
ARM GAS  /tmp/cc27eAcR.s 			page 28


  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** {
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     struct _Vector_base
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     {
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        	pointer;
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       struct _Vector_impl_data
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	pointer _M_start;
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	pointer _M_finish;
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ }
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	void
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _M_start = __x._M_start;
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _M_finish = __x._M_finish;
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	}
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	void
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  // information used by TBAA.
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _Vector_impl_data __tmp;
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  __tmp._M_copy_data(*this);
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _M_copy_data(__x);
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  __x._M_copy_data(__tmp);
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	}
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       };
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       struct _Vector_impl
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
ARM GAS  /tmp/cc27eAcR.s 			page 29


 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type()
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ }
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(__a)
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ }
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ }
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ }
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ }
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	template<typename = _Tp_alloc_type>
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  struct _Asan
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  {
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      ::size_type size_type;
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    static void _S_shrink(_Vector_impl&, size_type) { }
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    static void _S_on_dealloc(_Vector_impl&) { }
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    struct _Grow
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    {
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl&, size_type) { }
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      void _M_grew(size_type) { }
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    };
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  };
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	template<typename _Up>
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  {
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      ::size_type size_type;
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    static void
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    {
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    }
ARM GAS  /tmp/cc27eAcR.s 			page 30


 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    static void
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    static void
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    static void
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    {
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      if (__impl._M_start)
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    }
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    struct _Reinit
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    {
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      explicit _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      {
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		_S_on_dealloc(_M_impl);
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      }
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      ~_Reinit()
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      {
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		if (_M_impl._M_start)
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 			    _M_impl._M_finish);
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      }
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    };
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    struct _Grow
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    {
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    private:
ARM GAS  /tmp/cc27eAcR.s 			page 31


 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      _Vector_impl& _M_impl;
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      size_type _M_n;
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    };
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  };
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       };
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     public:
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Tp_alloc_type&
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       const _Tp_alloc_type&
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { return this->_M_impl; }
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       allocator_type
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_base() = default;
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #else
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_base() { }
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _M_impl(__a) { }
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_base(size_t __n)
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _M_impl()
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
ARM GAS  /tmp/cc27eAcR.s 			page 32


 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { _M_create_storage(__n); }
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       // Kept for ABI compatibility.
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _M_impl(__a)
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	else
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  {
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    _M_create_storage(__n);
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  }
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** # endif
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { }
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     public:
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _Vector_impl _M_impl;
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       pointer
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _M_allocate(size_t __n)
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       void
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	if (__p)
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     protected:
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       void
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
ARM GAS  /tmp/cc27eAcR.s 			page 33


 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     };
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****   /**
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  individual elements in any order.
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  @ingroup sequences
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****   */
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     {
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       // Concept requirements.
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** # if __cplusplus < 201103L
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** # endif
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** # ifdef __STRICT_ANSI__
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** # endif
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     public:
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef _Tp					value_type;
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef typename _Base::pointer			pointer;
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
ARM GAS  /tmp/cc27eAcR.s 			page 34


 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       const_iterator;
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef size_t					size_type;
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef ptrdiff_t					difference_type;
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       typedef _Alloc					allocator_type;
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     private:
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       static constexpr bool
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _S_nothrow_relocate(true_type)
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 					  std::declval<pointer>(),
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       static constexpr bool
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _S_nothrow_relocate(false_type)
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { return false; }
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       static constexpr bool
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _S_use_relocate()
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       static pointer
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       static pointer
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { return __result; }
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       static pointer
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif // C++11
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     protected:
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       using _Base::_M_allocate;
ARM GAS  /tmp/cc27eAcR.s 			page 35


 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       using _Base::_M_deallocate;
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       using _Base::_M_impl;
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     public:
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector() = default;
 107              		.loc 6 484 7 is_stmt 1 view .LVU25
 108              	.LBB898:
 109              	.LBI898:
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #else
 110              		.loc 6 285 7 view .LVU26
 111              	.LBB899:
 112              	.LBI899:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 113              		.loc 6 128 2 view .LVU27
 114              	.LBB900:
 115              	.LBI900:
 116              		.loc 4 138 7 view .LVU28
 117              	.LBB901:
 118              	.LBI901:
 119              		.loc 5 80 7 view .LVU29
 120              		.loc 5 80 7 is_stmt 0 view .LVU30
 121              	.LBE901:
 122              	.LBE900:
 123              	.LBB902:
 124              	.LBI902:
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 125              		.loc 6 94 2 is_stmt 1 view .LVU31
 126              	.LBB903:
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ }
 127              		.loc 6 95 47 is_stmt 0 view .LVU32
 128 0012 C261     		str	r2, [r0, #28]
 129 0014 0262     		str	r2, [r0, #32]
 130 0016 4262     		str	r2, [r0, #36]
 131              	.LVL5:
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ }
 132              		.loc 6 95 47 view .LVU33
 133              	.LBE903:
 134              	.LBE902:
 135              	.LBE899:
 136              	.LBE898:
 137              	.LBE897:
 138              	.LBE886:
 139              		.loc 1 4 33 view .LVU34
 140 0018 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE3322:
 144              		.global	_ZN13Planner_phaseC1Ei
 145              		.thumb_set _ZN13Planner_phaseC1Ei,_ZN13Planner_phaseC2Ei
 146              		.section	.text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_lower_boundEP
ARM GAS  /tmp/cc27eAcR.s 			page 36


 147              		.align	1
 148              		.weak	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_lower_boundEPSt13_Rb_t
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv4-sp-d16
 154              	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nod
 155              	.LVL6:
 156              	.LFB3804:
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(const _Compare& __comp,
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       const allocator_type& __a = allocator_type())
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(__comp, _Node_allocator(__a)) { }
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(const _Rb_tree& __x)
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(__x._M_impl)
 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__x._M_root() != 0)
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x);
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(const allocator_type& __a)
 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(_Node_allocator(__a))
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(const _Rb_tree& __x, const allocator_type& __a)
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(__x._M_impl._M_key_compare, _Node_allocator(__a))
 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__x._M_root() != nullptr)
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x);
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&&) = default;
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, const allocator_type& __a)
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _Rb_tree(std::move(__x), _Node_allocator(__a))
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, true_type)
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       noexcept(is_nothrow_default_constructible<_Compare>::value)
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(std::move(__x._M_impl), std::move(__a))
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a, false_type)
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_impl(__x._M_impl._M_key_compare, std::move(__a))
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__x._M_root() != nullptr)
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_move_data(__x, false_type{});
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       noexcept( noexcept(
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Rb_tree(std::declval<_Rb_tree&&>(), std::declval<_Node_allocator&&>(),
ARM GAS  /tmp/cc27eAcR.s 			page 37


 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 std::declval<typename _Alloc_traits::is_always_equal>())) )
 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _Rb_tree(std::move(__x), std::move(__a),
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 typename _Alloc_traits::is_always_equal{})
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { }
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       ~_Rb_tree() _GLIBCXX_NOEXCEPT
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _M_erase(_M_begin()); }
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree&
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator=(const _Rb_tree& __x);
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Accessors.
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Compare
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       key_comp() const
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_impl._M_key_compare; }
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       begin() _GLIBCXX_NOEXCEPT
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(this->_M_impl._M_header._M_left); }
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       begin() const _GLIBCXX_NOEXCEPT
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return const_iterator(this->_M_impl._M_header._M_left); }
1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       end() _GLIBCXX_NOEXCEPT
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       end() const _GLIBCXX_NOEXCEPT
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return const_iterator(&this->_M_impl._M_header); }
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       reverse_iterator
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       rbegin() _GLIBCXX_NOEXCEPT
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return reverse_iterator(end()); }
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_reverse_iterator
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       rbegin() const _GLIBCXX_NOEXCEPT
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return const_reverse_iterator(end()); }
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       reverse_iterator
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       rend() _GLIBCXX_NOEXCEPT
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return reverse_iterator(begin()); }
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_reverse_iterator
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       rend() const _GLIBCXX_NOEXCEPT
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return const_reverse_iterator(begin()); }
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_NODISCARD bool
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       empty() const _GLIBCXX_NOEXCEPT
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_impl._M_node_count == 0; }
1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size_type
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size() const _GLIBCXX_NOEXCEPT
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_impl._M_node_count; }
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 38


1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size_type
1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       max_size() const _GLIBCXX_NOEXCEPT
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Alloc_traits::max_size(_M_get_Node_allocator()); }
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       swap(_Rb_tree& __t)
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value);
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Insert/erase.
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<iterator, bool>
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_unique(_Arg&& __x);
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal(_Arg&& __x);
1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg, typename _NodeGen>
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_unique_(const_iterator __pos, _Arg&& __x)
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return _M_insert_unique_(__pos, std::forward<_Arg>(__x), __an);
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg, typename _NodeGen>
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal_(const_iterator __pos, _Arg&& __x, _NodeGen&);
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Arg>
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal_(const_iterator __pos, _Arg&& __x)
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return _M_insert_equal_(__pos, std::forward<_Arg>(__x), __an);
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<iterator, bool>
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_emplace_unique(_Args&&... __args);
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_emplace_equal(_Args&&... __args);
1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_emplace_hint_unique(const_iterator __pos, _Args&&... __args);
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename... _Args>
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_emplace_hint_equal(const_iterator __pos, _Args&&... __args);
ARM GAS  /tmp/cc27eAcR.s 			page 39


1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Iter>
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	using __same_value_type
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  = is_same<value_type, typename iterator_traits<_Iter>::value_type>;
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__enable_if_t<__same_value_type<_InputIterator>::value>
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_unique_(end(), *__first, __an);
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__enable_if_t<!__same_value_type<_InputIterator>::value>
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_emplace_unique(*__first);
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__enable_if_t<__same_value_type<_InputIterator>::value>
1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_equal_(end(), *__first, __an);
1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__enable_if_t<!__same_value_type<_InputIterator>::value>
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_emplace_equal(*__first);
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<iterator, bool>
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_unique(const value_type& __x);
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal(const value_type& __x);
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_unique_(const_iterator __pos, const value_type& __x,
1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  _NodeGen&);
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_unique_(const_iterator __pos, const value_type& __x)
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_node __an(*this);
1157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_unique_(__pos, __x, __an);
1158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
ARM GAS  /tmp/cc27eAcR.s 			page 40


1159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _NodeGen>
1161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_equal_(const_iterator __pos, const value_type& __x,
1163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			 _NodeGen&);
1164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal_(const_iterator __pos, const value_type& __x)
1166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Alloc_node __an(*this);
1168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_equal_(__pos, __x, __an);
1169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
1174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_unique_(end(), *__first, __an);
1178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _InputIterator>
1181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_insert_range_equal(_InputIterator __first, _InputIterator __last)
1183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (; __first != __last; ++__first)
1186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_insert_equal_(end(), *__first, __an);
1187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
1191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_erase_aux(const_iterator __position);
1193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_erase_aux(const_iterator __first, const_iterator __last);
1196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
1198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // DR 130. Associative erase should return an iterator.
1201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_ABI_TAG_CXX11
1202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const_iterator __position)
1204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__glibcxx_assert(__position != end());
1206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	const_iterator __result = __position;
1207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	++__result;
1208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__position);
1209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __result._M_const_cast();
1210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // LWG 2059.
1213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_ABI_TAG_CXX11
1214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(iterator __position)
ARM GAS  /tmp/cc27eAcR.s 			page 41


1216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__glibcxx_assert(__position != end());
1218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator __result = __position;
1219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	++__result;
1220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__position);
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __result;
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(iterator __position)
1226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__glibcxx_assert(__position != end());
1228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__position);
1229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const_iterator __position)
1233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__glibcxx_assert(__position != end());
1235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__position);
1236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size_type
1239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const key_type& __x);
1240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // DR 130. Associative erase should return an iterator.
1244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _GLIBCXX_ABI_TAG_CXX11
1245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const_iterator __first, const_iterator __last)
1247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase_aux(__first, __last);
1249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __last._M_const_cast();
1250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(iterator __first, iterator __last)
1254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _M_erase_aux(__first, __last); }
1255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const_iterator __first, const_iterator __last)
1258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _M_erase_aux(__first, __last); }
1259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       erase(const key_type* __first, const key_type* __last);
1262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       clear() _GLIBCXX_NOEXCEPT
1265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_erase(_M_begin());
1267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_impl._M_reset();
1268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Set operations.
1271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       find(const key_type& __k);
ARM GAS  /tmp/cc27eAcR.s 			page 42


1273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       find(const key_type& __k) const;
1276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       size_type
1278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       count(const key_type& __k) const;
1279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       lower_bound(const key_type& __k)
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_lower_bound(_M_begin(), _M_end(), __k); }
1283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       lower_bound(const key_type& __k) const
1286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_lower_bound(_M_begin(), _M_end(), __k); }
1287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       upper_bound(const key_type& __k)
1290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_upper_bound(_M_begin(), _M_end(), __k); }
1291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const_iterator
1293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       upper_bound(const key_type& __k) const
1294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_upper_bound(_M_begin(), _M_end(), __k); }
1295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<iterator, iterator>
1297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       equal_range(const key_type& __k);
1298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<const_iterator, const_iterator>
1300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       equal_range(const key_type& __k) const;
1301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201402L
1303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_find_tr(const _Kt& __k)
1307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __const_this->_M_find_tr(__k)._M_const_cast();
1310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	const_iterator
1315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_find_tr(const _Kt& __k) const
1316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __j = _M_lower_bound_tr(__k);
1318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__j != end() && _M_impl._M_key_compare(__k, _S_key(__j._M_node)))
1319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __j = end();
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __j;
1321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	size_type
1326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_count_tr(const _Kt& __k) const
1327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __p = _M_equal_range_tr(__k);
1329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return std::distance(__p.first, __p.second);
ARM GAS  /tmp/cc27eAcR.s 			page 43


1330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_lower_bound_tr(const _Kt& __k)
1336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __const_this->_M_lower_bound_tr(__k)._M_const_cast();
1339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	const_iterator
1344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_lower_bound_tr(const _Kt& __k) const
1345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __x = _M_begin();
1347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __y = _M_end();
1348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  while (__x != 0)
1349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (!_M_impl._M_key_compare(_S_key(__x), __k))
1350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__y = __x;
1352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__x = _S_left(__x);
1353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __x = _S_right(__x);
1356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return const_iterator(__y);
1357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator
1362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_upper_bound_tr(const _Kt& __k)
1363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return __const_this->_M_upper_bound_tr(__k)._M_const_cast();
1366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	const_iterator
1371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_upper_bound_tr(const _Kt& __k) const
1372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __x = _M_begin();
1374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __y = _M_end();
1375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  while (__x != 0)
1376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (_M_impl._M_key_compare(__k, _S_key(__x)))
1377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__y = __x;
1379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__x = _S_left(__x);
1380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __x = _S_right(__x);
1383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return const_iterator(__y);
1384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
ARM GAS  /tmp/cc27eAcR.s 			page 44


1387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<iterator, iterator>
1389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_equal_range_tr(const _Kt& __k)
1390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  const _Rb_tree* __const_this = this;
1392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __ret = __const_this->_M_equal_range_tr(__k);
1393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return { __ret.first._M_const_cast(), __ret.second._M_const_cast() };
1394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Kt,
1397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       typename _Req = __has_is_transparent_t<_Compare, _Kt>>
1398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<const_iterator, const_iterator>
1399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_equal_range_tr(const _Kt& __k) const
1400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __low = _M_lower_bound_tr(__k);
1402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __high = __low;
1403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto& __cmp = _M_impl._M_key_compare;
1404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  while (__high != end() && !__cmp(__k, _S_key(__high._M_node)))
1405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    ++__high;
1406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return { __low, __high };
1407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Debugging.
1411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool
1412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       __rb_verify() const;
1413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree&
1416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator=(_Rb_tree&&)
1417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       noexcept(_Alloc_traits::_S_nothrow_move()
1418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	       && is_nothrow_move_assignable<_Compare>::value);
1419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Iterator>
1421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_assign_unique(_Iterator, _Iterator);
1423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Iterator>
1425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_assign_equal(_Iterator, _Iterator);
1427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     private:
1429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Move elements from container with equal allocator.
1430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_data(_Rb_tree& __x, true_type)
1432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _M_impl._M_move_data(__x._M_impl); }
1433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Move elements from container with possibly non-equal allocator,
1435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // which might result in a copy not a move.
1436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_data(_Rb_tree&, false_type);
1438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Move assignment from container with equal allocator.
1440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_assign(_Rb_tree&, true_type);
1442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Move assignment from container with possibly non-equal allocator,
ARM GAS  /tmp/cc27eAcR.s 			page 45


1444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // which might result in a copy not a move.
1445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_assign(_Rb_tree&, false_type);
1447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus > 201402L
1450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     public:
1451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Re-insert an extracted node.
1452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       insert_return_type
1453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reinsert_node_unique(node_type&& __nh)
1454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	insert_return_type __ret;
1456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__nh.empty())
1457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __ret.position = end();
1458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
1461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_unique_pos(__nh._M_key());
1463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
1464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.position
1466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
1467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__nh._M_ptr = nullptr;
1468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.inserted = true;
1469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.node = std::move(__nh);
1473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.position = iterator(__res.first);
1474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret.inserted = false;
1475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __ret;
1478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Re-insert an extracted node.
1481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reinsert_node_equal(node_type&& __nh)
1483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator __ret;
1485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__nh.empty())
1486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __ret = end();
1487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
1490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_equal_pos(__nh._M_key());
1491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
1492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
1493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = _M_insert_equal_lower_node(__nh._M_ptr);
1495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __nh._M_ptr = nullptr;
1496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __ret;
1498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Re-insert an extracted node.
ARM GAS  /tmp/cc27eAcR.s 			page 46


1501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reinsert_node_hint_unique(const_iterator __hint, node_type&& __nh)
1503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator __ret;
1505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__nh.empty())
1506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __ret = end();
1507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
1510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_hint_unique_pos(__hint, __nh._M_key());
1511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
1512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
1514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__nh._M_ptr = nullptr;
1515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = iterator(__res.first);
1518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __ret;
1520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Re-insert an extracted node.
1523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator
1524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_reinsert_node_hint_equal(const_iterator __hint, node_type&& __nh)
1525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	iterator __ret;
1527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__nh.empty())
1528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __ret = end();
1529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __glibcxx_assert(_M_get_Node_allocator() == *__nh._M_alloc);
1532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_hint_equal_pos(__hint, __nh._M_key());
1533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
1534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = _M_insert_node(__res.first, __res.second, __nh._M_ptr);
1535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    else
1536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __ret = _M_insert_equal_lower_node(__nh._M_ptr);
1537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __nh._M_ptr = nullptr;
1538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __ret;
1540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Extract a node.
1543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       node_type
1544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       extract(const_iterator __pos)
1545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	auto __ptr = _Rb_tree_rebalance_for_erase(
1547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __pos._M_const_cast()._M_node, _M_impl._M_header);
1548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	--_M_impl._M_node_count;
1549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return { static_cast<_Link_type>(__ptr), _M_get_Node_allocator() };
1550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Extract a node.
1553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       node_type
1554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       extract(const key_type& __k)
1555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	node_type __nh;
1557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	auto __pos = find(__k);
ARM GAS  /tmp/cc27eAcR.s 			page 47


1558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__pos != end())
1559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __nh = extract(const_iterator(__pos));
1560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __nh;
1561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Compare2>
1564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	using _Compatible_tree
1565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  = _Rb_tree<_Key, _Val, _KeyOfValue, _Compare2, _Alloc>;
1566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename, typename>
1568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	friend class _Rb_tree_merge_helper;
1569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Merge from a compatible container into one with unique keys.
1571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Compare2>
1572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_merge_unique(_Compatible_tree<_Compare2>& __src) noexcept
1574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
1576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
1577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto __pos = __i++;
1579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto __res = _M_get_insert_unique_pos(_KeyOfValue()(*__pos));
1580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (__res.second)
1581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		{
1582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  auto& __src_impl = _Merge_helper::_S_get_impl(__src);
1583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  auto __ptr = _Rb_tree_rebalance_for_erase(
1584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      __pos._M_node, __src_impl._M_header);
1585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  --__src_impl._M_node_count;
1586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  _M_insert_node(__res.first, __res.second,
1587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				 static_cast<_Link_type>(__ptr));
1588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		}
1589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
1590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       /// Merge from a compatible container into one with equivalent keys.
1593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       template<typename _Compare2>
1594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	void
1595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_merge_equal(_Compatible_tree<_Compare2>& __src) noexcept
1596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  using _Merge_helper = _Rb_tree_merge_helper<_Rb_tree, _Compare2>;
1598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  for (auto __i = __src.begin(), __end = __src.end(); __i != __end;)
1599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto __pos = __i++;
1601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto __res = _M_get_insert_equal_pos(_KeyOfValue()(*__pos));
1602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (__res.second)
1603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		{
1604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  auto& __src_impl = _Merge_helper::_S_get_impl(__src);
1605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  auto __ptr = _Rb_tree_rebalance_for_erase(
1606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      __pos._M_node, __src_impl._M_header);
1607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  --__src_impl._M_node_count;
1608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  _M_insert_node(__res.first, __res.second,
1609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				 static_cast<_Link_type>(__ptr));
1610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		}
1611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
1612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif // C++17
1614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 48


1615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
1616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator==(const _Rb_tree& __x, const _Rb_tree& __y)
1617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __x.size() == __y.size()
1619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  && std::equal(__x.begin(), __x.end(), __y.begin());
1620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool
1623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator<(const _Rb_tree& __x, const _Rb_tree& __y)
1624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return std::lexicographical_compare(__x.begin(), __x.end(),
1626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 					    __y.begin(), __y.end());
1627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool _GLIBCXX_DEPRECATED
1630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator!=(const _Rb_tree& __x, const _Rb_tree& __y)
1631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return !(__x == __y); }
1632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool _GLIBCXX_DEPRECATED
1634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator>(const _Rb_tree& __x, const _Rb_tree& __y)
1635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __y < __x; }
1636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool _GLIBCXX_DEPRECATED
1638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator<=(const _Rb_tree& __x, const _Rb_tree& __y)
1639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return !(__y < __x); }
1640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       friend bool _GLIBCXX_DEPRECATED
1642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       operator>=(const _Rb_tree& __x, const _Rb_tree& __y)
1643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return !(__x < __y); }
1644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     };
1645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     inline void
1649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
1650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
1651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     { __x.swap(__y); }
1652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
1657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_move_data(_Rb_tree& __x, false_type)
1659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
1661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_move_data(__x, true_type());
1662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
1663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
1665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __lbd =
1666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    [&__an](const value_type& __cval)
1667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto& __val = const_cast<value_type&>(__cval);
1669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return __an(std::move_if_noexcept(__val));
1670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    };
1671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x, __lbd);
ARM GAS  /tmp/cc27eAcR.s 			page 49


1672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     inline void
1678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_move_assign(_Rb_tree& __x, true_type)
1680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       clear();
1682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__x._M_root() != nullptr)
1683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_move_data(__x, true_type());
1684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       std::__alloc_on_move(_M_get_Node_allocator(),
1685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   __x._M_get_Node_allocator());
1686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
1691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_move_assign(_Rb_tree& __x, false_type)
1693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (_M_get_Node_allocator() == __x._M_get_Node_allocator())
1695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_move_assign(__x, true_type{});
1696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Try to move each node reusing existing nodes and copying __x nodes
1698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // structure.
1699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Reuse_or_alloc_node __roan(*this);
1700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_impl._M_reset();
1701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__x._M_root() != nullptr)
1702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  auto __lbd =
1704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    [&__roan](const value_type& __cval)
1705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto& __val = const_cast<value_type&>(__cval);
1707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return __roan(std::move_if_noexcept(__val));
1708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    };
1709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root() = _M_copy(__x, __lbd);
1710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x.clear();
1711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
1717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     operator=(_Rb_tree&& __x)
1719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     noexcept(_Alloc_traits::_S_nothrow_move()
1720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	     && is_nothrow_move_assignable<_Compare>::value)
1721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_impl._M_key_compare = std::move(__x._M_impl._M_key_compare);
1723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_move_assign(__x, __bool_constant<_Alloc_traits::_S_nothrow_move()>());
1724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return *this;
1725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
ARM GAS  /tmp/cc27eAcR.s 			page 50


1729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Iterator>
1730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_assign_unique(_Iterator __first, _Iterator __last)
1733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Reuse_or_alloc_node __roan(*this);
1735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_impl._M_reset();
1736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	for (; __first != __last; ++__first)
1737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_insert_unique_(end(), *__first, __roan);
1738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Iterator>
1743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       void
1744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_assign_equal(_Iterator __first, _Iterator __last)
1746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Reuse_or_alloc_node __roan(*this);
1748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_M_impl._M_reset();
1749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	for (; __first != __last; ++__first)
1750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_insert_equal_(end(), *__first, __roan);
1751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
1757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     operator=(const _Rb_tree& __x)
1759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (this != &__x)
1761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // Note that _Key may be a constant type.
1763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
1765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
1766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto& __this_alloc = this->_M_get_Node_allocator();
1767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      auto& __that_alloc = __x._M_get_Node_allocator();
1768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (!_Alloc_traits::_S_always_equal()
1769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  && __this_alloc != __that_alloc)
1770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		{
1771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  // Replacement allocator cannot free existing storage, we need
1772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  // to erase nodes first.
1773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  clear();
1774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  std::__alloc_on_copy(__this_alloc, __that_alloc);
1775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		}
1776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
1777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Reuse_or_alloc_node __roan(*this);
1780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_impl._M_reset();
1781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_impl._M_key_compare = __x._M_impl._M_key_compare;
1782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__x._M_root() != 0)
1783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_root() = _M_copy(__x, __roan);
1784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 51


1786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return *this;
1787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg, typename _NodeGen>
1793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _NodeGen>
1795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_(_Base_ptr __x, _Base_ptr __p,
1799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 _Arg&& __v,
1801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 const _Val& __v,
1803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		 _NodeGen& __node_gen)
1805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	bool __insert_left = (__x != 0 || __p == _M_end()
1807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
1808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 							_S_key(__p)));
1809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
1811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
1813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				      this->_M_impl._M_header);
1814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	++_M_impl._M_node_count;
1815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return iterator(__z);
1816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg>
1822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_lower(_Base_ptr __p, _Arg&& __v)
1827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_lower(_Base_ptr __p, const _Val& __v)
1829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool __insert_left = (__p == _M_end()
1832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    || !_M_impl._M_key_compare(_S_key(__p),
1833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						       _KeyOfValue()(__v)));
1834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __z = _M_create_node(_GLIBCXX_FORWARD(_Arg, __v));
1836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
1838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    this->_M_impl._M_header);
1839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       ++_M_impl._M_node_count;
1840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__z);
1841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 52


1843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg>
1847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
1849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
1851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal_lower(_Arg&& __v)
1852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
1853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal_lower(const _Val& __v)
1854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
1855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
1857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
1858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x;
1861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
1862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_S_left(__x) : _S_right(__x);
1863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _M_insert_lower(__y, _GLIBCXX_FORWARD(_Arg, __v));
1865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KoV,
1868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _NodeGen>
1870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
1871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
1872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_copy(_Const_Link_type __x, _Base_ptr __p, _NodeGen& __node_gen)
1873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
1874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// Structural copy. __x and __p must be non-null.
1875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __top = _M_clone_node(__x, __node_gen);
1876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__top->_M_parent = __p;
1877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
1879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__x->_M_right)
1881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __top->_M_right = _M_copy(_S_right(__x), __top, __node_gen);
1882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __p = __top;
1883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __x = _S_left(__x);
1884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    while (__x != 0)
1886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      {
1887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_Link_type __y = _M_clone_node(__x, __node_gen);
1888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__p->_M_left = __y;
1889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__y->_M_parent = __p;
1890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		if (__x->_M_right)
1891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		  __y->_M_right = _M_copy(_S_right(__x), __y, __node_gen);
1892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__p = __y;
1893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		__x = _S_left(__x);
1894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      }
1895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
1897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
1898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_erase(__top);
1899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
ARM GAS  /tmp/cc27eAcR.s 			page 53


1900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
1901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return __top;
1902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
1903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
1907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_erase(_Link_type __x)
1909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // Erase without rebalancing.
1911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_erase(_S_right(__x));
1914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Link_type __y = _S_left(__x);
1915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_drop_node(__x);
1916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = __y;
1917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
1918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _Compare, _Alloc>::iterator
1924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 157              		.loc 3 1924 5 is_stmt 1 view -0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 0
 160              		@ frame_needed = 0, uses_anonymous_args = 0
 161              		@ link register save eliminated.
 162              		.loc 3 1924 5 is_stmt 0 view .LVU36
 163 0000 1046     		mov	r0, r2
 164              	.LVL7:
1925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_lower_bound(_Link_type __x, _Base_ptr __y,
1926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const _Key& __k)
1927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
 165              		.loc 3 1928 18 is_stmt 1 view .LVU37
 166 0002 61B1     		cbz	r1, .L12
1924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_lower_bound(_Link_type __x, _Base_ptr __y,
 167              		.loc 3 1924 5 is_stmt 0 view .LVU38
 168 0004 30B4     		push	{r4, r5}
 169              	.LCFI0:
 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 4, -8
 172              		.cfi_offset 5, -4
 173 0006 01E0     		b	.L10
 174              	.LVL8:
 175              	.L5:
 176              	.LBB904:
 177              	.LBI904:
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 178              		.loc 3 797 7 is_stmt 1 view .LVU39
 179              	.LBB905:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 180              		.loc 3 798 53 is_stmt 0 view .LVU40
 181 0008 C968     		ldr	r1, [r1, #12]
ARM GAS  /tmp/cc27eAcR.s 			page 54


 182              	.LVL9:
 183              	.L3:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 184              		.loc 3 798 53 view .LVU41
 185              	.LBE905:
 186              	.LBE904:
 187              		.loc 3 1928 18 is_stmt 1 view .LVU42
 188 000a 31B1     		cbz	r1, .L4
 189              	.L10:
 190              	.LVL10:
 191              	.LBB906:
 192              	.LBI906:
 193              		.file 7 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // Functor implementations -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Copyright (c) 1996-1998
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * provided that the above copyright notice appear in all copies and
ARM GAS  /tmp/cc27eAcR.s 			page 55


  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  */
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** /** @file bits/stl_function.h
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  *  Do not attempt to use it directly. @headername{functional}
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****  */
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifndef _STL_FUNCTION_H
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #define _STL_FUNCTION_H 1
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #include <bits/move.h>
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** {
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.1 base classes
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup functors Function Objects
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup utilities
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Function objects, or @e functors, are objects with an @c operator()
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  defined and accessible.  They can be passed as arguments to algorithm
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  templates and used in place of a function pointer.  Not only is the
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  resulting expressiveness of the library increased, but the generated
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  code can be more efficient than what you might write by hand.  When we
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  refer to @a functors, then, generally we include function pointers in
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  the description as well.
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Often, functors are only created as temporaries passed to algorithm
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  calls, rather than being created as named variables.
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Two examples taken from the standard itself follow.  To perform a
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  by-element addition of two vectors @c a and @c b containing @c double,
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  and put the result in @c a, use
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \code
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  transform (a.begin(), a.end(), b.begin(), a.begin(), plus<double>());
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \endcode
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  To negate every element in @c a, use
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \code
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  transform(a.begin(), a.end(), a.begin(), negate<double>());
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \endcode
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The addition and negation functions will be inlined directly.
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The standard functors are derived from structs named @c unary_function
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  and @c binary_function.  These two classes contain nothing but typedefs,
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  to aid in generic (template) programming.  If you write your own
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  functors, you might consider doing the same.
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /**
ARM GAS  /tmp/cc27eAcR.s 			page 56


 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  This is one of the @link functors functor base classes@endlink.
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg, typename _Result>
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct unary_function
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c argument_type is the type of the argument
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Arg 	argument_type;   
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c result_type is the return type
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Result 	result_type;  
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /**
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  This is one of the @link functors functor base classes@endlink.
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct binary_function
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c first_argument_type is the type of the first argument
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Arg1 	first_argument_type; 
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c second_argument_type is the type of the second argument
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Arg2 	second_argument_type;
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       /// @c result_type is the return type
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef _Result 	result_type;
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.2 arithmetic
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup arithmetic_functors Arithmetic Classes
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Because basic math often needs to be done during an algorithm,
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  the library provides functors for those operations.  See the
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  documentation for @link functors the base classes@endlink
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  for examples of their use.
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   struct __is_transparent;  // undefined
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct plus;
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct minus;
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct multiplies;
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct divides;
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
ARM GAS  /tmp/cc27eAcR.s 			page 57


 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct modulus;
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct negate;
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct plus : public binary_function<_Tp, _Tp, _Tp>
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x + __y; }
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct minus : public binary_function<_Tp, _Tp, _Tp>
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x - __y; }
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct multiplies : public binary_function<_Tp, _Tp, _Tp>
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x * __y; }
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct divides : public binary_function<_Tp, _Tp, _Tp>
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x / __y; }
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct modulus : public binary_function<_Tp, _Tp, _Tp>
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x % __y; }
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
ARM GAS  /tmp/cc27eAcR.s 			page 58


 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct negate : public unary_function<_Tp, _Tp>
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x) const
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return -__x; }
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #define __cpp_lib_transparent_operators 201510
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct plus<void>
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) + std::forward<_Up>(__u)))
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) + std::forward<_Up>(__u))
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) + std::forward<_Up>(__u); }
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct minus<void>
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) - std::forward<_Up>(__u)))
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) - std::forward<_Up>(__u))
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) - std::forward<_Up>(__u); }
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct multiplies<void>
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) * std::forward<_Up>(__u)))
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) * std::forward<_Up>(__u))
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) * std::forward<_Up>(__u); }
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 59


 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct divides<void>
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) / std::forward<_Up>(__u)))
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) / std::forward<_Up>(__u))
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) / std::forward<_Up>(__u); }
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct modulus<void>
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) % std::forward<_Up>(__u)))
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) % std::forward<_Up>(__u))
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) % std::forward<_Up>(__u); }
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link arithmetic_functors math functors@endlink.
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct negate<void>
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp>
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(-std::forward<_Tp>(__t)))
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(-std::forward<_Tp>(__t))
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return -std::forward<_Tp>(__t); }
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.3 comparisons
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup comparison_functors Comparison Classes
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The library provides six wrapper functors for all the basic comparisons
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  in C++, like @c <.
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
ARM GAS  /tmp/cc27eAcR.s 			page 60


 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct equal_to;
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct not_equal_to;
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater;
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less;
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater_equal;
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less_equal;
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct equal_to : public binary_function<_Tp, _Tp, bool>
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x == __y; }
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct not_equal_to : public binary_function<_Tp, _Tp, bool>
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x != __y; }
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater : public binary_function<_Tp, _Tp, bool>
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x > __y; }
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less : public binary_function<_Tp, _Tp, bool>
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 194              		.loc 7 385 7 view .LVU43
ARM GAS  /tmp/cc27eAcR.s 			page 61


 195              	.LBB907:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 196              		.loc 7 386 20 is_stmt 0 view .LVU44
 197 000c 0D69     		ldr	r5, [r1, #16]
 198 000e 1C68     		ldr	r4, [r3]
 199              	.LVL11:
 200              		.loc 7 386 20 view .LVU45
 201              	.LBE907:
 202              	.LBE906:
1929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 203              		.loc 3 1929 2 view .LVU46
 204 0010 A542     		cmp	r5, r4
 205 0012 F9DB     		blt	.L5
 206              	.LVL12:
 207              	.LBB908:
 208              	.LBI908:
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 209              		.loc 3 789 7 is_stmt 1 view .LVU47
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 210              		.loc 3 789 7 is_stmt 0 view .LVU48
 211              	.LBE908:
1930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
 212              		.loc 3 1930 4 view .LVU49
 213 0014 0846     		mov	r0, r1
 214              		.loc 3 1930 28 view .LVU50
 215 0016 8968     		ldr	r1, [r1, #8]
 216              	.LVL13:
 217              		.loc 3 1930 28 view .LVU51
 218 0018 F7E7     		b	.L3
 219              	.L4:
 220              	.LVL14:
 221              	.LBB909:
 222              	.LBI909:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 223              		.loc 3 273 7 is_stmt 1 view .LVU52
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 224              		.loc 3 273 7 is_stmt 0 view .LVU53
 225              	.LBE909:
1931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _S_right(__x);
1933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__y);
1934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 226              		.loc 3 1934 5 view .LVU54
 227 001a 30BC     		pop	{r4, r5}
 228              	.LCFI1:
 229              		.cfi_restore 5
 230              		.cfi_restore 4
 231              		.cfi_def_cfa_offset 0
 232 001c 7047     		bx	lr
 233              	.L12:
 234              	.LVL15:
 235              	.LBB910:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 236              		.loc 3 273 7 is_stmt 1 view .LVU55
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 237              		.loc 3 273 7 is_stmt 0 view .LVU56
 238              	.LBE910:
ARM GAS  /tmp/cc27eAcR.s 			page 62


 239              		.loc 3 1934 5 view .LVU57
 240 001e 7047     		bx	lr
 241              		.cfi_endproc
 242              	.LFE3804:
 244              		.section	.text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE4findERS1_,"axG",%
 245              		.align	1
 246              		.weak	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE4findERS1_
 247              		.syntax unified
 248              		.thumb
 249              		.thumb_func
 250              		.fpu fpv4-sp-d16
 252              	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE4findERS1_:
 253              	.LVL16:
 254              	.LFB3718:
1935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _Compare, _Alloc>::const_iterator
1940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_lower_bound(_Const_Link_type __x, _Const_Base_ptr __y,
1942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const _Key& __k) const
1943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (!_M_impl._M_key_compare(_S_key(__x), __k))
1946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _S_right(__x);
1949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return const_iterator(__y);
1950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _Compare, _Alloc>::iterator
1956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_upper_bound(_Link_type __x, _Base_ptr __y,
1958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const _Key& __k)
1959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (_M_impl._M_key_compare(__k, _S_key(__x)))
1962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _S_right(__x);
1965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__y);
1966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
1971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _Compare, _Alloc>::const_iterator
1972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_upper_bound(_Const_Link_type __x, _Const_Base_ptr __y,
1974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		   const _Key& __k) const
1975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (_M_impl._M_key_compare(__k, _S_key(__x)))
ARM GAS  /tmp/cc27eAcR.s 			page 63


1978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x, __x = _S_left(__x);
1979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	else
1980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _S_right(__x);
1981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return const_iterator(__y);
1982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
1983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
1984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
1985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
1986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
1987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::iterator,
1988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
1989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::iterator>
1990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
1991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     equal_range(const _Key& __k)
1992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
1993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
1994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
1995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
1996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
1997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_M_impl._M_key_compare(_S_key(__x), __k))
1998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __x = _S_right(__x);
1999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
2000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __y = __x, __x = _S_left(__x);
2001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Link_type __xu(__x);
2004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Base_ptr __yu(__y);
2005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __y = __x, __x = _S_left(__x);
2006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __xu = _S_right(__xu);
2007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return pair<iterator,
2008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  iterator>(_M_lower_bound(__x, __y, __k),
2009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    _M_upper_bound(__xu, __yu, __k));
2010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return pair<iterator, iterator>(iterator(__y),
2013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				      iterator(__y));
2014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::const_iterator,
2020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::const_iterator>
2022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     equal_range(const _Key& __k) const
2024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Link_type __x = _M_begin();
2026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Const_Base_ptr __y = _M_end();
2027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
2028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (_M_impl._M_key_compare(_S_key(__x), __k))
2030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __x = _S_right(__x);
2031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(__k, _S_key(__x)))
2032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __y = __x, __x = _S_left(__x);
2033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
ARM GAS  /tmp/cc27eAcR.s 			page 64


2035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Const_Link_type __xu(__x);
2036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      _Const_Base_ptr __yu(__y);
2037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __y = __x, __x = _S_left(__x);
2038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      __xu = _S_right(__xu);
2039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return pair<const_iterator,
2040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  const_iterator>(_M_lower_bound(__x, __y, __k),
2041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 					  _M_upper_bound(__xu, __yu, __k));
2042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return pair<const_iterator, const_iterator>(const_iterator(__y),
2045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						  const_iterator(__y));
2046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
2051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     swap(_Rb_tree& __t)
2053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)
2054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (_M_root() == 0)
2056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__t._M_root() != 0)
2058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_impl._M_move_data(__t._M_impl);
2059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else if (__t._M_root() == 0)
2061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__t._M_impl._M_move_data(_M_impl);
2062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
2063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  std::swap(_M_root(),__t._M_root());
2065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  std::swap(_M_leftmost(),__t._M_leftmost());
2066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  std::swap(_M_rightmost(),__t._M_rightmost());
2067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_root()->_M_parent = _M_end();
2069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __t._M_root()->_M_parent = __t._M_end();
2070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
2071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // No need to swap header's color as it does not change.
2073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);
2074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Alloc_traits::_S_on_swap(_M_get_Node_allocator(),
2076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				__t._M_get_Node_allocator());
2077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
2083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
2085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
2087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
2089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
2090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
2091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool __comp = true;
ARM GAS  /tmp/cc27eAcR.s 			page 65


2092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
2093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x;
2095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
2096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = __comp ? _S_left(__x) : _S_right(__x);
2097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator __j = iterator(__y);
2099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__comp)
2100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__j == begin())
2102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(__x, __y);
2103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    --__j;
2105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
2107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _Res(__x, __y);
2108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _Res(__j._M_node, 0);
2109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
2115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
2117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_equal_pos(const key_type& __k)
2119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
2121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
2122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
2123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
2124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x;
2126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?
2127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_S_left(__x) : _S_right(__x);
2128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _Res(__x, __y);
2130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg>
2136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::iterator, bool>
2139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_unique(_Arg&& __v)
2142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_unique(const _Val& __v)
2144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<iterator, bool> _Res;
2147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr> __res
2148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_unique_pos(_KeyOfValue()(__v));
ARM GAS  /tmp/cc27eAcR.s 			page 66


2149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__res.second)
2151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _Alloc_node __an(*this);
2153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return _Res(_M_insert_(__res.first, __res.second,
2154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				 _GLIBCXX_FORWARD(_Arg, __v), __an),
2155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      true);
2156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _Res(iterator(__res.first), false);
2159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg>
2165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal(_Arg&& __v)
2170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal(const _Val& __v)
2172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr> __res
2175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_equal_pos(_KeyOfValue()(__v));
2176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Alloc_node __an(*this);
2177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _M_insert_(__res.first, __res.second,
2178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_GLIBCXX_FORWARD(_Arg, __v), __an);
2179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
2185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
2187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
2189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				  const key_type& __k)
2190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator __pos = __position._M_const_cast();
2192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
2193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // end()
2195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__pos._M_node == _M_end())
2196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (size() > 0
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
2199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_unique_pos(__k);
2202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
2204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // First, try before...
ARM GAS  /tmp/cc27eAcR.s 			page 67


2206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  iterator __before = __pos;
2207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__pos._M_node == _M_leftmost()) // begin()
2208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
2209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
2210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_S_right(__before._M_node) == 0)
2212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
2213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else
2214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(__pos._M_node, __pos._M_node);
2215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_unique_pos(__k);
2218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
2220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // ... then try after.
2222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  iterator __after = __pos;
2223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__pos._M_node == _M_rightmost())
2224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
2226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_S_right(__pos._M_node) == 0)
2228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
2229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else
2230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(__after._M_node, __after._M_node);
2231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_unique_pos(__k);
2234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
2236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	// Equivalent keys.
2237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _Res(__pos._M_node, 0);
2238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg, typename _NodeGen>
2244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _NodeGen>
2246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_unique_(const_iterator __position,
2250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_Arg&& __v,
2252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			const _Val& __v,
2254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			_NodeGen& __node_gen)
2256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<_Base_ptr, _Base_ptr> __res
2258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
2259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__res.second)
2261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_(__res.first, __res.second,
2262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  _GLIBCXX_FORWARD(_Arg, __v),
ARM GAS  /tmp/cc27eAcR.s 			page 68


2263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			  __node_gen);
2264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__res.first);
2265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr,
2271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	 typename _Rb_tree<_Key, _Val, _KeyOfValue,
2272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			   _Compare, _Alloc>::_Base_ptr>
2273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)
2275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator __pos = __position._M_const_cast();
2277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typedef pair<_Base_ptr, _Base_ptr> _Res;
2278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       // end()
2280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__pos._M_node == _M_end())
2281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (size() > 0
2283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      && !_M_impl._M_key_compare(__k, _S_key(_M_rightmost())))
2284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_equal_pos(__k);
2287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else if (!_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
2289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // First, try before...
2291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  iterator __before = __pos;
2292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__pos._M_node == _M_leftmost()) // begin()
2293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
2294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (!_M_impl._M_key_compare(__k, _S_key((--__before)._M_node)))
2295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_S_right(__before._M_node) == 0)
2297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
2298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else
2299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(__pos._M_node, __pos._M_node);
2300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_get_insert_equal_pos(__k);
2303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
2305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  // ... then try after.
2307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  iterator __after = __pos;
2308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  if (__pos._M_node == _M_rightmost())
2309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
2310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node), __k))
2311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
2312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      if (_S_right(__pos._M_node) == 0)
2313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
2314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      else
2315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(__after._M_node, __after._M_node);
2316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    }
2317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  else
2318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, 0);
2319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
ARM GAS  /tmp/cc27eAcR.s 			page 69


2320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _Arg, typename _NodeGen>
2326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename _NodeGen>
2328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_insert_equal_(const_iterator __position,
2332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		       _Arg&& __v,
2334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #else
2335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		       const _Val& __v,
2336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		       _NodeGen& __node_gen)
2338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
2339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	pair<_Base_ptr, _Base_ptr> __res
2340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  = _M_get_insert_hint_equal_pos(__position, _KeyOfValue()(__v));
2341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	if (__res.second)
2343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  return _M_insert_(__res.first, __res.second,
2344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    _GLIBCXX_FORWARD(_Arg, __v),
2345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    __node_gen);
2346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _M_insert_equal_lower(_GLIBCXX_FORWARD(_Arg, __v));
2348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
2349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #if __cplusplus >= 201103L
2351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
2356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool __insert_left = (__x != 0 || __p == _M_end()
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    || _M_impl._M_key_compare(_S_key(__z),
2359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
2360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
2362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    this->_M_impl._M_header);
2363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       ++_M_impl._M_node_count;
2364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__z);
2365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_lower_node(_Base_ptr __p, _Link_type __z)
2372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       bool __insert_left = (__p == _M_end()
2374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    || !_M_impl._M_key_compare(_S_key(__p),
2375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						       _S_key(__z)));
2376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 70


2377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
2378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    this->_M_impl._M_header);
2379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       ++_M_impl._M_node_count;
2380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__z);
2381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_equal_lower_node(_Link_type __z)
2388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __x = _M_begin();
2390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Base_ptr __y = _M_end();
2391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
2392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
2393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __y = __x;
2394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?
2395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		_S_left(__x) : _S_right(__x);
2396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
2397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return _M_insert_lower_node(__y, __z);
2398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename... _Args>
2403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
2404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			     _Compare, _Alloc>::iterator, bool>
2405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_unique(_Args&&... __args)
2407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
2408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
2411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    typedef pair<iterator, bool> _Res;
2413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_unique_pos(_S_key(__z));
2414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
2415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
2416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	
2417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(iterator(__res.first), false);
2419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
2421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
2424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
2426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename... _Args>
2430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_equal(_Args&&... __args)
2433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
ARM GAS  /tmp/cc27eAcR.s 			page 71


2434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
2437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_equal_pos(_S_key(__z));
2439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_insert_node(__res.first, __res.second, __z);
2440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
2442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
2445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
2447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename... _Args>
2451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
2454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
2455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
2458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
2460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
2462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
2463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return iterator(__res.first);
2466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
2468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
2471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
2473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     template<typename... _Args>
2477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
2478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_hint_equal(const_iterator __pos, _Args&&... __args)
2480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
2481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
2482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__try
2484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    auto __res = _M_get_insert_hint_equal_pos(__pos, _S_key(__z));
2486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
2488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
2489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _M_insert_equal_lower_node(__z);
ARM GAS  /tmp/cc27eAcR.s 			page 72


2491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	__catch(...)
2493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  {
2494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    _M_drop_node(__z);
2495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    __throw_exception_again;
2496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
2497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
2498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** #endif
2499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
2504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_erase_aux(const_iterator __position)
2506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _Link_type __y =
2508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
2509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				(const_cast<_Base_ptr>(__position._M_node),
2510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				 this->_M_impl._M_header));
2511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_drop_node(__y);
2512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       --_M_impl._M_node_count;
2513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
2518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_erase_aux(const_iterator __first, const_iterator __last)
2520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       if (__first == begin() && __last == end())
2522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	clear();
2523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       else
2524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	while (__first != __last)
2525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  _M_erase_aux(__first++);
2526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
2531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     erase(const _Key& __x)
2533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       pair<iterator, iterator> __p = equal_range(__x);
2535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       const size_type __old_size = size();
2536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_erase_aux(__p.first, __p.second);
2537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return __old_size - size();
2538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     void
2543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
2544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     erase(const _Key* __first, const _Key* __last)
2545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__first != __last)
2547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	erase(*__first++);
ARM GAS  /tmp/cc27eAcR.s 			page 73


2548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
2549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
2550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****   template<typename _Key, typename _Val, typename _KeyOfValue,
2551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	   typename _Compare, typename _Alloc>
2552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     typename _Rb_tree<_Key, _Val, _KeyOfValue,
2553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		      _Compare, _Alloc>::iterator
2554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 255              		.loc 3 2554 5 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
 258              		@ frame_needed = 0, uses_anonymous_args = 0
 259              		.loc 3 2554 5 is_stmt 0 view .LVU59
 260 0000 70B5     		push	{r4, r5, r6, lr}
 261              	.LCFI2:
 262              		.cfi_def_cfa_offset 16
 263              		.cfi_offset 4, -16
 264              		.cfi_offset 5, -12
 265              		.cfi_offset 6, -8
 266              		.cfi_offset 14, -4
 267 0002 0E46     		mov	r6, r1
 268              	.LVL17:
 269              	.LBB911:
 270              	.LBI911:
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 271              		.loc 3 744 7 is_stmt 1 view .LVU60
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 272              		.loc 3 744 7 is_stmt 0 view .LVU61
 273              	.LBE911:
 274              	.LBB912:
 275              	.LBI912:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 276              		.loc 3 755 7 is_stmt 1 view .LVU62
 277              	.LBB913:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 278              		.loc 3 756 31 is_stmt 0 view .LVU63
 279 0004 041D     		adds	r4, r0, #4
 280              	.LVL18:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 281              		.loc 3 756 31 view .LVU64
 282              	.LBE913:
 283              	.LBE912:
2555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     find(const _Key& __k)
2556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     {
2557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 284              		.loc 3 2557 16 view .LVU65
 285 0006 0B46     		mov	r3, r1
 286 0008 2246     		mov	r2, r4
 287 000a 8168     		ldr	r1, [r0, #8]
 288              	.LVL19:
 289              		.loc 3 2557 16 view .LVU66
 290 000c FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_lower_boundEPSt13_Rb_tree
 291              	.LVL20:
 292              	.LBB914:
 293              	.LBI914:
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 294              		.loc 3 1014 7 is_stmt 1 view .LVU67
 295              	.LBB915:
ARM GAS  /tmp/cc27eAcR.s 			page 74


 296              	.LBI915:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 297              		.loc 3 273 7 view .LVU68
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 298              		.loc 3 273 7 is_stmt 0 view .LVU69
 299              	.LBE915:
 300              	.LBE914:
 301              	.LBB916:
 302              	.LBI916:
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 303              		.loc 3 315 7 is_stmt 1 view .LVU70
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 304              		.loc 3 315 7 is_stmt 0 view .LVU71
 305              	.LBE916:
2558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return (__j == end()
2559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      || _M_impl._M_key_compare(__k,
2560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 					_S_key(__j._M_node))) ? end() : __j;
 306              		.loc 3 2560 28 view .LVU72
 307 0010 8442     		cmp	r4, r0
 308 0012 03D0     		beq	.L14
 309              	.LVL21:
 310              	.LBB917:
 311              	.LBI917:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 312              		.loc 7 385 7 is_stmt 1 view .LVU73
 313              	.LBB918:
 314              		.loc 7 386 20 is_stmt 0 view .LVU74
 315 0014 3268     		ldr	r2, [r6]
 316 0016 0369     		ldr	r3, [r0, #16]
 317              	.LVL22:
 318              		.loc 7 386 20 view .LVU75
 319              	.LBE918:
 320              	.LBE917:
2559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 					_S_key(__j._M_node))) ? end() : __j;
 321              		.loc 3 2559 8 view .LVU76
 322 0018 9A42     		cmp	r2, r3
 323 001a 00DA     		bge	.L16
 324              	.L14:
 325              	.LVL23:
 326              	.LBB919:
 327              	.LBI919:
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 328              		.loc 3 1014 7 is_stmt 1 discriminator 1 view .LVU77
 329              	.LBB920:
 330              	.LBB921:
 331              	.LBI921:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 332              		.loc 3 273 7 discriminator 1 view .LVU78
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 333              		.loc 3 273 7 is_stmt 0 discriminator 1 view .LVU79
 334 001c 2046     		mov	r0, r4
 335              	.LVL24:
 336              	.L16:
 337              	.LVL25:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 338              		.loc 3 273 7 discriminator 1 view .LVU80
 339              	.LBE921:
ARM GAS  /tmp/cc27eAcR.s 			page 75


 340              	.LBE920:
 341              	.LBE919:
2561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     }
 342              		.loc 3 2561 5 view .LVU81
 343 001e 70BD     		pop	{r4, r5, r6, pc}
 344              		.loc 3 2561 5 view .LVU82
 345              		.cfi_endproc
 346              	.LFE3718:
 348              		.section	.text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_un
 349              		.align	1
 350              		.weak	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_unique_posE
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 354              		.fpu fpv4-sp-d16
 356              	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_unique_posERS1_:
 357              	.LVL26:
 358              	.LFB3810:
2085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
 359              		.loc 3 2085 5 is_stmt 1 view -0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 0
 362              		@ frame_needed = 0, uses_anonymous_args = 0
2085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
 363              		.loc 3 2085 5 is_stmt 0 view .LVU84
 364 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 365              	.LCFI3:
 366              		.cfi_def_cfa_offset 24
 367              		.cfi_offset 3, -24
 368              		.cfi_offset 4, -20
 369              		.cfi_offset 5, -16
 370              		.cfi_offset 6, -12
 371              		.cfi_offset 7, -8
 372              		.cfi_offset 14, -4
 373 0002 0746     		mov	r7, r0
 374 0004 1646     		mov	r6, r2
 375              	.LVL27:
 376              	.LBB922:
 377              	.LBI922:
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 378              		.loc 3 744 7 is_stmt 1 view .LVU85
 379              	.LBB923:
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 380              		.loc 3 745 73 is_stmt 0 view .LVU86
 381 0006 8C68     		ldr	r4, [r1, #8]
 382              	.LVL28:
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 383              		.loc 3 745 73 view .LVU87
 384              	.LBE923:
 385              	.LBE922:
 386              	.LBB924:
 387              	.LBI924:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 388              		.loc 3 755 7 is_stmt 1 view .LVU88
 389              	.LBB925:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 390              		.loc 3 756 31 is_stmt 0 view .LVU89
ARM GAS  /tmp/cc27eAcR.s 			page 76


 391 0008 0D1D     		adds	r5, r1, #4
 392              	.LVL29:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 393              		.loc 3 756 31 view .LVU90
 394              	.LBE925:
 395              	.LBE924:
2091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
 396              		.loc 3 2091 12 view .LVU91
 397 000a 0122     		movs	r2, #1
 398              	.LVL30:
2091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       while (__x != 0)
 399              		.loc 3 2091 12 view .LVU92
 400 000c 02E0     		b	.L19
 401              	.LVL31:
 402              	.L21:
 403              	.LBB926:
 404              	.LBI926:
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 405              		.loc 3 797 7 is_stmt 1 discriminator 2 view .LVU93
 406              	.LBB927:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 407              		.loc 3 798 53 is_stmt 0 discriminator 2 view .LVU94
 408 000e E368     		ldr	r3, [r4, #12]
 409              	.LVL32:
 410              	.L22:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 411              		.loc 3 798 53 discriminator 2 view .LVU95
 412              	.LBE927:
 413              	.LBE926:
2085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_unique_pos(const key_type& __k)
 414              		.loc 3 2085 5 view .LVU96
 415 0010 2546     		mov	r5, r4
 416 0012 1C46     		mov	r4, r3
 417              	.LVL33:
 418              	.L19:
2092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 419              		.loc 3 2092 18 is_stmt 1 view .LVU97
 420 0014 44B1     		cbz	r4, .L20
 421              	.LVL34:
 422              	.LBB928:
 423              	.LBI928:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 424              		.loc 7 385 7 view .LVU98
 425              	.LBB929:
 426              		.loc 7 386 20 is_stmt 0 view .LVU99
 427 0016 3368     		ldr	r3, [r6]
 428 0018 2569     		ldr	r5, [r4, #16]
 429              		.loc 7 386 22 view .LVU100
 430 001a 9D42     		cmp	r5, r3
 431 001c CCBF     		ite	gt
 432 001e 0122     		movgt	r2, #1
 433              	.LVL35:
 434              		.loc 7 386 22 view .LVU101
 435 0020 0022     		movle	r2, #0
 436              	.LVL36:
 437              		.loc 7 386 22 view .LVU102
 438              	.LBE929:
ARM GAS  /tmp/cc27eAcR.s 			page 77


 439              	.LBE928:
2096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 440              		.loc 3 2096 17 view .LVU103
 441 0022 F4DD     		ble	.L21
 442              	.LVL37:
 443              	.LBB930:
 444              	.LBI930:
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_left); }
 445              		.loc 3 789 7 is_stmt 1 discriminator 1 view .LVU104
 446              	.LBB931:
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 447              		.loc 3 790 52 is_stmt 0 discriminator 1 view .LVU105
 448 0024 A368     		ldr	r3, [r4, #8]
 449              	.LVL38:
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 450              		.loc 3 790 52 discriminator 1 view .LVU106
 451              	.LBE931:
 452              	.LBE930:
 453 0026 F3E7     		b	.L22
 454              	.LVL39:
 455              	.L20:
 456              	.LBB932:
 457              	.LBI932:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 458              		.loc 3 273 7 is_stmt 1 view .LVU107
 459              	.LBB933:
 460              	.LBB934:
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 461              		.loc 3 274 20 is_stmt 0 view .LVU108
 462 0028 2846     		mov	r0, r5
 463              	.LVL40:
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 464              		.loc 3 274 20 view .LVU109
 465              	.LBE934:
 466              	.LBE933:
 467              	.LBE932:
2099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 468              		.loc 3 2099 7 view .LVU110
 469 002a 22B1     		cbz	r2, .L23
 470              	.LVL41:
 471              	.LBB935:
 472              	.LBI935:
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(this->_M_impl._M_header._M_left); }
 473              		.loc 3 1006 7 is_stmt 1 view .LVU111
 474              	.LBB936:
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 475              		.loc 3 1007 56 is_stmt 0 view .LVU112
 476 002c CB68     		ldr	r3, [r1, #12]
 477              	.LVL42:
 478              	.LBB937:
 479              	.LBI937:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 480              		.loc 3 273 7 is_stmt 1 view .LVU113
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 481              		.loc 3 273 7 is_stmt 0 view .LVU114
 482              	.LBE937:
 483              	.LBE936:
ARM GAS  /tmp/cc27eAcR.s 			page 78


 484              	.LBE935:
2101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(__x, __y);
 485              		.loc 3 2101 4 view .LVU115
 486 002e AB42     		cmp	r3, r5
 487 0030 09D0     		beq	.L28
 488              	.LVL43:
 489              	.LBB938:
 490              	.LBI938:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 491              		.loc 3 300 7 is_stmt 1 view .LVU116
 492              	.LBB939:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 493              		.loc 3 302 30 is_stmt 0 view .LVU117
 494 0032 FFF7FEFF 		bl	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
 495              	.LVL44:
 496              	.L23:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 497              		.loc 3 302 30 view .LVU118
 498              	.LBE939:
 499              	.LBE938:
 500              	.LBB940:
 501              	.LBI940:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 502              		.loc 7 385 7 is_stmt 1 view .LVU119
 503              	.LBB941:
 504              		.loc 7 386 20 is_stmt 0 view .LVU120
 505 0036 0269     		ldr	r2, [r0, #16]
 506 0038 3368     		ldr	r3, [r6]
 507              	.LVL45:
 508              		.loc 7 386 20 view .LVU121
 509              	.LBE941:
 510              	.LBE940:
2106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return _Res(__x, __y);
 511              		.loc 3 2106 7 view .LVU122
 512 003a 9A42     		cmp	r2, r3
 513 003c 06DA     		bge	.L26
 514              	.LVL46:
 515              	.LBB942:
 516              	.LBI942:
 517              		.file 8 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
ARM GAS  /tmp/cc27eAcR.s 			page 79


  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  */
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  */
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** {
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /**
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @{
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    */
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
ARM GAS  /tmp/cc27eAcR.s 			page 80


  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// piecewise_construct
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     piecewise_construct_t();
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // Forward declarations.
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename...>
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     class tuple;
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<std::size_t...>
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     struct _Index_tuple;
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // constructors.
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // is_convertible if the types are the same to
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // avoid querying those properties for incomplete types.
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template <bool, typename _T1, typename _T2>
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     struct _PCC
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     {
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _CopyMovePair()
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<const _U1&, _T1>,
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				  is_convertible<_U2&&, _T2>>;
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				       __do_converts,
ARM GAS  /tmp/cc27eAcR.s 			page 81


 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, _U2&&>,
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      __converts
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      >::value;
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <bool __implicit, typename _U1, typename _U2>
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _MoveCopyPair()
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	using __do_converts = __and_<is_convertible<_U1&&, _T1>,
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				  is_convertible<const _U2&, _T2>>;
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	using __converts = typename conditional<__implicit,
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				       __do_converts,
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				       __not_<__do_converts>>::type;
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_constructible<_T2, const _U2&&>,
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      __converts
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      >::value;
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   };
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template <typename _T1, typename _T2>
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     struct _PCC<false, _T1, _T2>
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     {
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ConstructiblePair()
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return false;
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return false;
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return false;
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return false;
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   };
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // PR libstdc++/79141, a utility type for preventing
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // initialization of an argument of a disabled assignment
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // operator from a pair of empty braces.
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   struct __nonesuch_no_braces : std::__nonesuch {
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     explicit __nonesuch_no_braces(const __nonesuch&) = delete;
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   };
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif // C++11
ARM GAS  /tmp/cc27eAcR.s 			page 82


 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   {
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     __pair_base() = default;
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     ~__pair_base() = default;
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     __pair_base(const __pair_base&) = default;
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif // C++11
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   };
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****  /**
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    */
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     struct pair
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     : private __pair_base<_T1, _T2>
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     {
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       typedef _T1 first_type;    /// @c first_type is the first bound type
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       typedef _T2 second_type;   /// @c second_type is the second bound type
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       _T1 first;                 /// @c first is a copy of the first object
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       _T2 second;                /// @c second is a copy of the second object
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        *  respective default constructors.  */
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                    ::value, bool>::type = true>
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(), second() { }
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1 = _T1,
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                 typename _U2 = _T2,
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                 typename enable_if<__and_<
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                        is_default_constructible<_U1>,
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                        is_default_constructible<_U2>,
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                        __not_<
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                                    ::value, bool>::type = false>
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       explicit constexpr pair()
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(), second() { }
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 83


 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       /** Two objects may be passed to a @c pair constructor to be copied.  */
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       pair(const _T1& __a, const _T2& __b)
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #else
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	                 && _PCCP::template
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		enable_if<_PCCP::template
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	                  && !_PCCP::template
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       : first(__a), second(__b) { }
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       /** There is also a templated copy ctor for the @c pair class itself.  */
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus < 201103L
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #else
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template <typename _U1, typename _U2>
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			    _T1, _T2>;
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			  bool>::type=true>
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****         constexpr pair(const pair<_U1, _U2>& __p)
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****         : first(__p.first), second(__p.second) { }
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(__p.first), second(__p.second) { }
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 84


 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       constexpr pair(const pair&) = default;
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       constexpr pair(pair&&) = default;
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       // DR 811.
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveCopyPair<true, _U1, _T2>(),
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        constexpr pair(_U1&& __x, const _T2& __y)
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveCopyPair<false, _U1, _T2>(),
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        explicit constexpr pair(_U1&& __x, const _T2& __y)
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U2, typename
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _CopyMovePair<true, _T1, _U2>(),
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        constexpr pair(const _T1& __x, _U2&& __y)
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U2, typename
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _CopyMovePair<false, _T1, _U2>(),
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        explicit pair(const _T1& __x, _U2&& __y)
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			  && _PCCP::template
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 518              		.loc 8 341 12 is_stmt 1 view .LVU123
 519              	.LBB943:
 520              	.LBB944:
 521              	.LBB945:
 522              	.LBI945:
 523              		.file 9 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // Move, forward and identity for C++11 + swap -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
ARM GAS  /tmp/cc27eAcR.s 			page 85


  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** /** @file bits/move.h
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****  */
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #ifndef _MOVE_H
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #define _MOVE_H 1
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #include <bits/c++config.h>
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #include <bits/concept_check.h>
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** {
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   /**
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @ingroup utilities
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    */
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   template<typename _Tp>
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     inline _GLIBCXX_CONSTEXPR _Tp*
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     { return __builtin_addressof(__r); }
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #if __cplusplus >= 201103L
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** _GLIBCXX_END_NAMESPACE_VERSION
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** } // namespace
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** #include <type_traits> // Brings in std::declval too.
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** {
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   /**
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @addtogroup utilities
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @{
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    */
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h **** 
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   /**
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @brief  Forward an lvalue.
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  @return The parameter cast to the specified type.
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *
ARM GAS  /tmp/cc27eAcR.s 			page 86


  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    *  This function is used to implement "perfect forwarding".
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****    */
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****   template<typename _Tp>
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     constexpr _Tp&&
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/move.h ****     forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 524              		.loc 9 74 5 view .LVU124
 525              		.loc 9 74 5 is_stmt 0 view .LVU125
 526              	.LBE945:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 527              		.loc 8 342 64 view .LVU126
 528 003e 3C60     		str	r4, [r7]
 529              	.LVL47:
 530              	.LBB946:
 531              	.LBI946:
 532              		.loc 9 74 5 is_stmt 1 view .LVU127
 533              		.loc 9 74 5 is_stmt 0 view .LVU128
 534              	.LBE946:
 535              		.loc 8 342 64 view .LVU129
 536 0040 7D60     		str	r5, [r7, #4]
 537              	.LVL48:
 538              	.L18:
 539              		.loc 8 342 64 view .LVU130
 540              	.LBE944:
 541              	.LBE943:
 542              	.LBE942:
2109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 543              		.loc 3 2109 5 view .LVU131
 544 0042 3846     		mov	r0, r7
 545              	.LVL49:
2109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 546              		.loc 3 2109 5 view .LVU132
 547 0044 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 548              	.LVL50:
 549              	.L28:
 550              	.LBB947:
 551              	.LBI947:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 552              		.loc 8 341 12 is_stmt 1 view .LVU133
 553              	.LBB948:
 554              	.LBB949:
 555              	.LBB950:
 556              	.LBI950:
 557              		.loc 9 74 5 view .LVU134
 558              		.loc 9 74 5 is_stmt 0 view .LVU135
 559              	.LBE950:
 560              		.loc 8 342 64 view .LVU136
 561 0046 3C60     		str	r4, [r7]
 562              	.LVL51:
 563              	.LBB951:
 564              	.LBI951:
 565              		.loc 9 74 5 is_stmt 1 view .LVU137
 566              		.loc 9 74 5 is_stmt 0 view .LVU138
 567              	.LBE951:
 568              		.loc 8 342 64 view .LVU139
 569 0048 7D60     		str	r5, [r7, #4]
 570              	.LBE949:
 571              		.loc 8 342 68 view .LVU140
ARM GAS  /tmp/cc27eAcR.s 			page 87


 572 004a FAE7     		b	.L18
 573              	.LVL52:
 574              	.L26:
 575              		.loc 8 342 68 view .LVU141
 576              	.LBE948:
 577              	.LBE947:
 578              	.LBB952:
 579              	.LBI952:
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 580              		.loc 8 311 18 is_stmt 1 view .LVU142
 581              	.LBB953:
 582              	.LBB954:
 583              	.LBB955:
 584              	.LBI955:
 585              		.loc 9 74 5 view .LVU143
 586              		.loc 9 74 5 is_stmt 0 view .LVU144
 587              	.LBE955:
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 588              		.loc 8 312 51 view .LVU145
 589 004c 3860     		str	r0, [r7]
 590 004e 0023     		movs	r3, #0
 591 0050 7B60     		str	r3, [r7, #4]
 592              	.LVL53:
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 593              		.loc 8 312 51 view .LVU146
 594 0052 F6E7     		b	.L18
 595              	.LBE954:
 596              	.LBE953:
 597              	.LBE952:
 598              		.cfi_endproc
 599              	.LFE3810:
 601              		.section	.text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_insert_nodeEP
 602              		.align	1
 603              		.weak	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_insert_nodeEPSt18_Rb_t
 604              		.syntax unified
 605              		.thumb
 606              		.thumb_func
 607              		.fpu fpv4-sp-d16
 609              	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_nod
 610              	.LVL54:
 611              	.LFB3826:
2354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
 612              		.loc 3 2354 5 is_stmt 1 view -0
 613              		.cfi_startproc
 614              		@ args = 0, pretend = 0, frame = 0
 615              		@ frame_needed = 0, uses_anonymous_args = 0
2354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)
 616              		.loc 3 2354 5 is_stmt 0 view .LVU148
 617 0000 38B5     		push	{r3, r4, r5, lr}
 618              	.LCFI4:
 619              		.cfi_def_cfa_offset 16
 620              		.cfi_offset 3, -16
 621              		.cfi_offset 4, -12
 622              		.cfi_offset 5, -8
 623              		.cfi_offset 14, -4
 624 0002 0446     		mov	r4, r0
 625 0004 1D46     		mov	r5, r3
ARM GAS  /tmp/cc27eAcR.s 			page 88


2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 626              		.loc 3 2358 8 view .LVU149
 627 0006 49B1     		cbz	r1, .L35
 628 0008 0120     		movs	r0, #1
 629              	.LVL55:
 630              	.L30:
2361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 				    this->_M_impl._M_header);
 631              		.loc 3 2361 36 view .LVU150
 632 000a 231D     		adds	r3, r4, #4
 633 000c 2946     		mov	r1, r5
 634 000e FFF7FEFF 		bl	_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
 635              	.LVL56:
2363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__z);
 636              		.loc 3 2363 17 view .LVU151
 637 0012 6369     		ldr	r3, [r4, #20]
2363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       return iterator(__z);
 638              		.loc 3 2363 7 view .LVU152
 639 0014 0133     		adds	r3, r3, #1
 640 0016 6361     		str	r3, [r4, #20]
 641              	.LVL57:
 642              	.LBB956:
 643              	.LBI956:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 644              		.loc 3 273 7 is_stmt 1 view .LVU153
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 645              		.loc 3 273 7 is_stmt 0 view .LVU154
 646              	.LBE956:
2365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 647              		.loc 3 2365 5 view .LVU155
 648 0018 2846     		mov	r0, r5
 649 001a 38BD     		pop	{r3, r4, r5, pc}
 650              	.LVL58:
 651              	.L35:
 652              	.LBB957:
 653              	.LBI957:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 654              		.loc 3 755 7 is_stmt 1 view .LVU156
 655              	.LBB958:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 656              		.loc 3 756 31 is_stmt 0 view .LVU157
 657 001c 031D     		adds	r3, r0, #4
 658              	.LVL59:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 659              		.loc 3 756 31 view .LVU158
 660              	.LBE958:
 661              	.LBE957:
2357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 			    || _M_impl._M_key_compare(_S_key(__z),
 662              		.loc 3 2357 38 view .LVU159
 663 001e 9A42     		cmp	r2, r3
 664 0020 05D0     		beq	.L32
 665              	.LVL60:
 666              	.LBB959:
 667              	.LBI959:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 668              		.loc 7 385 7 is_stmt 1 discriminator 2 view .LVU160
 669              	.LBB960:
 670              		.loc 7 386 20 is_stmt 0 discriminator 2 view .LVU161
ARM GAS  /tmp/cc27eAcR.s 			page 89


 671 0022 2B69     		ldr	r3, [r5, #16]
 672 0024 1169     		ldr	r1, [r2, #16]
 673              	.LVL61:
 674              		.loc 7 386 20 discriminator 2 view .LVU162
 675              	.LBE960:
 676              	.LBE959:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 677              		.loc 3 2358 8 discriminator 2 view .LVU163
 678 0026 9942     		cmp	r1, r3
 679 0028 03DC     		bgt	.L33
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 680              		.loc 3 2358 8 view .LVU164
 681 002a 0020     		movs	r0, #0
 682              	.LVL62:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 683              		.loc 3 2358 8 view .LVU165
 684 002c EDE7     		b	.L30
 685              	.LVL63:
 686              	.L32:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 687              		.loc 3 2358 8 view .LVU166
 688 002e 0120     		movs	r0, #1
 689              	.LVL64:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 690              		.loc 3 2358 8 view .LVU167
 691 0030 EBE7     		b	.L30
 692              	.LVL65:
 693              	.L33:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 694              		.loc 3 2358 8 view .LVU168
 695 0032 0120     		movs	r0, #1
 696              	.LVL66:
2358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 						      _S_key(__p)));
 697              		.loc 3 2358 8 view .LVU169
 698 0034 E9E7     		b	.L30
 699              		.cfi_endproc
 700              	.LFE3826:
 702              		.section	.text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqu
 703              		.align	1
 704              		.weak	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_Iib
 705              		.syntax unified
 706              		.thumb
 707              		.thumb_func
 708              		.fpu fpv4-sp-d16
 710              	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IibEEEES0_
 711              	.LVL67:
 712              	.LFB3720:
2405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_unique(_Args&&... __args)
 713              		.loc 3 2405 7 is_stmt 1 view -0
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 8
 716              		@ frame_needed = 0, uses_anonymous_args = 0
2405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_unique(_Args&&... __args)
 717              		.loc 3 2405 7 is_stmt 0 view .LVU171
 718 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 719              	.LCFI5:
 720              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cc27eAcR.s 			page 90


 721              		.cfi_offset 4, -20
 722              		.cfi_offset 5, -16
 723              		.cfi_offset 6, -12
 724              		.cfi_offset 7, -8
 725              		.cfi_offset 14, -4
 726 0002 83B0     		sub	sp, sp, #12
 727              	.LCFI6:
 728              		.cfi_def_cfa_offset 32
 729 0004 0546     		mov	r5, r0
 730 0006 0F46     		mov	r7, r1
 731 0008 1646     		mov	r6, r2
 732              	.LVL68:
 733              	.LBB961:
 734              	.LBI961:
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 735              		.loc 3 628 2 is_stmt 1 view .LVU172
 736              	.LBB962:
 737              	.LBB963:
 738              	.LBI963:
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 739              		.loc 3 579 7 view .LVU173
 740              	.LBB964:
 741              	.LBI964:
 742              		.file 10 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // Copyright (C) 2011-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** /** @file bits/alloc_traits.h
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****  */
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #if __cplusplus >= 201103L
ARM GAS  /tmp/cc27eAcR.s 			page 91


  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #include <bits/memoryfwd.h>
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #include <bits/ptr_traits.h>
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #include <ext/numeric_traits.h>
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** {
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   struct __allocator_traits_base
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   {
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up> { };
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp, typename _Up>
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       struct __rebind<_Tp, _Up,
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { using type = typename _Tp::template rebind<_Up>::other; };
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   protected:
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     template<typename _Tp>
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using __equal = typename _Tp::is_always_equal;
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   };
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   template<typename _Alloc, typename _Up>
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     using __alloc_rebind
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   /**
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****    * @ingroup allocators
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   */
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   template<typename _Alloc>
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     {
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator type
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       typedef _Alloc allocator_type;
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocated type
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
ARM GAS  /tmp/cc27eAcR.s 			page 92


  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's pointer type.
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     private:
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Ptr
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	};
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  using type = _Func<_Alloc>;
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	};
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Diff
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _PtrT>
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _A2, typename _DiffT>
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     public:
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const pointer type.
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's void pointer type.
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
ARM GAS  /tmp/cc27eAcR.s 			page 93


 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's difference type
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   The allocator's size type
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * otherwise @c false_type
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using is_always_equal
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	= __detected_or_t<typename is_empty<_Alloc>::type, __equal, _Alloc>;
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 94


 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     private:
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static pointer
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a.allocate(__n); }
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	struct __construct_helper
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  template<typename _Alloc2,
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	    static true_type __test(int);
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  template<typename>
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	    static false_type __test(...);
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	};
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using __has_construct
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static _Require<__has_construct<_Tp, _Args...>>
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(::new((void*)__p)
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 			  _Tp(std::forward<_Args>(__args)...)))
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ ::new((void*)__p) _Tp(std::forward<_Args>(__args)...); }
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ __a.destroy(__p); }
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 95


 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static void
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(__p->~_Tp()))
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ __p->~_Tp(); }
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(__a.max_size())
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a.max_size(); }
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static size_type
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	    / sizeof(value_type);
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	}
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Alloc2>
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static _Alloc2
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ return __a; }
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     public:
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
ARM GAS  /tmp/cc27eAcR.s 			page 96


 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static void
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Tp
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  arguments @a __args...
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp, typename... _Args>
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static auto construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Tp>
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static void destroy(_Alloc& __a, _Tp* __p)
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  The maximum supported allocation size
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static size_type max_size(const _Alloc& __a) noexcept
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return _S_max_size(__a, 0); }
ARM GAS  /tmp/cc27eAcR.s 			page 97


 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __rhs  An allocator.
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static _Alloc
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return _S_select(__rhs, 0); }
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     };
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   /// Partial specialization for std::allocator.
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****   template<typename _Tp>
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****     {
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator type
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocated type
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using value_type = _Tp;
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's pointer type.
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using pointer = _Tp*;
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's const pointer type.
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using const_pointer = const _Tp*;
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's void pointer type.
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using void_pointer = void*;
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's const void pointer type.
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using const_void_pointer = const void*;
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's difference type
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// The allocator's size type
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using size_type = std::size_t;
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on move assignment
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// How the allocator is propagated on swap
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using propagate_on_container_swap = false_type;
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       using is_always_equal = true_type;
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Up>
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Up>
ARM GAS  /tmp/cc27eAcR.s 			page 98


 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls @c a.allocate(n)
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 743              		.loc 10 443 7 view .LVU174
 744              	.LBB965:
 745              	.LBI965:
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       template<typename _Tp1>
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       pointer
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       const_pointer
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       { return std::__addressof(__x); }
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // about what the return value is when __n == 0.
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       _GLIBCXX_NODISCARD pointer
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 746              		.loc 5 102 7 view .LVU175
 747              	.LBB966:
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	if (__n > this->max_size())
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  {
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  }
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 748              		.loc 5 114 41 is_stmt 0 view .LVU176
 749 000a 1820     		movs	r0, #24
 750              	.LVL69:
 751              		.loc 5 114 41 view .LVU177
 752 000c FFF7FEFF 		bl	_Znwj
 753              	.LVL70:
 754              		.loc 5 114 41 view .LVU178
ARM GAS  /tmp/cc27eAcR.s 			page 99


 755 0010 0446     		mov	r4, r0
 756              	.LVL71:
 757              		.loc 5 114 41 view .LVU179
 758              	.LBE966:
 759              	.LBE965:
 760              	.LBE964:
 761              	.LBE963:
 762              	.LBB967:
 763              	.LBI967:
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 764              		.loc 3 609 2 is_stmt 1 view .LVU180
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 765              		.loc 3 609 2 is_stmt 0 view .LVU181
 766              	.LBE967:
 767              	.LBE962:
 768              	.LBE961:
 769              		.file 11 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // The -*- C++ -*- dynamic memory management header.
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // Copyright (C) 1994-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // This file is part of GCC.
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** //
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // GCC is free software; you can redistribute it and/or modify
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // it under the terms of the GNU General Public License as published by
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // any later version.
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // 
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // GCC is distributed in the hope that it will be useful,
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // GNU General Public License for more details.
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // 
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // 3.1, as published by the Free Software Foundation.
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // You should have received a copy of the GNU General Public License and
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // <http://www.gnu.org/licenses/>.
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** /** @file new
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  This is a Standard C++ Library header.
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  handling memory allocation errors; see
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  */
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #ifndef _NEW
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #define _NEW
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #pragma GCC system_header
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #include <bits/c++config.h>
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #include <exception>
ARM GAS  /tmp/cc27eAcR.s 			page 100


  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #pragma GCC visibility push(default)
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** extern "C++" {
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** namespace std 
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** {
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /**
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  @ingroup exceptions
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  errors from the throwing forms of @c new.  */
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   class bad_alloc : public exception 
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   {
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   public:
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     bad_alloc() throw() { }
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cplusplus >= 201103L
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     bad_alloc(const bad_alloc&) = default;
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     bad_alloc& operator=(const bad_alloc&) = default;
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // This declaration is not useless:
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     virtual ~bad_alloc() throw();
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // See comment in eh_exception.cc.
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     virtual const char* what() const throw();
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   };
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cplusplus >= 201103L
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   class bad_array_new_length : public bad_alloc
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   {
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   public:
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     bad_array_new_length() throw() { }
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // This declaration is not useless:
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     virtual ~bad_array_new_length() throw();
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     // See comment in eh_exception.cc.
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     virtual const char* what() const throw();
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   };
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cpp_aligned_new
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   enum class align_val_t: size_t {};
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   struct nothrow_t
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   {
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cplusplus >= 201103L
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****     explicit nothrow_t() = default;
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   };
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
ARM GAS  /tmp/cc27eAcR.s 			page 101


  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   extern const nothrow_t nothrow;
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /** If you write your own error handler to be called by @c new, it must
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****    *  be of this type.  */
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   typedef void (*new_handler)();
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /// Takes a replacement handler as the argument, returns the
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /// previous handler.
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   new_handler set_new_handler(new_handler) throw();
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cplusplus >= 201103L
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   /// Return the current new handler.
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   new_handler get_new_handler() noexcept;
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** } // namespace std
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** //@{
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** /** These are replaceable signatures:
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  - normal array new and delete (same)
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *    @c NULL on error)
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  - @c nothrow array new and delete (same)
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  Placement new and delete signatures (take a memory address argument,
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****  *  does nothing) may not be replaced by a user's program.
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** */
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cpp_sized_deallocation
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, std::size_t) _GLIBCXX_USE_NOEXCEPT
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__, __malloc__));
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cpp_aligned_new
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t)
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new(std::size_t, std::align_val_t, const std::nothrow_t&)
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, std::align_val_t)
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, std::align_val_t, const std::nothrow_t&)
ARM GAS  /tmp/cc27eAcR.s 			page 102


 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t)
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   __attribute__((__externally_visible__));
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD void* operator new[](std::size_t, std::align_val_t, const std::nothrow_t&)
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__, __malloc__));
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, std::align_val_t)
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, std::align_val_t, const std::nothrow_t&)
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #if __cpp_sized_deallocation
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete(void*, std::size_t, std::align_val_t)
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** void operator delete[](void*, std::size_t, std::align_val_t)
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new ****   _GLIBCXX_USE_NOEXCEPT __attribute__((__externally_visible__));
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif // __cpp_sized_deallocation
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** #endif // __cpp_aligned_new
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** 
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** // Default placement versions of operator new.
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** _GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/new **** { return __p; }
 770              		.loc 11 174 3 is_stmt 1 view .LVU182
 771              	.LBB980:
 772              	.LBB978:
 773              	.LBB976:
 774              	.LBB968:
 775              	.LBI968:
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Allocate memory.
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __hint Aid to locality.
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *          of type @c value_type
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       _GLIBCXX_NODISCARD static pointer
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n, __hint); }
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Deallocate memory.
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       static void
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       /**
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @brief  Construct an object of type @a _Up
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __a  An allocator.
ARM GAS  /tmp/cc27eAcR.s 			page 103


 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  @param  __args Constructor arguments.
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       */
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       template<typename _Up, typename... _Args>
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	static void
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h **** 	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 776              		.loc 10 482 2 view .LVU183
 777              	.LBB969:
 778              	.LBI969:
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       void
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cpp_aligned_new
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  {
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	    return;
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	  }
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	::operator delete(__p);
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       size_type
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __PTRDIFF_MAX__ < __SIZE_MAX__
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #else
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	return size_t(-1) / sizeof(_Tp);
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #endif
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** #if __cplusplus >= 201103L
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	void
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 779              		.loc 5 144 2 view .LVU184
 780              		.loc 5 144 2 is_stmt 0 view .LVU185
 781              	.LBE969:
 782              	.LBE968:
 783              	.LBE976:
 784              	.LBE978:
 785              	.LBE980:
 786              		.loc 11 174 3 is_stmt 1 view .LVU186
 787              	.LBB981:
 788              	.LBB979:
 789              	.LBB977:
 790              	.LBB975:
 791              	.LBB974:
 792              	.LBB970:
 793              	.LBI970:
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 104


 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCP::template
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			  && !_PCCP::template
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	explicit constexpr pair(_U1&& __x, _U2&& __y)
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			  && _PCCFP<_U1, _U2>::template
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=true>
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	constexpr pair(pair<_U1, _U2>&& __p)
 794              		.loc 8 360 12 view .LVU187
 795              	.LBB971:
 796              	.LBB972:
 797              	.LBI972:
 798              		.loc 9 74 5 view .LVU188
 799              		.loc 9 74 5 is_stmt 0 view .LVU189
 800              	.LBE972:
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 801              		.loc 8 362 40 view .LVU190
 802 0012 3368     		ldr	r3, [r6]
 803 0014 0361     		str	r3, [r0, #16]
 804              	.LVL72:
 805              	.LBB973:
 806              	.LBI973:
 807              		.loc 9 74 5 is_stmt 1 view .LVU191
 808              		.loc 9 74 5 is_stmt 0 view .LVU192
 809              	.LBE973:
 810              		.loc 8 362 40 view .LVU193
 811 0016 3379     		ldrb	r3, [r6, #4]	@ zero_extendqisi2
 812 0018 0375     		strb	r3, [r0, #20]
 813              	.LVL73:
 814              		.loc 8 362 40 view .LVU194
 815              	.LBE971:
 816              	.LBE970:
 817              	.LBE974:
 818              	.LBE975:
 819              	.LBE977:
 820              	.LBE979:
 821              	.LBE981:
 822              	.LBB982:
 823              	.LBB983:
 824              	.LBI983:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 825              		.loc 3 767 7 is_stmt 1 view .LVU195
 826              	.LBB984:
 827              	.LBI984:
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
ARM GAS  /tmp/cc27eAcR.s 			page 105


 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater_equal : public binary_function<_Tp, _Tp, bool>
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x >= __y; }
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less_equal : public binary_function<_Tp, _Tp, bool>
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x <= __y; }
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization of std::greater for pointers.
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR bool
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       {
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_is_constant_evaluated())
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #else
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_constant_p(__x > __y))
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return __x > __y;
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	return (__UINTPTR_TYPE__)__x > (__UINTPTR_TYPE__)__y;
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       }
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization of std::less for pointers.
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR bool
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       {
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_is_constant_evaluated())
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #else
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_constant_p(__x < __y))
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return __x < __y;
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       }
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
ARM GAS  /tmp/cc27eAcR.s 			page 106


 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization of std::greater_equal for pointers.
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR bool
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       {
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_is_constant_evaluated())
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #else
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_constant_p(__x >= __y))
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return __x >= __y;
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	return (__UINTPTR_TYPE__)__x >= (__UINTPTR_TYPE__)__y;
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       }
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization of std::less_equal for pointers.
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR bool
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       {
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #ifdef _GLIBCXX_HAVE_BUILTIN_IS_CONSTANT_EVALUATED
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_is_constant_evaluated())
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #else
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	if (__builtin_constant_p(__x <= __y))
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return __x <= __y;
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	return (__UINTPTR_TYPE__)__x <= (__UINTPTR_TYPE__)__y;
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       }
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus >= 201402L
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct equal_to<void>
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) == std::forward<_Up>(__u)))
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) == std::forward<_Up>(__u))
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) == std::forward<_Up>(__u); }
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct not_equal_to<void>
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
ARM GAS  /tmp/cc27eAcR.s 			page 107


 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) != std::forward<_Up>(__u)))
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) != std::forward<_Up>(__u))
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) != std::forward<_Up>(__u); }
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater<void>
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) > std::forward<_Up>(__u)))
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) > std::forward<_Up>(__u))
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			__ptr_cmp<_Tp, _Up>{});
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr bool
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp* __t, _Up* __u) const noexcept
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return greater<common_type_t<_Tp*, _Up*>>{}(__t, __u); }
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     private:
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr decltype(auto)
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, false_type)
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) > std::forward<_Up>(__u); }
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr bool
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return greater<const volatile void*>{}(
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Tp>(__t)),
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no viable operator> member function.
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2 : true_type { };
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call T.operator>(U)
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2<_Tp, _Up, __void_t<
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(std::declval<_Tp>().operator>(std::declval<_Up>()))>>
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no overloaded operator> for these operands.
ARM GAS  /tmp/cc27eAcR.s 			page 108


 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call operator>(T,U)
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded<_Tp, _Up, __void_t<
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(operator>(std::declval<_Tp>(), std::declval<_Up>()))>>
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Tp, const volatile void*>,
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Up, const volatile void*>>;
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less<void>
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) < std::forward<_Up>(__u)))
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) < std::forward<_Up>(__u))
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			__ptr_cmp<_Tp, _Up>{});
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr bool
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp* __t, _Up* __u) const noexcept
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return less<common_type_t<_Tp*, _Up*>>{}(__t, __u); }
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     private:
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr decltype(auto)
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, false_type)
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) < std::forward<_Up>(__u); }
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr bool
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return less<const volatile void*>{}(
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Tp>(__t)),
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no viable operator< member function.
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2 : true_type { };
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call T.operator<(U)
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
ARM GAS  /tmp/cc27eAcR.s 			page 109


 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2<_Tp, _Up, __void_t<
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(std::declval<_Tp>().operator<(std::declval<_Up>()))>>
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no overloaded operator< for these operands.
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call operator<(T,U)
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded<_Tp, _Up, __void_t<
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(operator<(std::declval<_Tp>(), std::declval<_Up>()))>>
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Tp, const volatile void*>,
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Up, const volatile void*>>;
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct greater_equal<void>
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) >= std::forward<_Up>(__u)))
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) >= std::forward<_Up>(__u))
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			__ptr_cmp<_Tp, _Up>{});
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr bool
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp* __t, _Up* __u) const noexcept
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return greater_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     private:
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr decltype(auto)
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, false_type)
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) >= std::forward<_Up>(__u); }
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr bool
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return greater_equal<const volatile void*>{}(
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Tp>(__t)),
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no viable operator>= member function.
ARM GAS  /tmp/cc27eAcR.s 			page 110


 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2 : true_type { };
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call T.operator>=(U)
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2<_Tp, _Up, __void_t<
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(std::declval<_Tp>().operator>=(std::declval<_Up>()))>>
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no overloaded operator>= for these operands.
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call operator>=(T,U)
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded<_Tp, _Up, __void_t<
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(operator>=(std::declval<_Tp>(), std::declval<_Up>()))>>
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Tp, const volatile void*>,
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Up, const volatile void*>>;
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link comparison_functors comparison functors@endlink.
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct less_equal<void>
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr auto
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) <= std::forward<_Up>(__u)))
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) <= std::forward<_Up>(__u))
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return _S_cmp(std::forward<_Tp>(__t), std::forward<_Up>(__u),
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			__ptr_cmp<_Tp, _Up>{});
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	constexpr bool
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp* __t, _Up* __u) const noexcept
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return less_equal<common_type_t<_Tp*, _Up*>>{}(__t, __u); }
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     private:
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr decltype(auto)
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, false_type)
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) <= std::forward<_Up>(__u); }
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	static constexpr bool
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  return less_equal<const volatile void*>{}(
ARM GAS  /tmp/cc27eAcR.s 			page 111


 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Tp>(__t)),
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	}
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no viable operator<= member function.
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2 : true_type { };
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call T.operator<=(U)
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded2<_Tp, _Up, __void_t<
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(std::declval<_Tp>().operator<=(std::declval<_Up>()))>>
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // True if there is no overloaded operator<= for these operands.
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up, typename = void>
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       // False if we can call operator<=(T,U)
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	struct __not_overloaded<_Tp, _Up, __void_t<
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	  decltype(operator<=(std::declval<_Tp>(), std::declval<_Up>()))>>
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	: false_type { };
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template<typename _Tp, typename _Up>
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Tp, const volatile void*>,
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	      is_convertible<_Up, const volatile void*>>;
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif // C++14
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.4 logical operations
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup logical_functors Boolean Operations Classes
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Here are wrapper functors for Boolean operations: @c &&, @c ||,
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  and @c !.
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_and;
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_or;
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_not;
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_and : public binary_function<_Tp, _Tp, bool>
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
ARM GAS  /tmp/cc27eAcR.s 			page 112


 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x && __y; }
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_or : public binary_function<_Tp, _Tp, bool>
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x || __y; }
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_not : public unary_function<_Tp, bool>
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x) const
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return !__x; }
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_and<void>
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) && std::forward<_Up>(__u)))
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) && std::forward<_Up>(__u))
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) && std::forward<_Up>(__u); }
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_or<void>
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) || std::forward<_Up>(__u)))
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) || std::forward<_Up>(__u))
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) || std::forward<_Up>(__u); }
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link logical_functors Boolean operations functors@endlink.
ARM GAS  /tmp/cc27eAcR.s 			page 113


 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<>
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct logical_not<void>
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp>
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(!std::forward<_Tp>(__t)))
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(!std::forward<_Tp>(__t))
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return !std::forward<_Tp>(__t); }
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_and;
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_or;
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_xor;
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp = void>
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_not;
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // DR 660. Missing Bitwise Operations.
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_and : public binary_function<_Tp, _Tp, _Tp>
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x & __y; }
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_or : public binary_function<_Tp, _Tp, _Tp>
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x | __y; }
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x, const _Tp& __y) const
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x ^ __y; }
ARM GAS  /tmp/cc27eAcR.s 			page 114


 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_not : public unary_function<_Tp, _Tp>
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     _GLIBCXX14_CONSTEXPR
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp
 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x) const
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return ~__x; }
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #if __cplusplus > 201103L
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template <>
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_and<void>
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) & std::forward<_Up>(__u)))
 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) & std::forward<_Up>(__u))
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) & std::forward<_Up>(__u); }
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template <>
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_or<void>
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) | std::forward<_Up>(__u)))
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) | std::forward<_Up>(__u))
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) | std::forward<_Up>(__u); }
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template <>
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_xor<void>
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp, typename _Up>
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t, _Up&& __u) const
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u)))
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(std::forward<_Tp>(__t) ^ std::forward<_Up>(__u))
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return std::forward<_Tp>(__t) ^ std::forward<_Up>(__u); }
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template <>
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct bit_not<void>
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
ARM GAS  /tmp/cc27eAcR.s 			page 115


 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       template <typename _Tp>
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	_GLIBCXX14_CONSTEXPR
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	auto
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	operator()(_Tp&& __t) const
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	noexcept(noexcept(~std::forward<_Tp>(__t)))
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	-> decltype(~std::forward<_Tp>(__t))
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 	{ return ~std::forward<_Tp>(__t); }
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typedef __is_transparent is_transparent;
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** #endif
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.5 negators
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup negators Negators
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The functions @c not1 and @c not2 each take a predicate functor
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  and return an instance of @c unary_negate or
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @c binary_negate, respectively.  These classes are functors whose
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @c operator() performs the stored predicate function and then returns
 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  the negation of the result.
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  For example, given a vector of integers and a trivial predicate,
 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \code
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  struct IntGreaterThanThree
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *    : public std::unary_function<int, bool>
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  {
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *      bool operator() (int x) { return x > 3; }
 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  };
 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  std::find_if (v.begin(), v.end(), not1(IntGreaterThanThree()));
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  \endcode
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The call to @c find_if will locate the first index (i) of @c v for which
 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  <code>!(v[i] > 3)</code> is true.
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The not1/unary_negate combination works on predicates taking a single
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  argument.  The not2/binary_negate combination works on predicates which
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  take two arguments.
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Predicate>
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     class unary_negate
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public unary_function<typename _Predicate::argument_type, bool>
1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     protected:
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Predicate _M_pred;
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     public:
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       explicit
1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       unary_negate(const _Predicate& __x) : _M_pred(__x) { }
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const typename _Predicate::argument_type& __x) const
ARM GAS  /tmp/cc27eAcR.s 			page 116


1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return !_M_pred(__x); }
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Predicate>
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     _GLIBCXX14_CONSTEXPR
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     inline unary_negate<_Predicate>
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     not1(const _Predicate& __pred)
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     { return unary_negate<_Predicate>(__pred); }
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Predicate>
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     class binary_negate
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public binary_function<typename _Predicate::first_argument_type,
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 			     typename _Predicate::second_argument_type, bool>
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     protected:
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Predicate _M_pred;
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     public:
1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       explicit
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       binary_negate(const _Predicate& __x) : _M_pred(__x) { }
1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _GLIBCXX14_CONSTEXPR
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       bool
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const typename _Predicate::first_argument_type& __x,
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 		 const typename _Predicate::second_argument_type& __y) const
1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return !_M_pred(__x, __y); }
1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link negators negation functors@endlink.
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Predicate>
1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     _GLIBCXX14_CONSTEXPR
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     inline binary_negate<_Predicate>
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     not2(const _Predicate& __pred)
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     { return binary_negate<_Predicate>(__pred); }
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // 20.3.7 adaptors pointers functions
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @defgroup pointer_adaptors Adaptors for pointers to functions
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    * @ingroup functors
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The advantage of function objects over pointers to functions is that
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  the objects in the standard library declare nested typedefs describing
1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  their argument and result types with uniform names (e.g., @c result_type
1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  from the base classes @c unary_function and @c binary_function).
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Sometimes those typedefs are required, not just optional.
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  Adaptors are provided to turn pointers to unary (single-argument) and
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  binary (double-argument) functions into function objects.  The
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  long-winded functor @c pointer_to_unary_function is constructed with a
1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  function pointer @c f, and its @c operator() called with argument @c x
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  returns @c f(x).  The functor @c pointer_to_binary_function does the same
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  thing, but with a double-argument @c f and @c operator().
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  The function @c ptr_fun takes a pointer-to-function @c f and constructs
ARM GAS  /tmp/cc27eAcR.s 			page 117


1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  an instance of the appropriate functor.
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    *  @{
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****    */
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg, typename _Result>
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     class pointer_to_unary_function : public unary_function<_Arg, _Result>
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     protected:
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Result (*_M_ptr)(_Arg);
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     public:
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       pointer_to_unary_function() { }
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       explicit
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       pointer_to_unary_function(_Result (*__x)(_Arg))
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       : _M_ptr(__x) { }
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Result
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Arg __x) const
1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return _M_ptr(__x); }
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg, typename _Result>
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     inline pointer_to_unary_function<_Arg, _Result>
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     ptr_fun(_Result (*__x)(_Arg))
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     { return pointer_to_unary_function<_Arg, _Result>(__x); }
1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     class pointer_to_binary_function
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public binary_function<_Arg1, _Arg2, _Result>
1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     protected:
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Result (*_M_ptr)(_Arg1, _Arg2);
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     public:
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       pointer_to_binary_function() { }
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       explicit
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       : _M_ptr(__x) { }
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Result
1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Arg1 __x, _Arg2 __y) const
1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return _M_ptr(__x, __y); }
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /// One of the @link pointer_adaptors adaptors for function pointers@endlink.
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Arg1, typename _Arg2, typename _Result>
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     ptr_fun(_Result (*__x)(_Arg1, _Arg2))
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   /** @}  */
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp>
ARM GAS  /tmp/cc27eAcR.s 			page 118


1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct _Identity
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public unary_function<_Tp, _Tp>
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       _Tp&
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Tp& __x) const
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x; }
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       const _Tp&
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Tp& __x) const
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x; }
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   // Partial specialization, avoids confusing errors in e.g. std::set<const T>.
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****   template<typename _Pair>
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     struct _Select1st
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     : public unary_function<_Pair, typename _Pair::first_type>
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     {
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       typename _Pair::first_type&
1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(_Pair& __x) const
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x.first; }
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h **** 
1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       const typename _Pair::first_type&
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       operator()(const _Pair& __x) const
 828              		.loc 7 1155 7 view .LVU196
 829              		.loc 7 1155 7 is_stmt 0 view .LVU197
 830              	.LBE984:
 831              	.LBE983:
2413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
 832              		.loc 3 2413 11 view .LVU198
 833 001a 00F11002 		add	r2, r0, #16
 834 001e 3946     		mov	r1, r7
 835 0020 6846     		mov	r0, sp
 836              	.LVL74:
2413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    if (__res.second)
 837              		.loc 3 2413 11 view .LVU199
 838 0022 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_unique_posERS1
 839              	.LVL75:
2414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 840              		.loc 3 2414 16 view .LVU200
 841 0026 019A     		ldr	r2, [sp, #4]
2414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _Res(_M_insert_node(__res.first, __res.second, __z), true);
 842              		.loc 3 2414 6 view .LVU201
 843 0028 52B1     		cbz	r2, .L37
2415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	
 844              		.loc 3 2415 15 view .LVU202
 845 002a 2346     		mov	r3, r4
 846 002c 0099     		ldr	r1, [sp]
 847 002e 3846     		mov	r0, r7
 848 0030 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree
 849              	.LVL76:
 850              	.LBB985:
 851              	.LBI985:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 852              		.loc 8 341 12 is_stmt 1 view .LVU203
 853              	.LBB986:
ARM GAS  /tmp/cc27eAcR.s 			page 119


 854              	.LBB987:
 855              	.LBB988:
 856              	.LBI988:
 857              		.loc 9 74 5 view .LVU204
 858              		.loc 9 74 5 is_stmt 0 view .LVU205
 859              	.LBE988:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 860              		.loc 8 342 64 view .LVU206
 861 0034 2860     		str	r0, [r5]
 862              	.LVL77:
 863              	.LBB989:
 864              	.LBI989:
 865              		.loc 9 74 5 is_stmt 1 view .LVU207
 866              		.loc 9 74 5 is_stmt 0 view .LVU208
 867              	.LBE989:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 868              		.loc 8 342 64 view .LVU209
 869 0036 0123     		movs	r3, #1
 870 0038 2B71     		strb	r3, [r5, #4]
 871              	.LVL78:
 872              	.L36:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 873              		.loc 8 342 64 view .LVU210
 874              	.LBE987:
 875              	.LBE986:
 876              	.LBE985:
 877              	.LBE982:
2425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 878              		.loc 3 2425 7 view .LVU211
 879 003a 2846     		mov	r0, r5
 880 003c 03B0     		add	sp, sp, #12
 881              	.LCFI7:
 882              		.cfi_remember_state
 883              		.cfi_def_cfa_offset 20
 884              		@ sp needed
 885 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 886              	.LVL79:
 887              	.L37:
 888              	.LCFI8:
 889              		.cfi_restore_state
 890              	.LBB1001:
 891              	.LBB990:
 892              	.LBI990:
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 893              		.loc 3 648 7 is_stmt 1 view .LVU212
 894              	.LBB991:
 895              	.LBI991:
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 896              		.loc 3 583 7 view .LVU213
 897              	.LBB992:
 898              	.LBI992:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 899              		.loc 10 469 7 view .LVU214
 900              	.LBB993:
 901              	.LBI993:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 902              		.loc 5 119 7 view .LVU215
ARM GAS  /tmp/cc27eAcR.s 			page 120


 903              	.LBB994:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 904              		.loc 5 128 19 is_stmt 0 view .LVU216
 905 0040 2046     		mov	r0, r4
 906 0042 FFF7FEFF 		bl	_ZdlPv
 907              	.LVL80:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 908              		.loc 5 128 19 view .LVU217
 909              	.LBE994:
 910              	.LBE993:
 911              	.LBE992:
 912              	.LBE991:
 913              	.LBE990:
2418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
 914              		.loc 3 2418 46 view .LVU218
 915 0046 009B     		ldr	r3, [sp]
 916              	.LVL81:
 917              	.LBB995:
 918              	.LBI995:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 919              		.loc 3 273 7 is_stmt 1 view .LVU219
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 920              		.loc 3 273 7 is_stmt 0 view .LVU220
 921              	.LBE995:
 922              	.LBB996:
 923              	.LBI996:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 924              		.loc 8 341 12 is_stmt 1 view .LVU221
 925              	.LBB997:
 926              	.LBB998:
 927              	.LBB999:
 928              	.LBI999:
 929              		.loc 9 74 5 view .LVU222
 930              		.loc 9 74 5 is_stmt 0 view .LVU223
 931              	.LBE999:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 932              		.loc 8 342 64 view .LVU224
 933 0048 2B60     		str	r3, [r5]
 934              	.LVL82:
 935              	.LBB1000:
 936              	.LBI1000:
 937              		.loc 9 74 5 is_stmt 1 view .LVU225
 938              		.loc 9 74 5 is_stmt 0 view .LVU226
 939              	.LBE1000:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 940              		.loc 8 342 64 view .LVU227
 941 004a 0023     		movs	r3, #0
 942 004c 2B71     		strb	r3, [r5, #4]
 943              	.LVL83:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 944              		.loc 8 342 64 view .LVU228
 945 004e F4E7     		b	.L36
 946              	.LBE998:
 947              	.LBE997:
 948              	.LBE996:
 949              	.LBE1001:
 950              		.cfi_endproc
ARM GAS  /tmp/cc27eAcR.s 			page 121


 951              	.LFE3720:
 953              		.section	.text._ZN13Planner_phase11Add_triggerEi,"ax",%progbits
 954              		.align	1
 955              		.global	_ZN13Planner_phase11Add_triggerEi
 956              		.syntax unified
 957              		.thumb
 958              		.thumb_func
 959              		.fpu fpv4-sp-d16
 961              	_ZN13Planner_phase11Add_triggerEi:
 962              	.LVL84:
 963              	.LFB3324:
   5:alohal/events/planner/planner_phase.cpp **** 
   6:alohal/events/planner/planner_phase.cpp **** int Planner_phase::Add_trigger(int trigger_id){
 964              		.loc 1 6 47 is_stmt 1 view -0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 24
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              		.loc 1 6 47 is_stmt 0 view .LVU230
 969 0000 30B5     		push	{r4, r5, lr}
 970              	.LCFI9:
 971              		.cfi_def_cfa_offset 12
 972              		.cfi_offset 4, -12
 973              		.cfi_offset 5, -8
 974              		.cfi_offset 14, -4
 975 0002 87B0     		sub	sp, sp, #28
 976              	.LCFI10:
 977              		.cfi_def_cfa_offset 40
 978 0004 0191     		str	r1, [sp, #4]
   7:alohal/events/planner/planner_phase.cpp ****     if (triggers.find(trigger_id) == triggers.end()) {
 979              		.loc 1 7 5 is_stmt 1 view .LVU231
 980              	.LVL85:
 981              	.LBB1002:
 982              	.LBI1002:
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Creates a %map with no elements.
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __comp  A comparison object.
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __a  An allocator object.
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       explicit
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const _Compare& __comp,
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  const allocator_type& __a = allocator_type())
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(__comp, _Pair_alloc_type(__a)) { }
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  %Map copy constructor.
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Whether the allocator is copied depends on the allocator traits.
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus < 201103L
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const map& __x)
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(__x._M_t) { }
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const map&) = default;
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
ARM GAS  /tmp/cc27eAcR.s 			page 122


 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  %Map move constructor.
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  The newly-created %map contains the exact contents of the moved
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  instance. The moved instance is a valid, but unspecified, %map.
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(map&&) = default;
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Builds a %map from an initializer_list.
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __l  An initializer_list.
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __comp  A comparison object.
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __a  An allocator object.
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Create a %map consisting of copies of the elements in the
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  initializer_list @a __l.
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This is linear in N if the range is already sorted, and NlogN
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  otherwise (where N is @a __l.size()).
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(initializer_list<value_type> __l,
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  const _Compare& __comp = _Compare(),
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  const allocator_type& __a = allocator_type())
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(__comp, _Pair_alloc_type(__a))
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended default constructor.
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       explicit
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const allocator_type& __a)
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(_Pair_alloc_type(__a)) { }
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended copy constructor.
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(const map& __m, const allocator_type& __a)
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(__m._M_t, _Pair_alloc_type(__a)) { }
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended move constructor.
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(map&& __m, const allocator_type& __a)
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       noexcept(is_nothrow_copy_constructible<_Compare>::value
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	       && _Alloc_traits::_S_always_equal())
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(std::move(__m._M_t), _Pair_alloc_type(__a)) { }
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended initialier-list constructor.
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map(initializer_list<value_type> __l, const allocator_type& __a)
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       : _M_t(_Pair_alloc_type(__a))
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Allocator-extended range constructor.
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _InputIterator>
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	map(_InputIterator __first, _InputIterator __last,
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    const allocator_type& __a)
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	: _M_t(_Pair_alloc_type(__a))
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ _M_t._M_insert_range_unique(__first, __last); }
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Builds a %map from a range.
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  An input iterator.
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __last  An input iterator.
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
ARM GAS  /tmp/cc27eAcR.s 			page 123


 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Create a %map consisting of copies of the elements from
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  [__first,__last).  This is linear in N if the range is
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  already sorted, and NlogN otherwise (where N is
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  distance(__first,__last)).
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _InputIterator>
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	map(_InputIterator __first, _InputIterator __last)
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	: _M_t()
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ _M_t._M_insert_range_unique(__first, __last); }
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Builds a %map from a range.
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  An input iterator.
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __last  An input iterator.
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __comp  A comparison functor.
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __a  An allocator object.
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Create a %map consisting of copies of the elements from
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  [__first,__last).  This is linear in N if the range is
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  already sorted, and NlogN otherwise (where N is
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  distance(__first,__last)).
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _InputIterator>
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	map(_InputIterator __first, _InputIterator __last,
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    const _Compare& __comp,
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    const allocator_type& __a = allocator_type())
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	: _M_t(__comp, _Pair_alloc_type(__a))
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ _M_t._M_insert_range_unique(__first, __last); }
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  The dtor only erases the elements, and note that if the elements
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  themselves are pointers, the pointed-to memory is not touched in any
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  way.  Managing the pointer is the user's responsibility.
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       ~map() = default;
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  %Map assignment operator.
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Whether the allocator is copied depends on the allocator traits.
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus < 201103L
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map&
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator=(const map& __x)
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	_M_t = __x._M_t;
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return *this;
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map&
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator=(const map&) = default;
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Move assignment operator.
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map&
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator=(map&&) = default;
ARM GAS  /tmp/cc27eAcR.s 			page 124


 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  %Map list assignment operator.
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __l  An initializer_list.
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function fills a %map with copies of the elements in the
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  initializer list @a __l.
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that the assignment completely changes the %map and
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  that the resulting %map's size is the same as the number
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  of elements assigned.
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       map&
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator=(initializer_list<value_type> __l)
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	_M_t._M_assign_unique(__l.begin(), __l.end());
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return *this;
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Get a copy of the memory allocation object.
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       allocator_type
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return allocator_type(_M_t.get_allocator()); }
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // iterators
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read/write iterator that points to the first pair in the
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  %map.
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Iteration is done in ascending order according to the keys.
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       begin() _GLIBCXX_NOEXCEPT
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.begin(); }
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points to the first pair
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in the %map.  Iteration is done in ascending order according to the
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  keys.
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       begin() const _GLIBCXX_NOEXCEPT
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.begin(); }
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read/write iterator that points one past the last
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pair in the %map.  Iteration is done in ascending order
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  according to the keys.
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       end() _GLIBCXX_NOEXCEPT
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points one past the last
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pair in the %map.  Iteration is done in ascending order according to
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the keys.
ARM GAS  /tmp/cc27eAcR.s 			page 125


 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       end() const _GLIBCXX_NOEXCEPT
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read/write reverse iterator that points to the last pair in
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the %map.  Iteration is done in descending order according to the
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  keys.
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       reverse_iterator
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       rbegin() _GLIBCXX_NOEXCEPT
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rbegin(); }
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to the
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  last pair in the %map.  Iteration is done in descending order
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  according to the keys.
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_reverse_iterator
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rbegin(); }
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read/write reverse iterator that points to one before the
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first pair in the %map.  Iteration is done in descending order
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  according to the keys.
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       reverse_iterator
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       rend() _GLIBCXX_NOEXCEPT
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rend(); }
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to one
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  before the first pair in the %map.  Iteration is done in descending
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  order according to the keys.
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_reverse_iterator
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       rend() const _GLIBCXX_NOEXCEPT
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rend(); }
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points to the first pair
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in the %map.  Iteration is done in ascending order according to the
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  keys.
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       cbegin() const noexcept
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.begin(); }
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) iterator that points one past the last
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pair in the %map.  Iteration is done in ascending order according to
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the keys.
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
ARM GAS  /tmp/cc27eAcR.s 			page 126


 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       cend() const noexcept
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to the
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  last pair in the %map.  Iteration is done in descending order
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  according to the keys.
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_reverse_iterator
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       crbegin() const noexcept
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rbegin(); }
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a read-only (constant) reverse iterator that points to one
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  before the first pair in the %map.  Iteration is done in descending
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  order according to the keys.
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_reverse_iterator
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       crend() const noexcept
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.rend(); }
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // capacity
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /** Returns true if the %map is empty.  (Thus begin() would equal
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  end().)
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       */
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       _GLIBCXX_NODISCARD bool
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       empty() const _GLIBCXX_NOEXCEPT
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.empty(); }
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /** Returns the size of the %map.  */
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size_type
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size() const _GLIBCXX_NOEXCEPT
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.size(); }
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /** Returns the maximum size of the %map.  */
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size_type
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       max_size() const _GLIBCXX_NOEXCEPT
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.max_size(); }
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // [23.3.1.2] element access
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Subscript ( @c [] ) access to %map data.
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __k  The key for which data should be retrieved.
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A reference to the data of the (key,data) %pair.
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Allows for easy lookup with the subscript ( @c [] )
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  operator.  Returns data associated with the key specified in
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  subscript.  If the key does not exist, a pair with that key
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  is created using default values, which is then returned.
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Lookup requires logarithmic time.
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       mapped_type&
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator[](const key_type& __k)
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// concept requirements
ARM GAS  /tmp/cc27eAcR.s 			page 127


 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator __i = lower_bound(__k);
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// __i->first is greater than or equivalent to __k.
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<>());
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = insert(__i, value_type(__k, mapped_type()));
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return (*__i).second;
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       mapped_type&
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       operator[](key_type&& __k)
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// concept requirements
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator __i = lower_bound(__k);
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// __i->first is greater than or equivalent to __k.
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					std::forward_as_tuple(std::move(__k)),
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					std::tuple<>());
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return (*__i).second;
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // DR 464. Suggestion for new member functions in standard containers.
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Access to %map data.
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __k  The key for which data should be retrieved.
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A reference to the data whose key is equivalent to @a __k, if
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           such a data is present in the %map.
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @throw  std::out_of_range  If no such data is present.
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       mapped_type&
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       at(const key_type& __k)
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator __i = lower_bound(__k);
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __throw_out_of_range(__N("map::at"));
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return (*__i).second;
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const mapped_type&
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       at(const key_type& __k) const
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	const_iterator __i = lower_bound(__k);
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	if (__i == end() || key_comp()(__k, (*__i).first))
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __throw_out_of_range(__N("map::at"));
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return (*__i).second;
ARM GAS  /tmp/cc27eAcR.s 			page 128


 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // modifiers
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __args  Arguments used to generate a new pair instance (see
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	        std::piecewise_contruct for passing arguments to each
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	        part of the pair constructor).
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that points
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           to the possibly inserted pair, and the second is a bool that
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           is true if the pair was actually inserted.
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to build and insert a (key, value) %pair into
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the %map.
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename... _Args>
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	std::pair<iterator, bool>
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	emplace(_Args&&... __args)
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_emplace_unique(std::forward<_Args>(__args)...); }
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __pos  An iterator that serves as a hint as to where the pair
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                should be inserted.
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __args  Arguments used to generate a new pair instance (see
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	         std::piecewise_contruct for passing arguments to each
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	         part of the pair constructor).
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator that points to the element with key of the
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          std::pair built from @a __args (may or may not be that
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          std::pair).
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function is not concerned about whether the insertion took place,
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  and thus does not return a boolean like the single-argument emplace()
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  does.
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that the first parameter is only a hint and can potentially
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  improve the performance of the insertion process. A bad hint would
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  cause no gains in efficiency.
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  See
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.i
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  for more on @a hinting.
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time (if the hint is not taken).
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename... _Args>
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	emplace_hint(const_iterator __pos, _Args&&... __args)
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return _M_t._M_emplace_hint_unique(__pos,
ARM GAS  /tmp/cc27eAcR.s 			page 129


 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					     std::forward<_Args>(__args)...);
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201402L
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Extract a node.
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       node_type
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       extract(const_iterator __pos)
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__glibcxx_assert(__pos != end());
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	return _M_t.extract(__pos);
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       }
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Extract a node.
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       node_type
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       extract(const key_type& __x)
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.extract(__x); }
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Re-insert an extracted node.
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert_return_type
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(node_type&& __nh)
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_reinsert_node_unique(std::move(__nh)); }
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /// Re-insert an extracted node.
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(const_iterator __hint, node_type&& __nh)
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_reinsert_node_hint_unique(__hint, std::move(__nh)); }
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename, typename>
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	friend class std::_Rb_tree_merge_helper;
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _C2>
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	merge(map<_Key, _Tp, _C2, _Alloc>& __source)
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  using _Merge_helper = _Rb_tree_merge_helper<map, _C2>;
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  _M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _C2>
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	merge(map<_Key, _Tp, _C2, _Alloc>&& __source)
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ merge(__source); }
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _C2>
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	merge(multimap<_Key, _Tp, _C2, _Alloc>& __source)
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  using _Merge_helper = _Rb_tree_merge_helper<map, _C2>;
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  _M_t._M_merge_unique(_Merge_helper::_S_get_tree(__source));
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _C2>
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	merge(multimap<_Key, _Tp, _C2, _Alloc>&& __source)
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ merge(__source); }
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif // C++17
ARM GAS  /tmp/cc27eAcR.s 			page 130


 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201402L
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #define __cpp_lib_map_try_emplace 201411
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                the map.
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __args  Arguments used to generate the .second for a new pair
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                instance.
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that points
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           to the possibly inserted pair, and the second is a bool that
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           is true if the pair was actually inserted.
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to build and insert a (key, value) %pair into
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the %map.
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  If a %pair is not inserted, this function has no effect.
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename... _Args>
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	pair<iterator, bool>
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	try_emplace(const key_type& __k, _Args&&... __args)
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i = lower_bound(__k);
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__i == end() || key_comp()(__k, (*__i).first))
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      __i = emplace_hint(__i, std::piecewise_construct,
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(__k),
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				   std::forward<_Args>(__args)...));
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return {__i, true};
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return {__i, false};
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // move-capable overload
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename... _Args>
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	pair<iterator, bool>
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	try_emplace(key_type&& __k, _Args&&... __args)
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i = lower_bound(__k);
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__i == end() || key_comp()(__k, (*__i).first))
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      __i = emplace_hint(__i, std::piecewise_construct,
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(std::move(__k)),
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				   std::forward<_Args>(__args)...));
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return {__i, true};
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return {__i, false};
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
ARM GAS  /tmp/cc27eAcR.s 			page 131


 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to build and insert a std::pair into the %map.
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __hint  An iterator that serves as a hint as to where the
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                  pair should be inserted.
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                the map.
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __args  Arguments used to generate the .second for a new pair
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                instance.
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator that points to the element with key of the
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          std::pair built from @a __args (may or may not be that
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          std::pair).
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function is not concerned about whether the insertion took place,
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  and thus does not return a boolean like the single-argument
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  try_emplace() does. However, if insertion did not take place,
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  this function has no effect.
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that the first parameter is only a hint and can potentially
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  improve the performance of the insertion process. A bad hint would
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  cause no gains in efficiency.
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  See
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.i
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  for more on @a hinting.
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time (if the hint is not taken).
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename... _Args>
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	try_emplace(const_iterator __hint, const key_type& __k,
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 		    _Args&&... __args)
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i;
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__true_hint.second)
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    __i = emplace_hint(iterator(__true_hint.second),
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::piecewise_construct,
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::forward_as_tuple(__k),
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::forward_as_tuple(
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward<_Args>(__args)...));
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  else
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    __i = iterator(__true_hint.first);
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return __i;
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // move-capable overload
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename... _Args>
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	try_emplace(const_iterator __hint, key_type&& __k, _Args&&... __args)
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i;
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__true_hint.second)
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    __i = emplace_hint(iterator(__true_hint.second),
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::piecewise_construct,
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::forward_as_tuple(std::move(__k)),
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			       std::forward_as_tuple(
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward<_Args>(__args)...));
ARM GAS  /tmp/cc27eAcR.s 			page 132


 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  else
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    __i = iterator(__true_hint.first);
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return __i;
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert a std::pair into the %map.
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __x Pair to be inserted (see std::make_pair for easy
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *	     creation of pairs).
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           points to the possibly inserted pair, and the second is
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           a bool that is true if the pair was actually inserted.
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to insert a (key, value) %pair into the %map.
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @{
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       std::pair<iterator, bool>
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(const value_type& __x)
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_insert_unique(__x); }
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // 2354. Unnecessary copying when inserting into maps with braced-init
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       std::pair<iterator, bool>
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(value_type&& __x)
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_insert_unique(std::move(__x)); }
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Pair>
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__enable_if_t<is_constructible<value_type, _Pair>::value,
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 		      pair<iterator, bool>>
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert(_Pair&& __x)
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // @}
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert a list of std::pairs into the %map.
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __list  A std::initializer_list<value_type> of pairs to be
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                  inserted.
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Complexity similar to that of the range constructor.
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(std::initializer_list<value_type> __list)
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { insert(__list.begin(), __list.end()); }
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert a std::pair into the %map.
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __position  An iterator that serves as a hint as to where the
ARM GAS  /tmp/cc27eAcR.s 			page 133


 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                    pair should be inserted.
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Pair to be inserted (see std::make_pair for easy creation
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *               of pairs).
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator that points to the element with key of
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           @a __x (may or may not be the %pair passed in).
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function is not concerned about whether the insertion
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  took place, and thus does not return a boolean like the
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  single-argument insert() does.  Note that the first
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  parameter is only a hint and can potentially improve the
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  performance of the insertion process.  A bad hint would
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  cause no gains in efficiency.
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  See
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  https://gcc.gnu.org/onlinedocs/libstdc++/manual/associative.html#containers.associative.i
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  for more on @a hinting.
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time (if the hint is not taken).
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @{
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(const_iterator __position, const value_type& __x)
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(iterator __position, const value_type& __x)
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_insert_unique_(__position, __x); }
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // 2354. Unnecessary copying when inserting into maps with braced-init
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       insert(const_iterator __position, value_type&& __x)
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t._M_insert_unique_(__position, std::move(__x)); }
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Pair>
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	__enable_if_t<is_constructible<value_type, _Pair>::value, iterator>
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert(const_iterator __position, _Pair&& __x)
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return _M_t._M_emplace_hint_unique(__position,
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					     std::forward<_Pair>(__x));
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // @}
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Template function that attempts to insert a range of elements.
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  Iterator pointing to the start of the range to be
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                   inserted.
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __last  Iterator pointing to the end of the range.
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Complexity similar to that of the range constructor.
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _InputIterator>
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	void
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert(_InputIterator __first, _InputIterator __last)
ARM GAS  /tmp/cc27eAcR.s 			page 134


 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ _M_t._M_insert_range_unique(__first, __last); }
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201402L
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #define __cpp_lib_map_insertion 201411
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert or assign a std::pair into the %map.
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                the map.
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __obj  Argument used to generate the .second for a pair
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                instance.
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  A pair, of which the first element is an iterator that
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           points to the possibly inserted pair, and the second is
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           a bool that is true if the pair was actually inserted.
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to insert a (key, value) %pair into the %map.
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  If the %pair was already in the %map, the .second of the %pair
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  is assigned from __obj.
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename _Obj>
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	pair<iterator, bool>
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert_or_assign(const key_type& __k, _Obj&& __obj)
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i = lower_bound(__k);
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__i == end() || key_comp()(__k, (*__i).first))
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      __i = emplace_hint(__i, std::piecewise_construct,
 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(__k),
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				   std::forward<_Obj>(__obj)));
 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return {__i, true};
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  (*__i).second = std::forward<_Obj>(__obj);
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return {__i, false};
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // move-capable overload
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename _Obj>
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	pair<iterator, bool>
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert_or_assign(key_type&& __k, _Obj&& __obj)
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i = lower_bound(__k);
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__i == end() || key_comp()(__k, (*__i).first))
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      __i = emplace_hint(__i, std::piecewise_construct,
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(std::move(__k)),
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				 std::forward_as_tuple(
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				   std::forward<_Obj>(__obj)));
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return {__i, true};
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  (*__i).second = std::forward<_Obj>(__obj);
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return {__i, false};
 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
ARM GAS  /tmp/cc27eAcR.s 			page 135


 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Attempts to insert or assign a std::pair into the %map.
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __hint  An iterator that serves as a hint as to where the
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                  pair should be inserted.
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __k    Key to use for finding a possibly existing pair in
 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                the map.
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __obj  Argument used to generate the .second for a pair
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                instance.
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator that points to the element with key of
 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           @a __x (may or may not be the %pair passed in).
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function attempts to insert a (key, value) %pair into the %map.
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  A %map relies on unique keys and thus a %pair is only inserted if its
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  first element (the key) is not already present in the %map.
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  If the %pair was already in the %map, the .second of the %pair
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  is assigned from __obj.
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Insertion requires logarithmic time.
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename _Obj>
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert_or_assign(const_iterator __hint,
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 			 const key_type& __k, _Obj&& __obj)
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i;
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__true_hint.second)
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return emplace_hint(iterator(__true_hint.second),
 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::piecewise_construct,
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::forward_as_tuple(__k),
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::forward_as_tuple(
 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				    std::forward<_Obj>(__obj)));
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = iterator(__true_hint.first);
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  (*__i).second = std::forward<_Obj>(__obj);
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return __i;
 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // move-capable overload
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template <typename _Obj>
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	iterator
 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	insert_or_assign(const_iterator __hint, key_type&& __k, _Obj&& __obj)
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  iterator __i;
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  auto __true_hint = _M_t._M_get_insert_hint_unique_pos(__hint, __k);
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  if (__true_hint.second)
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    {
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	      return emplace_hint(iterator(__true_hint.second),
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::piecewise_construct,
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::forward_as_tuple(std::move(__k)),
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				  std::forward_as_tuple(
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 				    std::forward<_Obj>(__obj)));
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	    }
1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  __i = iterator(__true_hint.first);
ARM GAS  /tmp/cc27eAcR.s 			page 136


1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  (*__i).second = std::forward<_Obj>(__obj);
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	  return __i;
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	}
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // DR 130. Associative erase should return an iterator.
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases an element from a %map.
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __position  An iterator pointing to the element to be erased.
1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return An iterator pointing to the element immediately following
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          @a position prior to the element being erased. If no such
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *          element exists, end() is returned.
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases an element, pointed to by the given
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  iterator, from a %map.  Note that this function only erases
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element, and that if the element is itself a pointer,
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the pointed-to memory is not touched in any way.  Managing
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the pointer is the user's responsibility.
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @{
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(const_iterator __position)
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.erase(__position); }
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // LWG 2059
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       _GLIBCXX_ABI_TAG_CXX11
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(iterator __position)
1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.erase(__position); }
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // @}
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases an element from a %map.
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __position  An iterator pointing to the element to be erased.
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases an element, pointed to by the given
1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  iterator, from a %map.  Note that this function only erases
1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element, and that if the element is itself a pointer,
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the pointed-to memory is not touched in any way.  Managing
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the pointer is the user's responsibility.
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(iterator __position)
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t.erase(__position); }
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases elements according to the provided key.
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of element to be erased.
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  The number of elements erased.
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases all the elements located by the given key from
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  a %map.
1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that this function only erases the element, and that if
ARM GAS  /tmp/cc27eAcR.s 			page 137


1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element is itself a pointer, the pointed-to memory is not touched
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in any way.  Managing the pointer is the user's responsibility.
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size_type
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(const key_type& __x)
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.erase(__x); }
1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // DR 130. Associative erase should return an iterator.
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases a [first,last) range of elements from a %map.
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  Iterator pointing to the start of the range to be
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                   erased.
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __last Iterator pointing to the end of the range to
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                be erased.
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return The iterator @a __last.
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases a sequence of elements from a %map.
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that this function only erases the element, and that if
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element is itself a pointer, the pointed-to memory is not touched
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in any way.  Managing the pointer is the user's responsibility.
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(const_iterator __first, const_iterator __last)
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.erase(__first, __last); }
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #else
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Erases a [__first,__last) range of elements from a %map.
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __first  Iterator pointing to the start of the range to be
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                   erased.
1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param __last Iterator pointing to the end of the range to
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *                be erased.
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function erases a sequence of elements from a %map.
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Note that this function only erases the element, and that if
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the element is itself a pointer, the pointed-to memory is not touched
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  in any way.  Managing the pointer is the user's responsibility.
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       erase(iterator __first, iterator __last)
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t.erase(__first, __last); }
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Swaps data with another %map.
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  A %map of the same element and allocator types.
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This exchanges the elements between two maps in constant
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  time.  (It is only swapping a pointer, an integer, and an
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  instance of the @c Compare type (which itself is often
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  stateless and empty), so it should be quite fast.)  Note
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  that the global std::swap() function is specialized such
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  that std::swap(m1,m2) will feed to this function.
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
ARM GAS  /tmp/cc27eAcR.s 			page 138


1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       swap(map& __x)
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       _GLIBCXX_NOEXCEPT_IF(__is_nothrow_swappable<_Compare>::value)
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t.swap(__x._M_t); }
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Erases all elements in a %map.  Note that this function only
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  erases the elements, and that if the elements themselves are
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pointers, the pointed-to memory is not touched in any way.
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Managing the pointer is the user's responsibility.
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       void
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       clear() _GLIBCXX_NOEXCEPT
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { _M_t.clear(); }
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // observers
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns the key comparison object out of which the %map was
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  constructed.
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       key_compare
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       key_comp() const
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.key_comp(); }
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  Returns a value comparison object, built from the key comparison
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  object out of which the %map was constructed.
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       value_compare
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       value_comp() const
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return value_compare(_M_t.key_comp()); }
1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       // [23.3.1.3] map operations
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Tries to locate an element in a %map.
1157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) %pair to be located.
1158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  Iterator pointing to sought-after element, or end() if not
1159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           found.
1160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function takes a key and tries to locate the element with which
1162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the key matches.  If successful the function returns an iterator
1163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pointing to the sought after %pair.  If unsuccessful it returns the
1164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  past-the-end ( @c end() ) iterator.
1165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       find(const key_type& __x)
 983              		.loc 2 1168 7 view .LVU232
 984              	.LBB1003:
1169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.find(__x); }
 985              		.loc 2 1169 29 is_stmt 0 view .LVU233
 986 0006 041D     		adds	r4, r0, #4
 987 0008 01A9     		add	r1, sp, #4
 988              	.LVL86:
 989              		.loc 2 1169 29 view .LVU234
ARM GAS  /tmp/cc27eAcR.s 			page 139


 990 000a 2046     		mov	r0, r4
 991              	.LVL87:
 992              		.loc 2 1169 29 view .LVU235
 993 000c FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE4findERS1_
 994              	.LVL88:
 995              		.loc 2 1169 29 view .LVU236
 996              	.LBE1003:
 997              	.LBE1002:
 998              	.LBB1004:
 999              	.LBI1004:
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 1000              		.loc 2 372 7 is_stmt 1 view .LVU237
 1001              	.LBB1005:
 1002              	.LBI1005:
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 1003              		.loc 3 1014 7 view .LVU238
 1004              	.LBB1006:
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1005              		.loc 3 1015 49 is_stmt 0 view .LVU239
 1006 0010 231D     		adds	r3, r4, #4
 1007              	.LVL89:
 1008              	.LBB1007:
 1009              	.LBI1007:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1010              		.loc 3 273 7 is_stmt 1 view .LVU240
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1011              		.loc 3 273 7 is_stmt 0 view .LVU241
 1012              	.LBE1007:
 1013              	.LBE1006:
 1014              	.LBE1005:
 1015              	.LBE1004:
 1016              	.LBB1008:
 1017              	.LBI1008:
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 1018              		.loc 3 315 7 is_stmt 1 view .LVU242
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 1019              		.loc 3 315 7 is_stmt 0 view .LVU243
 1020              	.LBE1008:
 1021              		.loc 1 7 5 view .LVU244
 1022 0012 8342     		cmp	r3, r0
 1023 0014 0CD0     		beq	.L42
   8:alohal/events/planner/planner_phase.cpp ****         // trigger is already contained
   9:alohal/events/planner/planner_phase.cpp ****         return EEXIST;
  10:alohal/events/planner/planner_phase.cpp ****     }
  11:alohal/events/planner/planner_phase.cpp ****     // Create new trigger
  12:alohal/events/planner/planner_phase.cpp ****     triggers.insert(make_pair(trigger_id, false));
 1024              		.loc 1 12 5 is_stmt 1 view .LVU245
 1025              	.LVL90:
 1026              	.LBB1009:
 1027              	.LBI1009:
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2, typename
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			  && !_PCCFP<_U1, _U2>::template
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                          bool>::type=false>
ARM GAS  /tmp/cc27eAcR.s 			page 140


 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	explicit constexpr pair(pair<_U1, _U2>&& __p)
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	  second(std::forward<_U2>(__p.second)) { }
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****         pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       pair&
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       operator=(typename conditional<
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		__and_<is_copy_assignable<_T1>,
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		       is_copy_assignable<_T2>>::value,
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		const pair&, const __nonesuch_no_braces&>::type __p)
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	first = __p.first;
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	second = __p.second;
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return *this;
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       pair&
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       operator=(typename conditional<
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		__and_<is_move_assignable<_T1>,
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		       is_move_assignable<_T2>>::value,
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		pair&&, __nonesuch_no_braces&&>::type __p)
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       noexcept(__and_<is_nothrow_move_assignable<_T1>,
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 		      is_nothrow_move_assignable<_T2>>::value)
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	first = std::forward<first_type>(__p.first);
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	return *this;
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       typename enable_if<__and_<is_assignable<_T1&, const _U1&>,
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				is_assignable<_T2&, const _U2&>>::value,
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			 pair&>::type
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	operator=(const pair<_U1, _U2>& __p)
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	{
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	  first = __p.first;
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	  second = __p.second;
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	  return *this;
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	}
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename _U1, typename _U2>
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       typename enable_if<__and_<is_assignable<_T1&, _U1&&>,
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 				is_assignable<_T2&, _U2&&>>::value,
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			 pair&>::type
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	operator=(pair<_U1, _U2>&& __p)
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	{
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	  first = std::forward<_U1>(__p.first);
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	  second = std::forward<_U2>(__p.second);
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	  return *this;
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	}
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       void
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       swap(pair& __p)
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       noexcept(__and_<__is_nothrow_swappable<_T1>,
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                       __is_nothrow_swappable<_T2>>::value)
ARM GAS  /tmp/cc27eAcR.s 			page 141


 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       {
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	using std::swap;
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	swap(first, __p.first);
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	swap(second, __p.second);
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       }
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     private:
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****       template<typename... _Args1, std::size_t... _Indexes1,
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                typename... _Args2, std::size_t... _Indexes2>
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****         pair(tuple<_Args1...>&, tuple<_Args2...>&,
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****              _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     };
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cpp_deduction_guides >= 201606
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2> pair(_T1, _T2) -> pair<_T1, _T2>;
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// Two pairs of the same type are equal iff their members are equal.
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     inline _GLIBCXX_CONSTEXPR bool
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     { return __x.first == __y.first && __x.second == __y.second; }
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// <http://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     inline _GLIBCXX_CONSTEXPR bool
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     { return __x.first < __y.first
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	     || (!(__y.first < __x.first) && __x.second < __y.second); }
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// Uses @c operator== to find the result.
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     inline _GLIBCXX_CONSTEXPR bool
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     { return !(__x == __y); }
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// Uses @c operator< to find the result.
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     inline _GLIBCXX_CONSTEXPR bool
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     { return __y < __x; }
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// Uses @c operator< to find the result.
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     inline _GLIBCXX_CONSTEXPR bool
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     { return !(__y < __x); }
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// Uses @c operator< to find the result.
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     inline _GLIBCXX_CONSTEXPR bool
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     { return !(__x < __y); }
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /// See std::pair::swap().
ARM GAS  /tmp/cc27eAcR.s 			page 142


 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // Note:  no std::swap overloads in C++03 mode, this has performance
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   //        implications, see, eg, libstdc++/38466.
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     inline
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     // Constrained free swap overload, see p0185r1
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     typename enable_if<__and_<__is_swappable<_T1>,
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                               __is_swappable<_T2>>::value>::type
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #else
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     void
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     noexcept(noexcept(__x.swap(__y)))
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     { __x.swap(__y); }
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     typename enable_if<!__and_<__is_swappable<_T1>,
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 			       __is_swappable<_T2>>::value>::type
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #endif // __cplusplus >= 201103L
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   /**
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @brief A convenience wrapper for creating a pair from two objects.
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @param  __x  The first object.
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @param  __y  The second object.
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  @return   A newly-constructed pair<> object of the appropriate type.
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  The standard requires that the objects be passed by reference-to-const,
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  but LWG issue #181 says they should be passed by const value.  We follow
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    *  the LWG by default.
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****    */
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // 181.  make_pair() unintended behavior
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** #if __cplusplus >= 201103L
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   // NB: DR 706.
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****   template<typename _T1, typename _T2>
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     constexpr pair<typename __decay_and_strip<_T1>::__type,
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****                    typename __decay_and_strip<_T2>::__type>
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****     make_pair(_T1&& __x, _T2&& __y)
 1028              		.loc 8 524 5 view .LVU246
 1029              	.LBB1010:
 1030              	.LBB1011:
 1031              	.LBI1011:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1032              		.loc 8 341 12 view .LVU247
 1033              	.LBB1012:
 1034              	.LBB1013:
 1035              	.LBB1014:
 1036              	.LBI1014:
 1037              		.loc 9 74 5 view .LVU248
 1038              		.loc 9 74 5 is_stmt 0 view .LVU249
 1039              	.LBE1014:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1040              		.loc 8 342 64 view .LVU250
 1041 0016 019B     		ldr	r3, [sp, #4]
ARM GAS  /tmp/cc27eAcR.s 			page 143


 1042 0018 0493     		str	r3, [sp, #16]
 1043              	.LVL91:
 1044              	.LBB1015:
 1045              	.LBI1015:
 1046              		.loc 9 74 5 is_stmt 1 view .LVU251
 1047              		.loc 9 74 5 is_stmt 0 view .LVU252
 1048              	.LBE1015:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1049              		.loc 8 342 64 view .LVU253
 1050 001a 0025     		movs	r5, #0
 1051 001c 8DF81450 		strb	r5, [sp, #20]
 1052              	.LVL92:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1053              		.loc 8 342 64 view .LVU254
 1054              	.LBE1013:
 1055              	.LBE1012:
 1056              	.LBE1011:
 1057              	.LBE1010:
 1058              	.LBE1009:
 1059              	.LBB1016:
 1060              	.LBI1016:
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_emplace_unique(std::forward<_Pair>(__x)); }
 1061              		.loc 2 814 2 is_stmt 1 view .LVU255
 1062              	.LBB1017:
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 1063              		.loc 2 815 58 is_stmt 0 view .LVU256
 1064 0020 04AA     		add	r2, sp, #16
 1065              	.LVL93:
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 1066              		.loc 2 815 58 view .LVU257
 1067 0022 2146     		mov	r1, r4
 1068 0024 02A8     		add	r0, sp, #8
 1069 0026 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IibEEE
 1070              	.LVL94:
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
 1071              		.loc 2 815 58 view .LVU258
 1072              	.LBE1017:
 1073              	.LBE1016:
  13:alohal/events/planner/planner_phase.cpp ****     return 0;
 1074              		.loc 1 13 5 is_stmt 1 view .LVU259
 1075              		.loc 1 13 12 is_stmt 0 view .LVU260
 1076 002a 2846     		mov	r0, r5
 1077              	.L40:
  14:alohal/events/planner/planner_phase.cpp **** }
 1078              		.loc 1 14 1 view .LVU261
 1079 002c 07B0     		add	sp, sp, #28
 1080              	.LCFI11:
 1081              		.cfi_remember_state
 1082              		.cfi_def_cfa_offset 12
 1083              		@ sp needed
 1084 002e 30BD     		pop	{r4, r5, pc}
 1085              	.LVL95:
 1086              	.L42:
 1087              	.LCFI12:
 1088              		.cfi_restore_state
   9:alohal/events/planner/planner_phase.cpp ****     }
 1089              		.loc 1 9 16 view .LVU262
ARM GAS  /tmp/cc27eAcR.s 			page 144


 1090 0030 1120     		movs	r0, #17
 1091 0032 FBE7     		b	.L40
 1092              		.cfi_endproc
 1093              	.LFE3324:
 1095              		.section	.text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE29_M_get_insert_hi
 1096              		.align	1
 1097              		.weak	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE29_M_get_insert_hint_unique
 1098              		.syntax unified
 1099              		.thumb
 1100              		.thumb_func
 1101              		.fpu fpv4-sp-d16
 1103              	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE29_M_get_insert_hint_unique_posESt
 1104              	.LVL96:
 1105              	.LFB3834:
2187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
 1106              		.loc 3 2187 5 is_stmt 1 view -0
 1107              		.cfi_startproc
 1108              		@ args = 0, pretend = 0, frame = 0
 1109              		@ frame_needed = 0, uses_anonymous_args = 0
2187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****     _M_get_insert_hint_unique_pos(const_iterator __position,
 1110              		.loc 3 2187 5 is_stmt 0 view .LVU264
 1111 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1112              	.LCFI13:
 1113              		.cfi_def_cfa_offset 24
 1114              		.cfi_offset 4, -24
 1115              		.cfi_offset 5, -20
 1116              		.cfi_offset 6, -16
 1117              		.cfi_offset 7, -12
 1118              		.cfi_offset 8, -8
 1119              		.cfi_offset 14, -4
 1120 0004 0746     		mov	r7, r0
 1121 0006 8846     		mov	r8, r1
 1122 0008 1D46     		mov	r5, r3
 1123              	.LVL97:
 1124              	.LBB1018:
 1125              	.LBI1018:
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 1126              		.loc 3 352 7 is_stmt 1 view .LVU265
 1127              	.LBB1019:
 1128              	.LBB1020:
 1129              	.LBI1020:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1130              		.loc 3 273 7 view .LVU266
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1131              		.loc 3 273 7 is_stmt 0 view .LVU267
 1132              	.LBE1020:
 1133              	.LBE1019:
 1134              	.LBE1018:
 1135              	.LBB1021:
 1136              	.LBB1022:
 1137              	.LBI1022:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 1138              		.loc 3 755 7 is_stmt 1 view .LVU268
 1139              	.LBB1023:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1140              		.loc 3 756 31 is_stmt 0 view .LVU269
 1141 000a 0B1D     		adds	r3, r1, #4
ARM GAS  /tmp/cc27eAcR.s 			page 145


 1142              	.LVL98:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1143              		.loc 3 756 31 view .LVU270
 1144              	.LBE1023:
 1145              	.LBE1022:
2195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1146              		.loc 3 2195 7 view .LVU271
 1147 000c 9A42     		cmp	r2, r3
 1148 000e 12D0     		beq	.L59
 1149 0010 1446     		mov	r4, r2
 1150              	.LVL99:
 1151              	.LBB1024:
 1152              	.LBB1025:
 1153              	.LBI1025:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1154              		.loc 7 385 7 is_stmt 1 view .LVU272
 1155              	.LBB1026:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1156              		.loc 7 386 20 is_stmt 0 view .LVU273
 1157 0012 2E68     		ldr	r6, [r5]
 1158 0014 1369     		ldr	r3, [r2, #16]
 1159              	.LVL100:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1160              		.loc 7 386 20 view .LVU274
 1161              	.LBE1026:
 1162              	.LBE1025:
2203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1163              		.loc 3 2203 12 view .LVU275
 1164 0016 B342     		cmp	r3, r6
 1165 0018 2CDD     		ble	.L48
 1166              	.LBB1027:
2207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
 1167              		.loc 3 2207 22 view .LVU276
 1168 001a CB68     		ldr	r3, [r1, #12]
2207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(_M_leftmost(), _M_leftmost());
 1169              		.loc 3 2207 4 view .LVU277
 1170 001c 9342     		cmp	r3, r2
 1171 001e 1DD0     		beq	.L60
 1172              	.LVL101:
 1173              	.LBB1028:
 1174              	.LBI1028:
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 1175              		.loc 3 300 7 is_stmt 1 view .LVU278
 1176              	.LBB1029:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1177              		.loc 3 302 30 is_stmt 0 view .LVU279
 1178 0020 1046     		mov	r0, r2
 1179              	.LVL102:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1180              		.loc 3 302 30 view .LVU280
 1181 0022 FFF7FEFF 		bl	_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
 1182              	.LVL103:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1183              		.loc 3 302 30 view .LVU281
 1184              	.LBE1029:
 1185              	.LBE1028:
 1186              	.LBB1030:
ARM GAS  /tmp/cc27eAcR.s 			page 146


 1187              	.LBI1030:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1188              		.loc 7 385 7 is_stmt 1 view .LVU282
 1189              	.LBB1031:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1190              		.loc 7 386 20 is_stmt 0 view .LVU283
 1191 0026 0369     		ldr	r3, [r0, #16]
 1192              	.LVL104:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1193              		.loc 7 386 20 view .LVU284
 1194              	.LBE1031:
 1195              	.LBE1030:
2209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 1196              		.loc 3 2209 9 view .LVU285
 1197 0028 B342     		cmp	r3, r6
 1198 002a 1DDA     		bge	.L51
 1199              	.LVL105:
 1200              	.LBB1032:
 1201              	.LBI1032:
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 1202              		.loc 3 797 7 is_stmt 1 view .LVU286
 1203              	.LBB1033:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1204              		.loc 3 798 53 is_stmt 0 view .LVU287
 1205 002c C368     		ldr	r3, [r0, #12]
 1206              	.LVL106:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1207              		.loc 3 798 53 view .LVU288
 1208              	.LBE1033:
 1209              	.LBE1032:
2211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __before._M_node);
 1210              		.loc 3 2211 8 view .LVU289
 1211 002e C3B1     		cbz	r3, .L61
 1212              	.LVL107:
 1213              	.LBB1034:
 1214              	.LBI1034:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1215              		.loc 8 341 12 is_stmt 1 view .LVU290
 1216              	.LBB1035:
 1217              	.LBB1036:
 1218              	.LBB1037:
 1219              	.LBI1037:
 1220              		.loc 9 74 5 view .LVU291
 1221              		.loc 9 74 5 is_stmt 0 view .LVU292
 1222              	.LBE1037:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1223              		.loc 8 342 64 view .LVU293
 1224 0030 3C60     		str	r4, [r7]
 1225              	.LVL108:
 1226              	.LBB1038:
 1227              	.LBI1038:
 1228              		.loc 9 74 5 is_stmt 1 view .LVU294
 1229              		.loc 9 74 5 is_stmt 0 view .LVU295
 1230              	.LBE1038:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1231              		.loc 8 342 64 view .LVU296
 1232 0032 7C60     		str	r4, [r7, #4]
ARM GAS  /tmp/cc27eAcR.s 			page 147


 1233              	.LBE1036:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1234              		.loc 8 342 68 view .LVU297
 1235 0034 0FE0     		b	.L44
 1236              	.LVL109:
 1237              	.L59:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1238              		.loc 8 342 68 view .LVU298
 1239              	.LBE1035:
 1240              	.LBE1034:
 1241              	.LBE1027:
 1242              	.LBE1024:
 1243              	.LBB1074:
 1244              	.LBI1074:
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_impl._M_node_count; }
 1245              		.loc 3 1042 7 is_stmt 1 view .LVU299
 1246              	.LBB1075:
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1247              		.loc 3 1043 24 is_stmt 0 view .LVU300
 1248 0036 4B69     		ldr	r3, [r1, #20]
 1249              	.LVL110:
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1250              		.loc 3 1043 24 view .LVU301
 1251              	.LBE1075:
 1252              	.LBE1074:
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1253              		.loc 3 2198 8 view .LVU302
 1254 0038 43B1     		cbz	r3, .L46
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1255              		.loc 3 2198 8 discriminator 1 view .LVU303
 1256 003a 0B69     		ldr	r3, [r1, #16]
 1257              	.LVL111:
 1258              	.LBB1076:
 1259              	.LBI1076:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1260              		.loc 7 385 7 is_stmt 1 discriminator 1 view .LVU304
 1261              	.LBB1077:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1262              		.loc 7 386 20 is_stmt 0 discriminator 1 view .LVU305
 1263 003c 1A69     		ldr	r2, [r3, #16]
 1264              	.LVL112:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1265              		.loc 7 386 20 discriminator 1 view .LVU306
 1266 003e 2968     		ldr	r1, [r5]
 1267              	.LVL113:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1268              		.loc 7 386 20 discriminator 1 view .LVU307
 1269              	.LBE1077:
 1270              	.LBE1076:
2198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1271              		.loc 3 2198 8 discriminator 1 view .LVU308
 1272 0040 9142     		cmp	r1, r2
 1273 0042 03DD     		ble	.L46
 1274              	.LVL114:
 1275              	.LBB1078:
 1276              	.LBI1078:
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
ARM GAS  /tmp/cc27eAcR.s 			page 148


 1277              		.loc 8 325 18 is_stmt 1 view .LVU309
 1278              	.LBB1079:
 1279              	.LBB1080:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1280              		.loc 8 326 51 is_stmt 0 view .LVU310
 1281 0044 0022     		movs	r2, #0
 1282 0046 0260     		str	r2, [r0]
 1283              	.LVL115:
 1284              	.LBB1081:
 1285              	.LBI1081:
 1286              		.loc 9 74 5 is_stmt 1 view .LVU311
 1287              		.loc 9 74 5 is_stmt 0 view .LVU312
 1288              	.LBE1081:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1289              		.loc 8 326 51 view .LVU313
 1290 0048 4360     		str	r3, [r0, #4]
 1291              	.LVL116:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1292              		.loc 8 326 51 view .LVU314
 1293 004a 04E0     		b	.L44
 1294              	.LVL117:
 1295              	.L46:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1296              		.loc 8 326 51 view .LVU315
 1297              	.LBE1080:
 1298              	.LBE1079:
 1299              	.LBE1078:
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1300              		.loc 3 2201 41 discriminator 4 view .LVU316
 1301 004c 2A46     		mov	r2, r5
 1302              	.LVL118:
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1303              		.loc 3 2201 41 discriminator 4 view .LVU317
 1304 004e 4146     		mov	r1, r8
 1305 0050 3846     		mov	r0, r7
 1306              	.LVL119:
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1307              		.loc 3 2201 41 discriminator 4 view .LVU318
 1308 0052 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_unique_posERS1
 1309              	.LVL120:
 1310              	.L44:
2201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1311              		.loc 3 2201 41 discriminator 4 view .LVU319
 1312              	.LBE1021:
2238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1313              		.loc 3 2238 5 view .LVU320
 1314 0056 3846     		mov	r0, r7
 1315 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1316              	.LVL121:
 1317              	.L60:
 1318              	.LBB1083:
 1319              	.LBB1082:
 1320              	.LBB1048:
 1321              	.LBB1039:
 1322              	.LBI1039:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1323              		.loc 8 341 12 is_stmt 1 view .LVU321
ARM GAS  /tmp/cc27eAcR.s 			page 149


 1324              	.LBB1040:
 1325              	.LBB1041:
 1326              	.LBB1042:
 1327              	.LBI1042:
 1328              		.loc 9 74 5 view .LVU322
 1329              		.loc 9 74 5 is_stmt 0 view .LVU323
 1330              	.LBE1042:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1331              		.loc 8 342 64 view .LVU324
 1332 005c 0360     		str	r3, [r0]
 1333              	.LVL122:
 1334              	.LBB1043:
 1335              	.LBI1043:
 1336              		.loc 9 74 5 is_stmt 1 view .LVU325
 1337              		.loc 9 74 5 is_stmt 0 view .LVU326
 1338              	.LBE1043:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1339              		.loc 8 342 64 view .LVU327
 1340 005e 4360     		str	r3, [r0, #4]
 1341              	.LBE1041:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1342              		.loc 8 342 68 view .LVU328
 1343 0060 F9E7     		b	.L44
 1344              	.LVL123:
 1345              	.L61:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1346              		.loc 8 342 68 view .LVU329
 1347              	.LBE1040:
 1348              	.LBE1039:
 1349              	.LBB1044:
 1350              	.LBI1044:
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 1351              		.loc 8 325 18 is_stmt 1 view .LVU330
 1352              	.LBB1045:
 1353              	.LBB1046:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1354              		.loc 8 326 51 is_stmt 0 view .LVU331
 1355 0062 3B60     		str	r3, [r7]
 1356              	.LVL124:
 1357              	.LBB1047:
 1358              	.LBI1047:
 1359              		.loc 9 74 5 is_stmt 1 view .LVU332
 1360              		.loc 9 74 5 is_stmt 0 view .LVU333
 1361              	.LBE1047:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1362              		.loc 8 326 51 view .LVU334
 1363 0064 7860     		str	r0, [r7, #4]
 1364              	.LVL125:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1365              		.loc 8 326 51 view .LVU335
 1366 0066 F6E7     		b	.L44
 1367              	.L51:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1368              		.loc 8 326 51 view .LVU336
 1369              	.LBE1046:
 1370              	.LBE1045:
 1371              	.LBE1044:
ARM GAS  /tmp/cc27eAcR.s 			page 150


2217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1372              		.loc 3 2217 41 view .LVU337
 1373 0068 2A46     		mov	r2, r5
 1374 006a 4146     		mov	r1, r8
 1375 006c 3846     		mov	r0, r7
 1376 006e FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_unique_posERS1
 1377              	.LVL126:
 1378 0072 F0E7     		b	.L44
 1379              	.LVL127:
 1380              	.L48:
2217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1381              		.loc 3 2217 41 view .LVU338
 1382              	.LBE1048:
 1383              	.LBB1049:
2219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1384              		.loc 3 2219 12 view .LVU339
 1385 0074 B342     		cmp	r3, r6
 1386 0076 1ADA     		bge	.L53
 1387              	.LBB1050:
2223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1388              		.loc 3 2223 22 view .LVU340
 1389 0078 0B69     		ldr	r3, [r1, #16]
2223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    return _Res(0, _M_rightmost());
 1390              		.loc 3 2223 4 view .LVU341
 1391 007a 9342     		cmp	r3, r2
 1392 007c 0AD0     		beq	.L62
 1393              	.LVL128:
 1394              	.LBB1051:
 1395              	.LBI1051:
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 1396              		.loc 3 285 7 is_stmt 1 view .LVU342
 1397              	.LBB1052:
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1398              		.loc 3 287 30 is_stmt 0 view .LVU343
 1399 007e 1046     		mov	r0, r2
 1400              	.LVL129:
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1401              		.loc 3 287 30 view .LVU344
 1402 0080 FFF7FEFF 		bl	_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
 1403              	.LVL130:
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 1404              		.loc 3 287 30 view .LVU345
 1405              	.LBE1052:
 1406              	.LBE1051:
 1407              	.LBB1053:
 1408              	.LBI1053:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1409              		.loc 7 385 7 is_stmt 1 view .LVU346
 1410              	.LBB1054:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1411              		.loc 7 386 20 is_stmt 0 view .LVU347
 1412 0084 0369     		ldr	r3, [r0, #16]
 1413              	.LVL131:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1414              		.loc 7 386 20 view .LVU348
 1415              	.LBE1054:
 1416              	.LBE1053:
ARM GAS  /tmp/cc27eAcR.s 			page 151


2225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	    {
 1417              		.loc 3 2225 9 view .LVU349
 1418 0086 9E42     		cmp	r6, r3
 1419 0088 0BDA     		bge	.L56
 1420              	.LVL132:
 1421              	.LBB1055:
 1422              	.LBI1055:
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(__x->_M_right); }
 1423              		.loc 3 797 7 is_stmt 1 view .LVU350
 1424              	.LBB1056:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1425              		.loc 3 798 53 is_stmt 0 view .LVU351
 1426 008a E368     		ldr	r3, [r4, #12]
 1427              	.LVL133:
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1428              		.loc 3 798 53 view .LVU352
 1429              	.LBE1056:
 1430              	.LBE1055:
2227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 		return _Res(0, __pos._M_node);
 1431              		.loc 3 2227 8 view .LVU353
 1432 008c 33B1     		cbz	r3, .L63
 1433              	.LVL134:
 1434              	.LBB1057:
 1435              	.LBI1057:
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 1436              		.loc 8 341 12 is_stmt 1 view .LVU354
 1437              	.LBB1058:
 1438              	.LBB1059:
 1439              	.LBB1060:
 1440              	.LBI1060:
 1441              		.loc 9 74 5 view .LVU355
 1442              		.loc 9 74 5 is_stmt 0 view .LVU356
 1443              	.LBE1060:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1444              		.loc 8 342 64 view .LVU357
 1445 008e 3860     		str	r0, [r7]
 1446              	.LVL135:
 1447              	.LBB1061:
 1448              	.LBI1061:
 1449              		.loc 9 74 5 is_stmt 1 view .LVU358
 1450              		.loc 9 74 5 is_stmt 0 view .LVU359
 1451              	.LBE1061:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1452              		.loc 8 342 64 view .LVU360
 1453 0090 7860     		str	r0, [r7, #4]
 1454              	.LBE1059:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1455              		.loc 8 342 68 view .LVU361
 1456 0092 E0E7     		b	.L44
 1457              	.LVL136:
 1458              	.L62:
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1459              		.loc 8 342 68 view .LVU362
 1460              	.LBE1058:
 1461              	.LBE1057:
 1462              	.LBB1062:
 1463              	.LBI1062:
ARM GAS  /tmp/cc27eAcR.s 			page 152


 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 1464              		.loc 8 325 18 is_stmt 1 view .LVU363
 1465              	.LBB1063:
 1466              	.LBB1064:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1467              		.loc 8 326 51 is_stmt 0 view .LVU364
 1468 0094 0022     		movs	r2, #0
 1469              	.LVL137:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1470              		.loc 8 326 51 view .LVU365
 1471 0096 0260     		str	r2, [r0]
 1472              	.LVL138:
 1473              	.LBB1065:
 1474              	.LBI1065:
 1475              		.loc 9 74 5 is_stmt 1 view .LVU366
 1476              		.loc 9 74 5 is_stmt 0 view .LVU367
 1477              	.LBE1065:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1478              		.loc 8 326 51 view .LVU368
 1479 0098 4360     		str	r3, [r0, #4]
 1480              	.LVL139:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1481              		.loc 8 326 51 view .LVU369
 1482 009a DCE7     		b	.L44
 1483              	.LVL140:
 1484              	.L63:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1485              		.loc 8 326 51 view .LVU370
 1486              	.LBE1064:
 1487              	.LBE1063:
 1488              	.LBE1062:
 1489              	.LBB1066:
 1490              	.LBI1066:
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(__x), second(std::forward<_U2>(__y)) { }
 1491              		.loc 8 325 18 is_stmt 1 view .LVU371
 1492              	.LBB1067:
 1493              	.LBB1068:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1494              		.loc 8 326 51 is_stmt 0 view .LVU372
 1495 009c 3B60     		str	r3, [r7]
 1496              	.LVL141:
 1497              	.LBB1069:
 1498              	.LBI1069:
 1499              		.loc 9 74 5 is_stmt 1 view .LVU373
 1500              		.loc 9 74 5 is_stmt 0 view .LVU374
 1501              	.LBE1069:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1502              		.loc 8 326 51 view .LVU375
 1503 009e 7C60     		str	r4, [r7, #4]
 1504              	.LVL142:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1505              		.loc 8 326 51 view .LVU376
 1506 00a0 D9E7     		b	.L44
 1507              	.L56:
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1508              		.loc 8 326 51 view .LVU377
 1509              	.LBE1068:
ARM GAS  /tmp/cc27eAcR.s 			page 153


 1510              	.LBE1067:
 1511              	.LBE1066:
2233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1512              		.loc 3 2233 41 view .LVU378
 1513 00a2 2A46     		mov	r2, r5
 1514 00a4 4146     		mov	r1, r8
 1515 00a6 3846     		mov	r0, r7
 1516 00a8 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_unique_posERS1
 1517              	.LVL143:
 1518 00ac D3E7     		b	.L44
 1519              	.LVL144:
 1520              	.L53:
2233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	}
 1521              		.loc 3 2233 41 view .LVU379
 1522              	.LBE1050:
 1523              	.LBB1070:
 1524              	.LBI1070:
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h ****        : first(std::forward<_U1>(__x)), second(__y) { }
 1525              		.loc 8 311 18 is_stmt 1 view .LVU380
 1526              	.LBB1071:
 1527              	.LBB1072:
 1528              	.LBB1073:
 1529              	.LBI1073:
 1530              		.loc 9 74 5 view .LVU381
 1531              		.loc 9 74 5 is_stmt 0 view .LVU382
 1532              	.LBE1073:
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1533              		.loc 8 312 51 view .LVU383
 1534 00ae 3A60     		str	r2, [r7]
 1535 00b0 0023     		movs	r3, #0
 1536 00b2 4360     		str	r3, [r0, #4]
 1537              	.LVL145:
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_pair.h **** 
 1538              		.loc 8 312 51 view .LVU384
 1539 00b4 CFE7     		b	.L44
 1540              	.LBE1072:
 1541              	.LBE1071:
 1542              	.LBE1070:
 1543              	.LBE1049:
 1544              	.LBE1082:
 1545              	.LBE1083:
 1546              		.cfi_endproc
 1547              	.LFE3834:
 1549              		.section	.text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE22_M_emplace_hint_
 1550              		.align	1
 1551              		.weak	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE22_M_emplace_hint_uniqueIJR
 1552              		.syntax unified
 1553              		.thumb
 1554              		.thumb_func
 1555              		.fpu fpv4-sp-d16
 1557              	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21pi
 1558              	.LVL146:
 1559              	.LFB3744:
2452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
 1560              		.loc 3 2452 7 is_stmt 1 view -0
 1561              		.cfi_startproc
 1562              		@ args = 4, pretend = 0, frame = 8
ARM GAS  /tmp/cc27eAcR.s 			page 154


 1563              		@ frame_needed = 0, uses_anonymous_args = 0
2452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
 1564              		.loc 3 2452 7 is_stmt 0 view .LVU386
 1565 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1566              	.LCFI14:
 1567              		.cfi_def_cfa_offset 20
 1568              		.cfi_offset 4, -20
 1569              		.cfi_offset 5, -16
 1570              		.cfi_offset 6, -12
 1571              		.cfi_offset 7, -8
 1572              		.cfi_offset 14, -4
 1573 0002 83B0     		sub	sp, sp, #12
 1574              	.LCFI15:
 1575              		.cfi_def_cfa_offset 32
 1576 0004 0546     		mov	r5, r0
 1577 0006 0E46     		mov	r6, r1
 1578              	.LVL147:
2452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
 1579              		.loc 3 2452 7 view .LVU387
 1580 0008 1F46     		mov	r7, r3
 1581              	.LVL148:
 1582              	.LBB1084:
 1583              	.LBI1084:
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1584              		.loc 3 628 2 is_stmt 1 view .LVU388
 1585              	.LBB1085:
 1586              	.LBB1086:
 1587              	.LBI1086:
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 1588              		.loc 3 579 7 view .LVU389
 1589              	.LBB1087:
 1590              	.LBI1087:
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { return __a.allocate(__n); }
 1591              		.loc 10 443 7 view .LVU390
 1592              	.LBB1088:
 1593              	.LBI1088:
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 1594              		.loc 5 102 7 view .LVU391
 1595              	.LBB1089:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1596              		.loc 5 114 41 is_stmt 0 view .LVU392
 1597 000a 1820     		movs	r0, #24
 1598              	.LVL149:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1599              		.loc 5 114 41 view .LVU393
 1600 000c FFF7FEFF 		bl	_Znwj
 1601              	.LVL150:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1602              		.loc 5 114 41 view .LVU394
 1603 0010 0446     		mov	r4, r0
 1604              	.LVL151:
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1605              		.loc 5 114 41 view .LVU395
 1606              	.LBE1089:
 1607              	.LBE1088:
 1608              	.LBE1087:
 1609              	.LBE1086:
ARM GAS  /tmp/cc27eAcR.s 			page 155


 1610              	.LBB1090:
 1611              	.LBI1090:
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1612              		.loc 3 609 2 is_stmt 1 view .LVU396
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	{
 1613              		.loc 3 609 2 is_stmt 0 view .LVU397
 1614              	.LBE1090:
 1615              	.LBE1085:
 1616              	.LBE1084:
 1617              		.loc 11 174 3 is_stmt 1 view .LVU398
 1618              	.LBB1111:
 1619              	.LBB1109:
 1620              	.LBB1107:
 1621              	.LBB1091:
 1622              	.LBI1091:
 1623              		.loc 10 482 2 view .LVU399
 1624              	.LBB1092:
 1625              	.LBI1092:
 1626              		.loc 5 144 2 view .LVU400
 1627              	.LBB1093:
 1628              	.LBI1093:
 1629              		.file 12 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // <tuple> -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // Copyright (C) 2007-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** /** @file include/tuple
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****  *  This is a Standard C++ Library header.
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****  */
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #ifndef _GLIBCXX_TUPLE
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #define _GLIBCXX_TUPLE 1
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #pragma GCC system_header
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus < 201103L
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** # include <bits/c++0x_warning.h>
ARM GAS  /tmp/cc27eAcR.s 			page 156


  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #else
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #include <utility>
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #include <array>
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #include <bits/uses_allocator.h>
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #include <bits/invoke.h>
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** {
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    *  @addtogroup utilities
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    *  @{
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     class tuple;
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp>
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __is_empty_non_tuple : is_empty<_Tp> { };
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Using EBO for elements that are tuples causes ambiguous base errors.
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _El0, typename... _El>
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __is_empty_non_tuple<tuple<_El0, _El...>> : false_type { };
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Use the Empty Base-class Optimization for empty, non-final types.
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp>
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     using __empty_not_final
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     = typename conditional<__is_final(_Tp), false_type,
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			   __is_empty_non_tuple<_Tp>>::type;
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head,
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	   bool = __empty_not_final<_Head>::value>
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Head_base;
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head>
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Head_base<_Idx, _Head, true>
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : public _Head
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base()
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Head() { }
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(const _Head& __h)
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Head(__h) { }
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(const _Head_base&) = default;
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(_Head_base&&) = default;
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Head_base(_UHead&& __h)
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(std::forward<_UHead>(__h)) { }
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Head() { }
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
ARM GAS  /tmp/cc27eAcR.s 			page 157


  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(allocator_arg, *__a._M_a) { }
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(*__a._M_a) { }
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(std::forward<_UHead>(__uhead)) { }
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead)) { }
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Head(std::forward<_UHead>(__uhead), *__a._M_a) { }
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Head&
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(_Head_base& __b) noexcept { return __b; }
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Head&
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b; }
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head>
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Head_base<_Idx, _Head, false>
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base()
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl() { }
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(const _Head& __h)
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl(__h) { }
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(const _Head_base&) = default;
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Head_base(_Head_base&&) = default;
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Head_base(_UHead&& __h)
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__h)) { }
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Head_base(allocator_arg_t, __uses_alloc0)
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl() { }
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc1<_Alloc> __a)
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(allocator_arg, *__a._M_a) { }
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(allocator_arg_t, __uses_alloc2<_Alloc> __a)
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(*__a._M_a) { }
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc0, _UHead&& __uhead)
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__uhead)) { }
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/cc27eAcR.s 			page 158


 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc1<_Alloc> __a, _UHead&& __uhead)
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(allocator_arg, *__a._M_a, std::forward<_UHead>(__uhead))
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Head_base(__uses_alloc2<_Alloc> __a, _UHead&& __uhead)
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _M_head_impl(std::forward<_UHead>(__uhead), *__a._M_a) { }
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Head&
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Head&
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Head _M_head_impl;
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Contains the actual implementation of the @c tuple template, stored
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * as a recursive inheritance hierarchy from the first element (most
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * derived class) to the last (least derived class). The @c Idx
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * parameter gives the 0-based index of the element stored at this
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * point in the hierarchy; we use it to implement a constant-time
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * get() operation.
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename... _Elements>
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Tuple_impl;
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Recursive tuple implementation. Here we store the @c Head element
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * and derive from a @c Tuple_impl containing the remaining elements
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * (which contains the @c Tail).
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head, typename... _Tail>
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Tuple_impl<_Idx, _Head, _Tail...>
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : public _Tuple_impl<_Idx + 1, _Tail...>,
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       private _Head_base<_Idx, _Head>
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<std::size_t, typename...> friend class _Tuple_impl;
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Tuple_impl<_Idx + 1, _Tail...> _Inherited;
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Head_base<_Idx, _Head> _Base;
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Head&
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Head&
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Inherited&
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_tail(_Tuple_impl& __t) noexcept { return __t; }
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Inherited&
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_tail(const _Tuple_impl& __t) noexcept { return __t; }
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl()
ARM GAS  /tmp/cc27eAcR.s 			page 159


 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(), _Base() { }
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       explicit
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl(const _Head& __head, const _Tail&... __tail)
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(__tail...), _Base(__head) { }
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead, typename... _UTail, typename = typename
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                enable_if<sizeof...(_Tail) == sizeof...(_UTail)>::type>
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_UTail>(__tail)...),
 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(std::forward<_UHead>(__head)) { }
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl(const _Tuple_impl&) = default;
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // 2729. Missing SFINAE on std::pair::operator=
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Tuple_impl& operator=(const _Tuple_impl&) = delete;
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Tuple_impl(_Tuple_impl&& __in)
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__and_<is_nothrow_move_constructible<_Head>,
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	              is_nothrow_move_constructible<_Inherited>>::value)
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(std::move(_M_tail(__in))),
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Base(std::forward<_Head>(_M_head(__in))) { }
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UElements...>& __in)
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(_Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead, typename... _UTails>
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::move
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(std::forward<_UHead>
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a),
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           _Base(__tag, __use_alloc<_Head>(__a)) { }
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		    const _Head& __head, const _Tail&... __tail)
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __tail...),
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead, typename... _UTail,
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename = typename enable_if<sizeof...(_Tail)
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					     == sizeof...(_UTail)>::type>
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _UHead&& __head, _UTail&&... __tail)
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_UTail>(__tail)...),
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	        std::forward<_UHead>(__head)) { }
ARM GAS  /tmp/cc27eAcR.s 			page 160


 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            const _Tuple_impl& __in)
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, _M_tail(__in)),
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _Tuple_impl&& __in)
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::move(_M_tail(__in))),
 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	        std::forward<_Head>(_M_head(__in))) { }
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename... _UElements>
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            const _Tuple_impl<_Idx, _UElements...>& __in)
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     _Tuple_impl<_Idx, _UElements...>::_M_tail(__in)),
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		_Tuple_impl<_Idx, _UElements...>::_M_head(__in)) { }
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead, typename... _UTails>
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::move
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in))),
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 std::forward<_UHead>
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in))) { }
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         void
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _M_assign(const _Tuple_impl<_Idx, _UElements...>& __in)
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_head(*this) = _Tuple_impl<_Idx, _UElements...>::_M_head(__in);
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_tail(*this)._M_assign(
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      _Tuple_impl<_Idx, _UElements...>::_M_tail(__in));
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead, typename... _UTails>
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         void
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _M_assign(_Tuple_impl<_Idx, _UHead, _UTails...>&& __in)
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_head(*this) = std::forward<_UHead>
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	    (_Tuple_impl<_Idx, _UHead, _UTails...>::_M_head(__in));
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_tail(*this)._M_assign(
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      std::move(_Tuple_impl<_Idx, _UHead, _UTails...>::_M_tail(__in)));
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     protected:
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_swap(_Tuple_impl& __in)
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	using std::swap;
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	swap(_M_head(*this), _M_head(__in));
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Inherited::_M_swap(_M_tail(__in));
ARM GAS  /tmp/cc27eAcR.s 			page 161


 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Basis case of inheritance recursion.
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Idx, typename _Head>
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct _Tuple_impl<_Idx, _Head>
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : private _Head_base<_Idx, _Head>
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<std::size_t, typename...> friend class _Tuple_impl;
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Head_base<_Idx, _Head> _Base;
 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr _Head&
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr const _Head&
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl()
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Base() { }
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       explicit
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl(const _Head& __head)
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Base(__head) { }
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(_UHead&& __head)
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(std::forward<_UHead>(__head)) { }
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr _Tuple_impl(const _Tuple_impl&) = default;
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // 2729. Missing SFINAE on std::pair::operator=
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Tuple_impl& operator=(const _Tuple_impl&) = delete;
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _Tuple_impl(_Tuple_impl&& __in)
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(is_nothrow_move_constructible<_Head>::value)
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Base(std::forward<_Head>(_M_head(__in))) { }
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(const _Tuple_impl<_Idx, _UHead>& __in)
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr _Tuple_impl(_Tuple_impl<_Idx, _UHead>&& __in)
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a)
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__tag, __use_alloc<_Head>(__a)) { }
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		    const _Head& __head)
ARM GAS  /tmp/cc27eAcR.s 			page 162


 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), __head) { }
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _UHead&& __head)
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	        std::forward<_UHead>(__head)) { }
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            const _Tuple_impl& __in)
 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a), _M_head(__in)) { }
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _Tuple_impl&& __in)
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	        std::forward<_Head>(_M_head(__in))) { }
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            const _Tuple_impl<_Idx, _UHead>& __in)
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _Head>(__a),
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		_Tuple_impl<_Idx, _UHead>::_M_head(__in)) { }
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _UHead>
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_Tuple_impl(allocator_arg_t __tag, const _Alloc& __a,
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	            _Tuple_impl<_Idx, _UHead>&& __in)
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Base(__use_alloc<_Head, _Alloc, _UHead>(__a),
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in)))
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         void
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _M_assign(const _Tuple_impl<_Idx, _UHead>& __in)
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_head(*this) = _Tuple_impl<_Idx, _UHead>::_M_head(__in);
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _UHead>
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         void
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _M_assign(_Tuple_impl<_Idx, _UHead>&& __in)
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  _M_head(*this)
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	    = std::forward<_UHead>(_Tuple_impl<_Idx, _UHead>::_M_head(__in));
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     protected:
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _M_swap(_Tuple_impl& __in)
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	using std::swap;
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	swap(_M_head(*this), _M_head(__in));
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Concept utility functions, reused in conditionally-explicit
ARM GAS  /tmp/cc27eAcR.s 			page 163


 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // constructors.
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<bool, typename... _Elements>
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   struct _TC
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   {
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ConstructibleTuple()
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __and_<is_constructible<_Elements, const _UElements&>...>::value;
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ImplicitlyConvertibleTuple()
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __and_<is_convertible<const _UElements&, _Elements>...>::value;
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _MoveConstructibleTuple()
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __and_<is_constructible<_Elements, _UElements&&>...>::value;
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ImplicitlyMoveConvertibleTuple()
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __and_<is_convertible<_UElements&&, _Elements>...>::value;
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename _SrcTuple>
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _NonNestedTuple()
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return  __and_<__not_<is_same<tuple<_Elements...>,
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				    __remove_cvref_t<_SrcTuple>>>,
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                      __not_<is_convertible<_SrcTuple, _Elements...>>,
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                      __not_<is_constructible<_Elements..., _SrcTuple>>
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****               >::value;
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _NotSameTuple()
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return  __not_<is_same<tuple<_Elements...>,
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			     __remove_cvref_t<_UElements>...>>::value;
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   };
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   struct _TC<false, _Elements...>
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   {
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ConstructibleTuple()
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return false;
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ImplicitlyConvertibleTuple()
ARM GAS  /tmp/cc27eAcR.s 			page 164


 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return false;
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _MoveConstructibleTuple()
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return false;
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _ImplicitlyMoveConvertibleTuple()
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return false;
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _NonNestedTuple()
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return true;
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _UElements>
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     static constexpr bool _NotSameTuple()
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return true;
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   };
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Primary class template, tuple
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     class tuple : public _Tuple_impl<0, _Elements...>
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Tuple_impl<0, _Elements...> _Inherited;
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Used for constraining the default constructor so
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // that it becomes dependent on the constraints.
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy>
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       struct _TC2
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         static constexpr bool _DefaultConstructibleTuple()
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           return __and_<is_default_constructible<_Elements>...>::value;
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         }
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         static constexpr bool _ImplicitlyDefaultConstructibleTuple()
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****           return __and_<__is_implicitly_default_constructible<_Elements>...>
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****             ::value;
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         }
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       };
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<sizeof...(_UElements) == sizeof...(_Elements), bool>
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__assignable()
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ return __and_<is_assignable<_Elements&, _UElements>...>::value; }
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/cc27eAcR.s 			page 165


 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr bool __nothrow_assignable()
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	    __and_<is_nothrow_assignable<_Elements&, _UElements>...>::value;
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     public:
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void,
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<_TC2<_Dummy>::
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                     _ImplicitlyDefaultConstructibleTuple(),
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                   bool>::type = true>
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple()
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited() { }
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void,
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<_TC2<_Dummy>::
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                     _DefaultConstructibleTuple()
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                   &&
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                   !_TC2<_Dummy>::
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                     _ImplicitlyDefaultConstructibleTuple(),
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                   bool>::type = false>
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       explicit constexpr tuple()
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited() { }
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking _Elements...
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy> using _TCC =
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _TC<is_same<_Dummy, void>::value,
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****             _Elements...>;
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void,
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_Elements...>()
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && _TCC<_Dummy>::template
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>()
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && (sizeof...(_Elements) >= 1),
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=true>
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const _Elements&... __elements)
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(__elements...) { }
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void,
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_Elements...>()
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && !_TCC<_Dummy>::template
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>()
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && (sizeof...(_Elements) >= 1),
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=false>
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       explicit constexpr tuple(const _Elements&... __elements)
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(__elements...) { }
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking _UElements...
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements> using _TMC =
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   _TC<(sizeof...(_Elements) == sizeof...(_UElements))
ARM GAS  /tmp/cc27eAcR.s 			page 166


 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		      && (_TC<(sizeof...(_UElements)==1), _Elements...>::
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			  template _NotSameTuple<_UElements...>()),
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                       _Elements...>;
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking tuple<_UElements...>
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements> using _TMCT =
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   _TC<(sizeof...(_Elements) == sizeof...(_UElements))
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		      && !is_same<tuple<_Elements...>,
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				  tuple<_UElements...>>::value,
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                       _Elements...>;
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       enable_if<
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		  _TMC<_UElements...>::template
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC<_UElements...>::template
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && (sizeof...(_Elements) >= 1),
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(_UElements&&... __elements)
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(std::forward<_UElements>(__elements)...) { }
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		  _TMC<_UElements...>::template
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC<_UElements...>::template
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && (sizeof...(_Elements) >= 1),
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(_UElements&&... __elements)
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_UElements>(__elements)...) {	}
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple(const tuple&) = default;
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple(tuple&&) = default;
 1630              		.loc 12 642 17 view .LVU401
 1631              	.LBB1094:
 1632              	.LBI1094:
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(is_nothrow_move_constructible<_Head>::value)
 1633              		.loc 12 358 7 view .LVU402
 1634              	.LBB1095:
 1635              	.LBI1095:
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1636              		.loc 12 334 7 view .LVU403
 1637              	.LBB1096:
 1638              	.LBI1096:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1639              		.loc 12 160 7 view .LVU404
 1640              	.LBB1097:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1641              		.loc 12 160 54 is_stmt 0 view .LVU405
 1642 0012 3B68     		ldr	r3, [r7]
 1643              	.LVL152:
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1644              		.loc 12 160 54 view .LVU406
ARM GAS  /tmp/cc27eAcR.s 			page 167


 1645              	.LBE1097:
 1646              	.LBE1096:
 1647              	.LBE1095:
 1648              	.LBB1098:
 1649              	.LBI1098:
 1650              		.loc 9 74 5 is_stmt 1 view .LVU407
 1651              		.loc 9 74 5 is_stmt 0 view .LVU408
 1652              	.LBE1098:
 1653              	.LBB1099:
 1654              	.LBI1099:
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl(__h) { }
 1655              		.loc 12 125 17 is_stmt 1 view .LVU409
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl(__h) { }
 1656              		.loc 12 125 17 is_stmt 0 view .LVU410
 1657              	.LBE1099:
 1658              	.LBE1094:
 1659              	.LBE1093:
 1660              	.LBE1092:
 1661              	.LBE1091:
 1662              	.LBE1107:
 1663              	.LBE1109:
 1664              	.LBE1111:
 1665              		.loc 11 174 3 is_stmt 1 view .LVU411
 1666              	.LBB1112:
 1667              	.LBB1110:
 1668              	.LBB1108:
 1669              	.LBB1106:
 1670              	.LBB1105:
 1671              	.LBB1100:
 1672              	.LBI1100:
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking tuples
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // must avoid creating temporaries.
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy> using _TNTC =
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _TC<is_same<_Dummy, void>::value && sizeof...(_Elements) == 1,
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****             _Elements...>;
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_UElements...>()
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMCT<_UElements...>::template
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const tuple<_UElements...>& __in)
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         { }
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_UElements...>()
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMCT<_UElements...>::template
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
ARM GAS  /tmp/cc27eAcR.s 			page 168


 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(const tuple<_UElements...>& __in)
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         { }
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMCT<_UElements...>::template
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(tuple<_UElements...>&& __in)
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements, typename _Dummy = void, typename
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMCT<_UElements...>::template
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(tuple<_UElements...>&& __in)
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(static_cast<_Tuple_impl<0, _UElements...>&&>(__in)) { }
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Allocator-extended constructors.
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a)
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a) { }
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_Elements...>()
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && _TCC<_Dummy>::template
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>(),
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=true>
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const _Elements&... __elements)
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __elements...) { }
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_Elements...>()
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && !_TCC<_Dummy>::template
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_Elements...>(),
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=false>
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                        const _Elements&... __elements)
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __elements...) { }
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename... _UElements, typename
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC<_UElements...>::template
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
ARM GAS  /tmp/cc27eAcR.s 			page 169


 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC<_UElements...>::template
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      _UElements&&... __elements)
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****        	{ }
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename... _UElements, typename
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC<_UElements...>::template
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC<_UElements...>::template
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>(),
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      _UElements&&... __elements)
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_UElements>(__elements)...)
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         { }
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       typename... _UElements, typename
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_UElements...>()
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMCT<_UElements...>::template
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_UElements...>& __in)
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       typename... _UElements, typename
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_UElements...>()
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMCT<_UElements...>::template
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_UElements...>()
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<const tuple<_UElements...>&>(),
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_UElements...>& __in)
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<const _Tuple_impl<0, _UElements...>&>(__in))
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/cc27eAcR.s 			page 170


 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       typename... _UElements, typename
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMCT<_UElements...>::template
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=true>
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      tuple<_UElements...>&& __in)
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       typename... _UElements, typename
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMCT<_UElements...>::template
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_UElements...>()
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMCT<_UElements...>::template
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_UElements...>()
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TNTC<_Dummy>::template
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _NonNestedTuple<tuple<_UElements...>&&>(),
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         bool>::type=false>
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      tuple<_UElements...>&& __in)
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<_Tuple_impl<0, _UElements...>&&>(__in))
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // tuple assignment
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple&
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(typename conditional<__assignable<const _Elements&...>(),
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     const tuple&,
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     const __nonesuch_no_braces&>::type __in)
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__nothrow_assignable<const _Elements&...>())
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	this->_M_assign(__in);
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return *this;
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple&
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(typename conditional<__assignable<_Elements...>(),
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     tuple&&,
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     __nonesuch_no_braces&&>::type __in)
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__nothrow_assignable<_Elements...>())
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	this->_M_assign(std::move(__in));
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return *this;
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<const _UElements&...>(), tuple&>
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(const tuple<_UElements...>& __in)
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<const _UElements&...>())
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
ARM GAS  /tmp/cc27eAcR.s 			page 171


 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_assign(__in);
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _UElements>
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<_UElements...>(), tuple&>
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(tuple<_UElements...>&& __in)
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<_UElements...>())
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_assign(std::move(__in));
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // tuple swap
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void
 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       swap(tuple& __in)
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__and_<__is_nothrow_swappable<_Elements>...>::value)
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       { _Inherited::_M_swap(__in); }
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cpp_deduction_guides >= 201606
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _UTypes>
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(_UTypes...) -> tuple<_UTypes...>;
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _T1, typename _T2>
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(pair<_T1, _T2>) -> tuple<_T1, _T2>;
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Alloc, typename... _UTypes>
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(allocator_arg_t, _Alloc, _UTypes...) -> tuple<_UTypes...>;
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Alloc, typename _T1, typename _T2>
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(allocator_arg_t, _Alloc, pair<_T1, _T2>) -> tuple<_T1, _T2>;
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Alloc, typename... _UTypes>
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple(allocator_arg_t, _Alloc, tuple<_UTypes...>) -> tuple<_UTypes...>;
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Explicit specialization, zero-element tuple.
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<>
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     class tuple<>
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     public:
 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void swap(tuple&) noexcept { /* no-op */ }
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // We need the default since we're going to define no-op
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // allocator constructors.
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple() = default;
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // No-op allocator constructors.
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t, const _Alloc&) { }
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t, const _Alloc&, const tuple&) { }
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Partial specialization, 2-element tuple.
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Includes construction and assignment from a pair.
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _T1, typename _T2>
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     class tuple<_T1, _T2> : public _Tuple_impl<0, _T1, _T2>
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Tuple_impl<0, _T1, _T2> _Inherited;
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
ARM GAS  /tmp/cc27eAcR.s 			page 172


 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr bool __assignable()
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return __and_<is_assignable<_T1&, _U1>,
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			is_assignable<_T2&, _U2>>::value;
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr bool __nothrow_assignable()
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return __and_<is_nothrow_assignable<_T1&, _U1>,
 908:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			is_nothrow_assignable<_T2&, _U2>>::value;
 909:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
 910:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 911:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     public:
 912:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template <typename _U1 = _T1,
 913:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 typename _U2 = _T2,
 914:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 typename enable_if<__and_<
 915:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                      __is_implicitly_default_constructible<_U1>,
 916:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                      __is_implicitly_default_constructible<_U2>>
 917:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                                    ::value, bool>::type = true>
 918:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	constexpr tuple()
 919:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited() { }
 920:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 921:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template <typename _U1 = _T1,
 922:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 typename _U2 = _T2,
 923:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                 typename enable_if<
 924:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   __and_<
 925:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     is_default_constructible<_U1>,
 926:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     is_default_constructible<_U2>,
 927:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     __not_<
 928:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                       __and_<__is_implicitly_default_constructible<_U1>,
 929:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                              __is_implicitly_default_constructible<_U2>>>>
 930:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   ::value, bool>::type = false>
 931:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit constexpr tuple()
 932:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited() { }
 933:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 934:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking _T1, _T2
 935:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
 936:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy> using _TCC =
 937:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _TC<is_same<_Dummy, void>::value, _T1, _T2>;
 938:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 939:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void, typename
 940:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                enable_if<_TCC<_Dummy>::template
 941:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                            _ConstructibleTuple<_T1, _T2>()
 942:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                          && _TCC<_Dummy>::template
 943:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                            _ImplicitlyConvertibleTuple<_T1, _T2>(),
 944:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
 945:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const _T1& __a1, const _T2& __a2)
 946:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(__a1, __a2) { }
 947:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 948:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Dummy = void, typename
 949:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                enable_if<_TCC<_Dummy>::template
 950:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                            _ConstructibleTuple<_T1, _T2>()
 951:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                          && !_TCC<_Dummy>::template
 952:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                            _ImplicitlyConvertibleTuple<_T1, _T2>(),
 953:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
 954:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(const _T1& __a1, const _T2& __a2)
ARM GAS  /tmp/cc27eAcR.s 			page 173


 955:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         : _Inherited(__a1, __a2) { }
 956:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 957:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Shortcut for the cases where constructors taking _U1, _U2
 958:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // need to be constrained.
 959:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       using _TMC = _TC<true, _T1, _T2>;
 960:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 961:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
 962:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
 963:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
 964:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
 965:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
 966:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	          && !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,
 967:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
 968:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(_U1&& __a1, _U2&& __a2)
 969:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 970:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 971:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
 972:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
 973:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
 974:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
 975:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>()
 976:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	          && !is_same<__remove_cvref_t<_U1>, allocator_arg_t>::value,
 977:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
 978:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(_U1&& __a1, _U2&& __a2)
 979:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 980:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 981:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple(const tuple&) = default;
 982:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 983:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       constexpr tuple(tuple&&) = default;
 984:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 985:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
 986:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
 987:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
 988:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
 989:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
 990:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
 991:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const tuple<_U1, _U2>& __in)
 992:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }
 993:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 994:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
 995:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
 996:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
 997:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
 998:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
 999:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1000:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(const tuple<_U1, _U2>& __in)
1001:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in)) { }
1002:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1003:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1004:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1005:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1007:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1008:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1009:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(tuple<_U1, _U2>&& __in)
1010:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }
1011:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/cc27eAcR.s 			page 174


1012:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1013:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1016:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1017:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1018:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(tuple<_U1, _U2>&& __in)
1019:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in)) { }
1020:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1021:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1022:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1023:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1024:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1025:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1026:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1027:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(const pair<_U1, _U2>& __in)
1028:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__in.first, __in.second) { }
1029:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1030:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1031:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1032:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1033:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1034:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1035:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1036:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(const pair<_U1, _U2>& __in)
1037:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__in.first, __in.second) { }
1038:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1039:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1040:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1041:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1042:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1043:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1044:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1045:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         constexpr tuple(pair<_U1, _U2>&& __in)
1046:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_U1>(__in.first),
1047:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     std::forward<_U2>(__in.second)) { }
1048:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1049:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2, typename
1050:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1051:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1052:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1053:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1054:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1055:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit constexpr tuple(pair<_U1, _U2>&& __in)
1056:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(std::forward<_U1>(__in.first),
1057:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     std::forward<_U2>(__in.second)) { }
1058:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1059:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       // Allocator-extended constructors.
1060:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1061:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
1062:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a)
1063:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a) { }
1064:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1065:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
1066:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
1067:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
1068:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_T1, _T2>()
ARM GAS  /tmp/cc27eAcR.s 			page 175


1069:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && _TCC<_Dummy>::template
1070:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_T1, _T2>(),
1071:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=true>
1072:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1073:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
1074:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const _T1& __a1, const _T2& __a2)
1075:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __a1, __a2) { }
1076:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1077:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _Dummy = void,
1078:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                typename enable_if<
1079:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  _TCC<_Dummy>::template
1080:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ConstructibleTuple<_T1, _T2>()
1081:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                  && !_TCC<_Dummy>::template
1082:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                    _ImplicitlyConvertibleTuple<_T1, _T2>(),
1083:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                bool>::type=false>
1084:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1085:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1086:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const _T1& __a1, const _T2& __a2)
1087:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __a1, __a2) { }
1088:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1089:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1090:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1091:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1092:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1093:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1094:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1095:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, _U1&& __a1, _U2&& __a2)
1096:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__a1),
1097:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             std::forward<_U2>(__a2)) { }
1098:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1099:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                        _U1&& __a1, _U2&& __a2)
1107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__a1),
1108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             std::forward<_U2>(__a2)) { }
1109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
1111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, const tuple& __in)
1112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<const _Inherited&>(__in)) { }
1113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc>
1115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple&& __in)
1116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<_Inherited&&>(__in)) { }
1117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a,
1125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_U1, _U2>& __in)
ARM GAS  /tmp/cc27eAcR.s 			page 176


1126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
1127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
1128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
1129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_U1, _U2>& __in)
1138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a,
1139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	             static_cast<const _Tuple_impl<0, _U1, _U2>&>(__in))
1140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
1141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	tuple(allocator_arg_t __tag, const _Alloc& __a, tuple<_U1, _U2>&& __in)
1149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
1150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
1151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                        tuple<_U1, _U2>&& __in)
1160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, static_cast<_Tuple_impl<0, _U1, _U2>&&>(__in))
1161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{ }
1162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         tuple(allocator_arg_t __tag, const _Alloc& __a,
1170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const pair<_U1, _U2>& __in)
1171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __in.first, __in.second) { }
1172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ConstructibleTuple<_U1, _U2>()
1176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyConvertibleTuple<_U1, _U2>(),
1178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const pair<_U1, _U2>& __in)
1181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, __in.first, __in.second) { }
1182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/cc27eAcR.s 			page 177


1183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && _TMC::template
1187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = true>
1189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         tuple(allocator_arg_t __tag, const _Alloc& __a, pair<_U1, _U2>&& __in)
1190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__in.first),
1191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     std::forward<_U2>(__in.second)) { }
1192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _Alloc, typename _U1, typename _U2, typename
1194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         enable_if<_TMC::template
1195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _MoveConstructibleTuple<_U1, _U2>()
1196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                   && !_TMC::template
1197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                     _ImplicitlyMoveConvertibleTuple<_U1, _U2>(),
1198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	bool>::type = false>
1199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         explicit tuple(allocator_arg_t __tag, const _Alloc& __a,
1200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****                        pair<_U1, _U2>&& __in)
1201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	: _Inherited(__tag, __a, std::forward<_U1>(__in.first),
1202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		     std::forward<_U2>(__in.second)) { }
1203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple&
1205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(typename conditional<__assignable<const _T1&, const _T2&>(),
1206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     const tuple&,
1207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     const __nonesuch_no_braces&>::type __in)
1208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__nothrow_assignable<const _T1&, const _T2&>())
1209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
1210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	this->_M_assign(__in);
1211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return *this;
1212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
1213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       tuple&
1215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(typename conditional<__assignable<_T1, _T2>(),
1216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     tuple&&,
1217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 				     __nonesuch_no_braces&&>::type __in)
1218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__nothrow_assignable<_T1, _T2>())
1219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
1220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	this->_M_assign(std::move(__in));
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return *this;
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
1223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
1225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
1226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(const tuple<_U1, _U2>& __in)
1227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<const _U1&, const _U2&>())
1228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
1229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_assign(__in);
1230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
1231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
1234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<_U1, _U2>(), tuple&>
1235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(tuple<_U1, _U2>&& __in)
1236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<_U1, _U2>())
1237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
1238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_assign(std::move(__in));
1239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
ARM GAS  /tmp/cc27eAcR.s 			page 178


1240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
1243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<const _U1&, const _U2&>(), tuple&>
1244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(const pair<_U1, _U2>& __in)
1245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<const _U1&, const _U2&>())
1246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
1247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_head(*this) = __in.first;
1248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_tail(*this)._M_head(*this) = __in.second;
1249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
1250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename _U1, typename _U2>
1253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__enable_if_t<__assignable<_U1, _U2>(), tuple&>
1254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	operator=(pair<_U1, _U2>&& __in)
1255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	noexcept(__nothrow_assignable<_U1, _U2>())
1256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	{
1257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_head(*this) = std::forward<_U1>(__in.first);
1258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  this->_M_tail(*this)._M_head(*this) = std::forward<_U2>(__in.second);
1259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return *this;
1260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       void
1263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       swap(tuple& __in)
1264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       noexcept(__and_<__is_nothrow_swappable<_T1>,
1265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 		      __is_nothrow_swappable<_T2>>::value)
1266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       { _Inherited::_M_swap(__in); }
1267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// class tuple_size
1271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct tuple_size<tuple<_Elements...>>
1273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : public integral_constant<std::size_t, sizeof...(_Elements)> { };
1274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus > 201402L
1276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp>
1277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;
1278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
1279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
1281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Recursive case for tuple_element: strip off the first element in
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * the tuple and retrieve the (i-1)th element of the remaining tuple.
1283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
1284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename _Head, typename... _Tail>
1285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct tuple_element<__i, tuple<_Head, _Tail...> >
1286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : tuple_element<__i - 1, tuple<_Tail...> > { };
1287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
1289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Basis case for tuple_element: The first element is the one we're seeking.
1290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
1291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Head, typename... _Tail>
1292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct tuple_element<0, tuple<_Head, _Tail...> >
1293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef _Head type;
1295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/cc27eAcR.s 			page 179


1297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /**
1298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    * Error case for tuple_element: invalid index.
1299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****    */
1300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<size_t __i>
1301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct tuple_element<__i, tuple<>>
1302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static_assert(__i < tuple_size<tuple<>>::value,
1304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  "tuple index is in range");
1305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename _Head, typename... _Tail>
1308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr _Head&
1309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename _Head, typename... _Tail>
1313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const _Head&
1314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a reference to the ith element of a tuple.
1318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename... _Elements>
1319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr __tuple_element_t<__i, tuple<_Elements...>>&
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(tuple<_Elements...>& __t) noexcept
1321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
1322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a const reference to the ith element of a const tuple.
1324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename... _Elements>
1325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
1326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(const tuple<_Elements...>& __t) noexcept
1327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
1328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return an rvalue reference to the ith element of a tuple rvalue.
1330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename... _Elements>
1331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr __tuple_element_t<__i, tuple<_Elements...>>&&
1332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(tuple<_Elements...>&& __t) noexcept
1333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
1335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return std::forward<__element_type&&>(std::get<__i>(__t));
1336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a const rvalue reference to the ith element of a const tuple rvalue.
1339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t __i, typename... _Elements>
1340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const __tuple_element_t<__i, tuple<_Elements...>>&&
1341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(const tuple<_Elements...>&& __t) noexcept
1342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef __tuple_element_t<__i, tuple<_Elements...>> __element_type;
1344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return std::forward<const __element_type&&>(std::get<__i>(__t));
1345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus >= 201402L
1348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #define __cpp_lib_tuples_by_type 201304
1350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Head, size_t __i, typename... _Tail>
1352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr _Head&
1353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     __get_helper2(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
ARM GAS  /tmp/cc27eAcR.s 			page 180


1354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Head, size_t __i, typename... _Tail>
1357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const _Head&
1358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     __get_helper2(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
1359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
1360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a reference to the unique element of type _Tp of a tuple.
1362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp, typename... _Types>
1363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr _Tp&
1364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(tuple<_Types...>& __t) noexcept
1365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper2<_Tp>(__t); }
1366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a reference to the unique element of type _Tp of a tuple rvalue.
1368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp, typename... _Types>
1369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr _Tp&&
1370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(tuple<_Types...>&& __t) noexcept
1371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::forward<_Tp&&>(std::__get_helper2<_Tp>(__t)); }
1372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a const reference to the unique element of type _Tp of a tuple.
1374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp, typename... _Types>
1375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const _Tp&
1376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(const tuple<_Types...>& __t) noexcept
1377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper2<_Tp>(__t); }
1378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Return a const reference to the unique element of type _Tp of
1380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// a const tuple rvalue.
1381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template <typename _Tp, typename... _Types>
1382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr const _Tp&&
1383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     get(const tuple<_Types...>&& __t) noexcept
1384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::forward<const _Tp&&>(std::__get_helper2<_Tp>(__t)); }
1385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
1386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // This class performs the comparison operations on tuples
1388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp, typename _Up, size_t __i, size_t __size>
1389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_compare
1390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr bool
1392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       __eq(const _Tp& __t, const _Up& __u)
1393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
1394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return bool(std::get<__i>(__t) == std::get<__i>(__u))
1395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  && __tuple_compare<_Tp, _Up, __i + 1, __size>::__eq(__t, __u);
1396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
1397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr bool
1399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       __less(const _Tp& __t, const _Up& __u)
1400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       {
1401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	return bool(std::get<__i>(__t) < std::get<__i>(__u))
1402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  || (!bool(std::get<__i>(__u) < std::get<__i>(__t))
1403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      && __tuple_compare<_Tp, _Up, __i + 1, __size>::__less(__t, __u));
1404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       }
1405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp, typename _Up, size_t __size>
1408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_compare<_Tp, _Up, __size, __size>
1409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr bool
ARM GAS  /tmp/cc27eAcR.s 			page 181


1411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       __eq(const _Tp&, const _Up&) { return true; }
1412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static constexpr bool
1414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       __less(const _Tp&, const _Up&) { return false; }
1415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator==(const tuple<_TElements...>& __t,
1420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       const tuple<_UElements...>& __u)
1421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static_assert(sizeof...(_TElements) == sizeof...(_UElements),
1423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  "tuple objects can only be compared if they have equal sizes.");
1424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       using __compare = __tuple_compare<tuple<_TElements...>,
1425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					tuple<_UElements...>,
1426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					0, sizeof...(_TElements)>;
1427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __compare::__eq(__t, __u);
1428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator<(const tuple<_TElements...>& __t,
1433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_UElements...>& __u)
1434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       static_assert(sizeof...(_TElements) == sizeof...(_UElements),
1436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  "tuple objects can only be compared if they have equal sizes.");
1437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       using __compare = __tuple_compare<tuple<_TElements...>,
1438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					tuple<_UElements...>,
1439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					0, sizeof...(_TElements)>;
1440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __compare::__less(__t, __u);
1441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator!=(const tuple<_TElements...>& __t,
1446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       const tuple<_UElements...>& __u)
1447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return !(__t == __u); }
1448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator>(const tuple<_TElements...>& __t,
1452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	      const tuple<_UElements...>& __u)
1453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return __u < __t; }
1454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator<=(const tuple<_TElements...>& __t,
1458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       const tuple<_UElements...>& __u)
1459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return !(__u < __t); }
1460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _TElements, typename... _UElements>
1462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr bool
1463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     operator>=(const tuple<_TElements...>& __t,
1464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	       const tuple<_UElements...>& __u)
1465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return !(__t < __u); }
1466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // NB: DR 705.
ARM GAS  /tmp/cc27eAcR.s 			page 182


1468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr tuple<typename __decay_and_strip<_Elements>::__type...>
1470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     make_tuple(_Elements&&... __args)
1471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef tuple<typename __decay_and_strip<_Elements>::__type...>
1473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	__result_type;
1474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __result_type(std::forward<_Elements>(__args)...);
1475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // 2275. Why is forward_as_tuple not constexpr?
1479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// std::forward_as_tuple
1480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr tuple<_Elements&&...>
1482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     forward_as_tuple(_Elements&&... __args) noexcept
1483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
1484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<size_t, typename, typename, size_t>
1486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_tuple_impl;
1487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<size_t _Idx, typename _Tuple, typename... _Tp, size_t _Nm>
1489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_tuple_impl<_Idx, tuple<_Tp...>, _Tuple, _Nm>
1490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : __make_tuple_impl<_Idx + 1,
1491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			tuple<_Tp..., __tuple_element_t<_Idx, _Tuple>>,
1492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			_Tuple, _Nm>
1493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { };
1494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<std::size_t _Nm, typename _Tuple, typename... _Tp>
1496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_tuple_impl<_Nm, tuple<_Tp...>, _Tuple, _Nm>
1497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef tuple<_Tp...> __type;
1499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tuple>
1502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __do_make_tuple
1503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : __make_tuple_impl<0, tuple<>, _Tuple, std::tuple_size<_Tuple>::value>
1504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { };
1505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Returns the std::tuple equivalent of a tuple-like type.
1507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tuple>
1508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_tuple
1509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     : public __do_make_tuple<__remove_cvref_t<_Tuple>>
1510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { };
1511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Combines several std::tuple's into a single one.
1513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename...>
1514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __combine_tuples;
1515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<>
1517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __combine_tuples<>
1518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef tuple<> __type;
1520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Ts>
1523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __combine_tuples<tuple<_Ts...>>
1524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
ARM GAS  /tmp/cc27eAcR.s 			page 183


1525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef tuple<_Ts...> __type;
1526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _T1s, typename... _T2s, typename... _Rem>
1529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __combine_tuples<tuple<_T1s...>, tuple<_T2s...>, _Rem...>
1530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename __combine_tuples<tuple<_T1s..., _T2s...>,
1532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 					_Rem...>::__type __type;
1533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Computes the result type of tuple_cat given a set of tuple-like types.
1536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Tpls>
1537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_cat_result
1538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename __combine_tuples
1540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         <typename __make_tuple<_Tpls>::__type...>::__type __type;
1541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Helper to determine the index set for the first tuple-like
1544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // type of a given set.
1545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename...>
1546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_1st_indices;
1547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<>
1549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_1st_indices<>
1550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef std::_Index_tuple<> __type;
1552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Tp, typename... _Tpls>
1555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __make_1st_indices<_Tp, _Tpls...>
1556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename std::_Build_index_tuple<std::tuple_size<
1558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	typename std::remove_reference<_Tp>::type>::value>::__type __type;
1559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // Performs the actual concatenation by step-wise expanding tuple-like
1562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // objects into the elements,  which are finally forwarded into the
1563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // result tuple.
1564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Ret, typename _Indices, typename... _Tpls>
1565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_concater;
1566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Ret, std::size_t... _Is, typename _Tp, typename... _Tpls>
1568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_concater<_Ret, std::_Index_tuple<_Is...>, _Tp, _Tpls...>
1569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _Us>
1571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         static constexpr _Ret
1572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         _S_do(_Tp&& __tp, _Tpls&&... __tps, _Us&&... __us)
1573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
1574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  typedef typename __make_1st_indices<_Tpls...>::__type __idx;
1575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  typedef __tuple_concater<_Ret, __idx, _Tpls...>      __next;
1576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return __next::_S_do(std::forward<_Tpls>(__tps)...,
1577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			       std::forward<_Us>(__us)...,
1578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 			       std::get<_Is>(std::forward<_Tp>(__tp))...);
1579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
ARM GAS  /tmp/cc27eAcR.s 			page 184


1582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename _Ret>
1583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct __tuple_concater<_Ret, std::_Index_tuple<>>
1584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       template<typename... _Us>
1586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	static constexpr _Ret
1587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	_S_do(_Us&&... __us)
1588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         {
1589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	  return _Ret(std::forward<_Us>(__us)...);
1590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	}
1591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     };
1592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// tuple_cat
1594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Tpls, typename = typename
1595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****            enable_if<__and_<__is_tuple_like<_Tpls>...>::value>::type>
1596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr auto
1597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tuple_cat(_Tpls&&... __tpls)
1598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     -> typename __tuple_cat_result<_Tpls...>::__type
1599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     {
1600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename __tuple_cat_result<_Tpls...>::__type __ret;
1601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef typename __make_1st_indices<_Tpls...>::__type __idx;
1602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       typedef __tuple_concater<__ret, __idx, _Tpls...> __concater;
1603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       return __concater::_S_do(std::forward<_Tpls>(__tpls)...);
1604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     }
1605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // 2301. Why is tie not constexpr?
1608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// tie
1609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     constexpr tuple<_Elements&...>
1611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     tie(_Elements&... __args) noexcept
1612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return tuple<_Elements&...>(__args...); }
1613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// swap
1615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     inline
1617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
1618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     // Constrained free swap overload, see p0185r1
1619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     typename enable_if<__and_<__is_swappable<_Elements>...>::value
1620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       >::type
1621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #else
1622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     void
1623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
1624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     swap(tuple<_Elements...>& __x, tuple<_Elements...>& __y)
1625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     noexcept(noexcept(__x.swap(__y)))
1626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { __x.swap(__y); }
1627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #if __cplusplus > 201402L || !defined(__STRICT_ANSI__) // c++1z or gnu++11
1629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Elements>
1630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     typename enable_if<!__and_<__is_swappable<_Elements>...>::value>::type
1631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     swap(tuple<_Elements...>&, tuple<_Elements...>&) = delete;
1632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** #endif
1633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // A class (and instance) which can be used in 'tie' when an element
1635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // of a tuple is not required.
1636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // _GLIBCXX14_CONSTEXPR
1637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // 2933. PR for LWG 2773 could be clearer
1638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   struct _Swallow_assign
ARM GAS  /tmp/cc27eAcR.s 			page 185


1639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   {
1640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<class _Tp>
1641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       _GLIBCXX14_CONSTEXPR const _Swallow_assign&
1642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       operator=(const _Tp&) const
1643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       { return *this; }
1644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   };
1645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // 2773. Making std::ignore constexpr
1648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   _GLIBCXX17_INLINE constexpr _Swallow_assign ignore{};
1649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   /// Partial specialization for tuples
1651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<typename... _Types, typename _Alloc>
1652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     struct uses_allocator<tuple<_Types...>, _Alloc> : true_type { };
1653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   // See stl_pair.h...
1655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<class _T1, class _T2>
1656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _Args1, typename... _Args2>
1657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       inline
1658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair<_T1, _T2>::
 1673              		.loc 12 1658 7 view .LVU412
 1674              	.LBB1101:
 1675              	.LBI1101:
1659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair(piecewise_construct_t,
1660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	   tuple<_Args1...> __first, tuple<_Args2...> __second)
1661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : pair(__first, __second,
1662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	     typename _Build_index_tuple<sizeof...(_Args1)>::__type(),
1663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
1664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       { }
1665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
1666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****   template<class _T1, class _T2>
1667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     template<typename... _Args1, std::size_t... _Indexes1,
1668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****              typename... _Args2, std::size_t... _Indexes2>
1669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       inline
1670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair<_T1, _T2>::
 1676              		.loc 12 1670 7 view .LVU413
 1677              	.LBB1102:
 1678              	.LBB1103:
 1679              	.LBI1103:
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
 1680              		.loc 12 1320 5 view .LVU414
1320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****     { return std::__get_helper<__i>(__t); }
 1681              		.loc 12 1320 5 is_stmt 0 view .LVU415
 1682              	.LBE1103:
 1683              	.LBB1104:
 1684              	.LBI1104:
 1685              		.loc 9 74 5 is_stmt 1 view .LVU416
 1686              		.loc 9 74 5 is_stmt 0 view .LVU417
 1687              	.LBE1104:
1671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
1672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
1673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
1674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****         second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 1688              		.loc 12 1674 70 view .LVU418
 1689 0014 1B68     		ldr	r3, [r3]
 1690 0016 0361     		str	r3, [r0, #16]
 1691 0018 0023     		movs	r3, #0
ARM GAS  /tmp/cc27eAcR.s 			page 186


 1692 001a 0375     		strb	r3, [r0, #20]
 1693              	.LVL153:
 1694              		.loc 12 1674 70 view .LVU419
 1695              	.LBE1102:
 1696              	.LBE1101:
 1697              	.LBE1100:
 1698              	.LBE1105:
 1699              	.LBE1106:
 1700              	.LBE1108:
 1701              	.LBE1110:
 1702              	.LBE1112:
 1703              	.LBB1113:
 1704              	.LBB1114:
 1705              	.LBI1114:
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 1706              		.loc 3 767 7 is_stmt 1 view .LVU420
 1707              	.LBB1115:
 1708              	.LBI1115:
 1709              		.loc 7 1155 7 view .LVU421
 1710              		.loc 7 1155 7 is_stmt 0 view .LVU422
 1711              	.LBE1115:
 1712              	.LBE1114:
2459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1713              		.loc 3 2459 11 view .LVU423
 1714 001c 00F11003 		add	r3, r0, #16
 1715 0020 3246     		mov	r2, r6
 1716 0022 2946     		mov	r1, r5
 1717 0024 6846     		mov	r0, sp
 1718              	.LVL154:
2459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1719              		.loc 3 2459 11 view .LVU424
 1720 0026 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE29_M_get_insert_hint_unique_po
 1721              	.LVL155:
2461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
 1722              		.loc 3 2461 16 view .LVU425
 1723 002a 019A     		ldr	r2, [sp, #4]
2461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	      return _M_insert_node(__res.first, __res.second, __z);
 1724              		.loc 3 2461 6 view .LVU426
 1725 002c 32B1     		cbz	r2, .L65
2462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1726              		.loc 3 2462 60 view .LVU427
 1727 002e 2346     		mov	r3, r4
 1728 0030 0099     		ldr	r1, [sp]
 1729 0032 2846     		mov	r0, r5
 1730 0034 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree
 1731              	.LVL156:
 1732              	.L66:
 1733              	.LBE1113:
2472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1734              		.loc 3 2472 7 view .LVU428
 1735 0038 03B0     		add	sp, sp, #12
 1736              	.LCFI16:
 1737              		.cfi_remember_state
 1738              		.cfi_def_cfa_offset 20
 1739              		@ sp needed
 1740 003a F0BD     		pop	{r4, r5, r6, r7, pc}
 1741              	.LVL157:
ARM GAS  /tmp/cc27eAcR.s 			page 187


 1742              	.L65:
 1743              	.LCFI17:
 1744              		.cfi_restore_state
 1745              	.LBB1122:
 1746              	.LBB1116:
 1747              	.LBI1116:
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 1748              		.loc 3 648 7 is_stmt 1 view .LVU429
 1749              	.LBB1117:
 1750              	.LBI1117:
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 1751              		.loc 3 583 7 view .LVU430
 1752              	.LBB1118:
 1753              	.LBI1118:
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1754              		.loc 10 469 7 view .LVU431
 1755              	.LBB1119:
 1756              	.LBI1119:
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       {
 1757              		.loc 5 119 7 view .LVU432
 1758              	.LBB1120:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1759              		.loc 5 128 19 is_stmt 0 view .LVU433
 1760 003c 2046     		mov	r0, r4
 1761 003e FFF7FEFF 		bl	_ZdlPv
 1762              	.LVL158:
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/new_allocator.h ****       }
 1763              		.loc 5 128 19 view .LVU434
 1764              	.LBE1120:
 1765              	.LBE1119:
 1766              	.LBE1118:
 1767              	.LBE1117:
 1768              	.LBE1116:
 1769              	.LBB1121:
 1770              	.LBI1121:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1771              		.loc 3 273 7 is_stmt 1 view .LVU435
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1772              		.loc 3 273 7 is_stmt 0 view .LVU436
 1773              	.LBE1121:
2465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	  }
 1774              		.loc 3 2465 33 view .LVU437
 1775 0042 0098     		ldr	r0, [sp]
 1776 0044 F8E7     		b	.L66
 1777              	.LBE1122:
 1778              		.cfi_endproc
 1779              	.LFE3744:
 1781              		.section	.text._ZN13Planner_phase7TriggerEib,"ax",%progbits
 1782              		.align	1
 1783              		.global	_ZN13Planner_phase7TriggerEib
 1784              		.syntax unified
 1785              		.thumb
 1786              		.thumb_func
 1787              		.fpu fpv4-sp-d16
 1789              	_ZN13Planner_phase7TriggerEib:
 1790              	.LVL159:
 1791              	.LFB3342:
ARM GAS  /tmp/cc27eAcR.s 			page 188


  15:alohal/events/planner/planner_phase.cpp **** 
  16:alohal/events/planner/planner_phase.cpp **** void Planner_phase::Trigger(int trigger_id, bool state){
 1792              		.loc 1 16 56 is_stmt 1 view -0
 1793              		.cfi_startproc
 1794              		@ args = 0, pretend = 0, frame = 16
 1795              		@ frame_needed = 0, uses_anonymous_args = 0
 1796              		.loc 1 16 56 is_stmt 0 view .LVU439
 1797 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1798              	.LCFI18:
 1799              		.cfi_def_cfa_offset 24
 1800              		.cfi_offset 4, -24
 1801              		.cfi_offset 5, -20
 1802              		.cfi_offset 6, -16
 1803              		.cfi_offset 7, -12
 1804              		.cfi_offset 8, -8
 1805              		.cfi_offset 14, -4
 1806 0004 86B0     		sub	sp, sp, #24
 1807              	.LCFI19:
 1808              		.cfi_def_cfa_offset 48
 1809 0006 0546     		mov	r5, r0
 1810 0008 0391     		str	r1, [sp, #12]
 1811 000a 1646     		mov	r6, r2
  17:alohal/events/planner/planner_phase.cpp ****     if (triggers.find(trigger_id) != triggers.end()) {
 1812              		.loc 1 17 5 is_stmt 1 view .LVU440
 1813              	.LVL160:
 1814              	.LBB1185:
 1815              	.LBI1185:
1168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.find(__x); }
 1816              		.loc 2 1168 7 view .LVU441
 1817              	.LBB1186:
 1818              		.loc 2 1169 29 is_stmt 0 view .LVU442
 1819 000c 041D     		adds	r4, r0, #4
 1820              	.LVL161:
 1821              		.loc 2 1169 29 view .LVU443
 1822 000e 03A9     		add	r1, sp, #12
 1823              	.LVL162:
 1824              		.loc 2 1169 29 view .LVU444
 1825 0010 2046     		mov	r0, r4
 1826              	.LVL163:
 1827              		.loc 2 1169 29 view .LVU445
 1828 0012 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE4findERS1_
 1829              	.LVL164:
 1830              		.loc 2 1169 29 view .LVU446
 1831              	.LBE1186:
 1832              	.LBE1185:
 1833              	.LBB1187:
 1834              	.LBI1187:
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 1835              		.loc 2 372 7 is_stmt 1 view .LVU447
 1836              	.LBB1188:
 1837              	.LBI1188:
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 1838              		.loc 3 1014 7 view .LVU448
 1839              	.LBB1189:
1015:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1840              		.loc 3 1015 49 is_stmt 0 view .LVU449
 1841 0016 05F10804 		add	r4, r5, #8
ARM GAS  /tmp/cc27eAcR.s 			page 189


 1842              	.LVL165:
 1843              	.LBB1190:
 1844              	.LBI1190:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1845              		.loc 3 273 7 is_stmt 1 view .LVU450
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1846              		.loc 3 273 7 is_stmt 0 view .LVU451
 1847              	.LBE1190:
 1848              	.LBE1189:
 1849              	.LBE1188:
 1850              	.LBE1187:
 1851              	.LBB1191:
 1852              	.LBI1191:
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node != __y._M_node; }
 1853              		.loc 3 319 7 is_stmt 1 view .LVU452
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node != __y._M_node; }
 1854              		.loc 3 319 7 is_stmt 0 view .LVU453
 1855              	.LBE1191:
 1856              		.loc 1 17 5 view .LVU454
 1857 001a 8442     		cmp	r4, r0
 1858 001c 02D0     		beq	.L78
 1859              	.LVL166:
 1860              	.L68:
  18:alohal/events/planner/planner_phase.cpp ****         // trigger with this ID not exists in this phase
  19:alohal/events/planner/planner_phase.cpp ****         return;
  20:alohal/events/planner/planner_phase.cpp ****     }
  21:alohal/events/planner/planner_phase.cpp ****     triggers[trigger_id] = state;
  22:alohal/events/planner/planner_phase.cpp ****     for (auto& [key, value]: triggers) {
  23:alohal/events/planner/planner_phase.cpp ****         if (!value) {
  24:alohal/events/planner/planner_phase.cpp ****             return;
  25:alohal/events/planner/planner_phase.cpp ****         }
  26:alohal/events/planner/planner_phase.cpp ****     }
  27:alohal/events/planner/planner_phase.cpp ****     // Phase done, run all consequences
  28:alohal/events/planner/planner_phase.cpp ****     for (auto &consequence:consequences) {
  29:alohal/events/planner/planner_phase.cpp ****         consequence->Invoke();
  30:alohal/events/planner/planner_phase.cpp ****     }
  31:alohal/events/planner/planner_phase.cpp **** }
 1861              		.loc 1 31 1 view .LVU455
 1862 001e 06B0     		add	sp, sp, #24
 1863              	.LCFI20:
 1864              		.cfi_remember_state
 1865              		.cfi_def_cfa_offset 24
 1866              		@ sp needed
 1867 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1868              	.LVL167:
 1869              	.L78:
 1870              	.LCFI21:
 1871              		.cfi_restore_state
  21:alohal/events/planner/planner_phase.cpp ****     for (auto& [key, value]: triggers) {
 1872              		.loc 1 21 5 is_stmt 1 view .LVU456
  21:alohal/events/planner/planner_phase.cpp ****     for (auto& [key, value]: triggers) {
 1873              		.loc 1 21 24 is_stmt 0 view .LVU457
 1874 0024 05F10408 		add	r8, r5, #4
 1875              	.LVL168:
 1876              	.LBB1192:
 1877              	.LBI1192:
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       {
ARM GAS  /tmp/cc27eAcR.s 			page 190


 1878              		.loc 2 490 7 is_stmt 1 view .LVU458
 1879              	.LBB1193:
 1880              	.LBB1194:
 1881              	.LBI1194:
1170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201103L
1172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Kt>
1173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	auto
1174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	find(const _Kt& __x) -> decltype(_M_t._M_find_tr(__x))
1175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_find_tr(__x); }
1176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@}
1178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Tries to locate an element in a %map.
1182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) %pair to be located.
1183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  Read-only (constant) iterator pointing to sought-after
1184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           element, or end() if not found.
1185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function takes a key and tries to locate the element with which
1187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  the key matches.  If successful the function returns a constant
1188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  iterator pointing to the sought after %pair. If unsuccessful it
1189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  returns the past-the-end ( @c end() ) iterator.
1190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       const_iterator
1193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       find(const key_type& __x) const
1194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.find(__x); }
1195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201103L
1197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Kt>
1198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	auto
1199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	find(const _Kt& __x) const -> decltype(_M_t._M_find_tr(__x))
1200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_find_tr(__x); }
1201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@}
1203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Finds the number of elements with given key.
1207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) pairs to be located.
1208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  Number of elements with specified key.
1209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function only makes sense for multimaps; for map the result will
1211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  either be 0 (not present) or 1 (present).
1212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       size_type
1214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       count(const key_type& __x) const
1215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
1216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201103L
1218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Kt>
1219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	auto
1220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	count(const _Kt& __x) const -> decltype(_M_t._M_count_tr(__x))
1221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_count_tr(__x); }
1222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
ARM GAS  /tmp/cc27eAcR.s 			page 191


1223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@}
1224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus > 201703L
1226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief  Finds whether an element with the given key exists.
1229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) pairs to be located.
1230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  True if there is an element with the specified key.
1231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       bool
1233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       contains(const key_type& __x) const
1234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.find(__x) != _M_t.end(); }
1235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       template<typename _Kt>
1237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	auto
1238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	contains(const _Kt& __x) const
1239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	-> decltype(_M_t._M_find_tr(__x), void(), true)
1240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	{ return _M_t._M_find_tr(__x) != _M_t.end(); }
1241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@}
1242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #endif
1243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 
1244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       //@{
1245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       /**
1246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @brief Finds the beginning of a subsequence matching given key.
1247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @param  __x  Key of (key, value) pair to be located.
1248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  @return  Iterator pointing to first element equal to or greater
1249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *           than key, or end().
1250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *
1251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  This function returns the first element of a subsequence of elements
1252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  that matches the given key.  If unsuccessful it returns an iterator
1253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  pointing to the first element that has a greater value than given key
1254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        *  or end() if no such element exists.
1255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****        */
1256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       iterator
1257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       lower_bound(const key_type& __x)
 1882              		.loc 2 1257 7 view .LVU459
 1883              	.LBB1195:
 1884              	.LBB1196:
 1885              	.LBI1196:
1281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 1886              		.loc 3 1281 7 view .LVU460
 1887              	.LBB1197:
 1888              	.LBB1198:
 1889              	.LBI1198:
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 1890              		.loc 3 744 7 view .LVU461
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 1891              		.loc 3 744 7 is_stmt 0 view .LVU462
 1892              	.LBE1198:
 1893              	.LBB1199:
 1894              	.LBI1199:
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return &this->_M_impl._M_header; }
 1895              		.loc 3 755 7 is_stmt 1 view .LVU463
 1896              	.LBB1200:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1897              		.loc 3 756 31 is_stmt 0 view .LVU464
 1898 0028 05F10807 		add	r7, r5, #8
ARM GAS  /tmp/cc27eAcR.s 			page 192


 1899              	.LVL169:
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1900              		.loc 3 756 31 view .LVU465
 1901              	.LBE1200:
 1902              	.LBE1199:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1903              		.loc 3 1282 56 view .LVU466
 1904 002c 03AB     		add	r3, sp, #12
 1905              	.LVL170:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1906              		.loc 3 1282 56 view .LVU467
 1907 002e 3A46     		mov	r2, r7
 1908 0030 D8F80810 		ldr	r1, [r8, #8]
 1909 0034 4046     		mov	r0, r8
 1910 0036 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_lower_boundEPSt13_Rb_tree
 1911              	.LVL171:
1282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1912              		.loc 3 1282 56 view .LVU468
 1913              	.LBE1197:
 1914              	.LBE1196:
 1915              	.LBE1195:
 1916              	.LBE1194:
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 	// __i->first is greater than or equivalent to __k.
 1917              		.loc 2 495 11 view .LVU469
 1918 003a 0346     		mov	r3, r0
 1919              	.LVL172:
 1920              	.LBB1201:
 1921              	.LBI1201:
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 1922              		.loc 2 372 7 is_stmt 1 view .LVU470
 1923              	.LBB1202:
 1924              	.LBI1202:
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 1925              		.loc 3 1014 7 view .LVU471
 1926              	.LBB1203:
 1927              	.LBI1203:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1928              		.loc 3 273 7 view .LVU472
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 1929              		.loc 3 273 7 is_stmt 0 view .LVU473
 1930              	.LBE1203:
 1931              	.LBE1202:
 1932              	.LBE1201:
 1933              	.LBB1204:
 1934              	.LBI1204:
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node == __y._M_node; }
 1935              		.loc 3 315 7 is_stmt 1 view .LVU474
 1936              	.LBB1205:
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1937              		.loc 3 316 20 is_stmt 0 view .LVU475
 1938 003c 0146     		mov	r1, r0
 1939              	.LVL173:
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 1940              		.loc 3 316 20 view .LVU476
 1941              	.LBE1205:
 1942              	.LBE1204:
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
ARM GAS  /tmp/cc27eAcR.s 			page 193


 1943              		.loc 2 497 19 view .LVU477
 1944 003e 8742     		cmp	r7, r0
 1945 0040 03D0     		beq	.L70
 1946              	.LVL174:
 1947              	.LBB1206:
 1948              	.LBI1206:
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****       { return __x < __y; }
 1949              		.loc 7 385 7 is_stmt 1 view .LVU478
 1950              	.LBB1207:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1951              		.loc 7 386 20 is_stmt 0 view .LVU479
 1952 0042 0269     		ldr	r2, [r0, #16]
 1953              	.LVL175:
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_function.h ****     };
 1954              		.loc 7 386 20 view .LVU480
 1955              	.LBE1207:
 1956              	.LBE1206:
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** #if __cplusplus >= 201103L
 1957              		.loc 2 497 19 view .LVU481
 1958 0044 0398     		ldr	r0, [sp, #12]
 1959 0046 9042     		cmp	r0, r2
 1960 0048 09DA     		bge	.L71
 1961              	.L70:
 1962              	.LVL176:
 1963              	.LBB1208:
 1964              	.LBI1208:
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 1965              		.loc 3 348 7 is_stmt 1 view .LVU482
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__it._M_node) { }
 1966              		.loc 3 348 7 is_stmt 0 view .LVU483
 1967              	.LBE1208:
 1968              	.LBB1209:
 1969              	.LBI1209:
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Inherited(__elements...) { }
 1970              		.loc 12 588 19 is_stmt 1 view .LVU484
 1971              	.LBB1210:
 1972              	.LBI1210:
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _Base(__head) { }
 1973              		.loc 12 343 17 view .LVU485
 1974              	.LBB1211:
 1975              	.LBI1211:
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple ****       : _M_head_impl(__h) { }
 1976              		.loc 12 125 17 view .LVU486
 1977              	.LBB1212:
 1978              	.LBB1213:
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1979              		.loc 12 126 25 is_stmt 0 view .LVU487
 1980 004a 03AB     		add	r3, sp, #12
 1981              	.LVL177:
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1982              		.loc 12 126 25 view .LVU488
 1983 004c 0593     		str	r3, [sp, #20]
 1984              	.LVL178:
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/tuple **** 
 1985              		.loc 12 126 25 view .LVU489
 1986              	.LBE1213:
 1987              	.LBE1212:
ARM GAS  /tmp/cc27eAcR.s 			page 194


 1988              	.LBE1211:
 1989              	.LBE1210:
 1990              	.LBE1209:
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 1991              		.loc 2 499 8 view .LVU490
 1992 004e 04AB     		add	r3, sp, #16
 1993              	.LVL179:
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 1994              		.loc 2 499 8 view .LVU491
 1995 0050 0093     		str	r3, [sp]
 1996 0052 05AB     		add	r3, sp, #20
 1997              	.LVL180:
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 1998              		.loc 2 499 8 view .LVU492
 1999 0054 0D4A     		ldr	r2, .L79
 2000 0056 4046     		mov	r0, r8
 2001 0058 FFF7FEFF 		bl	_ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE22_M_emplace_hint_uniqueIJRKSt
 2002              	.LVL181:
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h **** 					    std::tuple<const key_type&>(__k),
 2003              		.loc 2 499 8 view .LVU493
 2004 005c 0346     		mov	r3, r0
 2005              	.L71:
 2006              	.LVL182:
 2007              	.LBB1214:
 2008              	.LBI1214:
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 2009              		.loc 3 277 7 is_stmt 1 view .LVU494
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 2010              		.loc 3 277 7 is_stmt 0 view .LVU495
 2011              	.LBE1214:
 2012              	.LBE1193:
 2013              	.LBE1192:
  21:alohal/events/planner/planner_phase.cpp ****     for (auto& [key, value]: triggers) {
 2014              		.loc 1 21 26 view .LVU496
 2015 005e 1E75     		strb	r6, [r3, #20]
  22:alohal/events/planner/planner_phase.cpp ****         if (!value) {
 2016              		.loc 1 22 5 is_stmt 1 view .LVU497
 2017              	.LVL183:
 2018              	.LBB1215:
 2019              	.LBB1216:
 2020              	.LBI1216:
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.begin(); }
 2021              		.loc 2 354 7 view .LVU498
 2022              	.LBB1217:
 2023              	.LBI1217:
1006:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(this->_M_impl._M_header._M_left); }
 2024              		.loc 3 1006 7 view .LVU499
 2025              	.LBB1218:
 2026              	.LBB1219:
 2027              	.LBI1219:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 2028              		.loc 3 273 7 view .LVU500
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 2029              		.loc 3 273 7 is_stmt 0 view .LVU501
 2030              	.LBE1219:
 2031              	.LBE1218:
 2032              	.LBE1217:
ARM GAS  /tmp/cc27eAcR.s 			page 195


 2033              	.LBE1216:
  22:alohal/events/planner/planner_phase.cpp ****         if (!value) {
 2034              		.loc 1 22 30 view .LVU502
 2035 0060 2B69     		ldr	r3, [r5, #16]
 2036              	.LVL184:
 2037              	.LBB1220:
 2038              	.LBI1220:
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_map.h ****       { return _M_t.end(); }
 2039              		.loc 2 372 7 is_stmt 1 view .LVU503
 2040              	.LBB1221:
 2041              	.LBI1221:
1014:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return iterator(&this->_M_impl._M_header); }
 2042              		.loc 3 1014 7 view .LVU504
 2043              	.LBB1222:
 2044              	.LBI1222:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 2045              		.loc 3 273 7 view .LVU505
 2046              	.L74:
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       : _M_node(__x) { }
 2047              		.loc 3 273 7 is_stmt 0 view .LVU506
 2048              	.LBE1222:
 2049              	.LBE1221:
 2050              	.LBE1220:
  22:alohal/events/planner/planner_phase.cpp ****         if (!value) {
 2051              		.loc 1 22 30 is_stmt 1 discriminator 1 view .LVU507
 2052              	.LBB1223:
 2053              	.LBI1223:
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       { return __x._M_node != __y._M_node; }
 2054              		.loc 3 319 7 discriminator 1 view .LVU508
 2055              	.LBB1224:
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 2056              		.loc 3 320 20 is_stmt 0 discriminator 1 view .LVU509
 2057 0062 1846     		mov	r0, r3
 2058              	.LVL185:
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 
 2059              		.loc 3 320 20 discriminator 1 view .LVU510
 2060              	.LBE1224:
 2061              	.LBE1223:
  22:alohal/events/planner/planner_phase.cpp ****         if (!value) {
 2062              		.loc 1 22 30 discriminator 1 view .LVU511
 2063 0064 9C42     		cmp	r4, r3
 2064 0066 06D0     		beq	.L72
 2065              	.LVL186:
  23:alohal/events/planner/planner_phase.cpp ****             return;
 2066              		.loc 1 23 9 is_stmt 1 view .LVU512
  23:alohal/events/planner/planner_phase.cpp ****             return;
 2067              		.loc 1 23 14 is_stmt 0 view .LVU513
 2068 0068 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 2069              	.LVL187:
  23:alohal/events/planner/planner_phase.cpp ****             return;
 2070              		.loc 1 23 9 view .LVU514
 2071 006a 002B     		cmp	r3, #0
 2072 006c D7D0     		beq	.L68
  22:alohal/events/planner/planner_phase.cpp ****         if (!value) {
 2073              		.loc 1 22 5 is_stmt 1 view .LVU515
 2074              	.LVL188:
 2075              	.LBB1225:
ARM GAS  /tmp/cc27eAcR.s 			page 196


 2076              	.LBI1225:
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       {
 2077              		.loc 3 285 7 view .LVU516
 2078              	.LBB1226:
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h **** 	return *this;
 2079              		.loc 3 287 30 is_stmt 0 view .LVU517
 2080 006e FFF7FEFF 		bl	_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
 2081              	.LVL189:
 2082 0072 0346     		mov	r3, r0
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 2083              		.loc 3 288 10 view .LVU518
 2084 0074 F5E7     		b	.L74
 2085              	.LVL190:
 2086              	.L72:
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_tree.h ****       }
 2087              		.loc 3 288 10 view .LVU519
 2088              	.LBE1226:
 2089              	.LBE1225:
 2090              	.LBE1215:
  28:alohal/events/planner/planner_phase.cpp ****         consequence->Invoke();
 2091              		.loc 1 28 5 is_stmt 1 view .LVU520
 2092              	.LBB1227:
 2093              	.LBB1228:
 2094              	.LBI1228:
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #else
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector() { }
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       explicit
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _Base(__a) { }
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  constructed elements.
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       explicit
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
ARM GAS  /tmp/cc27eAcR.s 			page 197


 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #else
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       explicit
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @a __x  will not be copied
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(const vector& __x)
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _Base(__x.size(),
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  moved instance.
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  %vector.
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(vector&&) noexcept = default;
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
ARM GAS  /tmp/cc27eAcR.s 			page 198


 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	this->_M_impl._M_finish =
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     private:
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _Base(__m, std::move(__rv))
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { }
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _Base(__m)
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	if (__rv.get_allocator() == __m)
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	else if (!__rv.empty())
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  {
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	    __rv.clear();
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  }
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****     public:
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       noexcept( noexcept(
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { }
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  initializer_list @a __l.
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       : _Base(__a)
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
ARM GAS  /tmp/cc27eAcR.s 			page 199


 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __a  An allocator.
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  [first,last).
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _Base(__a)
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last,
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 			      std::__iterator_category(__first));
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	}
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #else
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	: _Base(__a)
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	}
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  responsibility.
 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 		      _M_get_Tp_allocator());
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @a __x will not be copied.
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
ARM GAS  /tmp/cc27eAcR.s 			page 200


 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector&
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       operator=(const vector& __x);
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  if the allocators permit it).
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector&
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	constexpr bool __move_storage =
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	return *this;
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  initializer list @a __l.
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  of elements assigned.
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       vector&
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	return *this;
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  the number of elements assigned.
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       void
ARM GAS  /tmp/cc27eAcR.s 			page 201


 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  range [__first,__last).
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  of elements assigned.
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       template<typename _InputIterator,
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	void
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{ _M_assign_dispatch(__first, __last, __false_type()); }
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #else
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       template<typename _InputIterator>
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	void
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	{
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	}
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #if __cplusplus >= 201103L
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  initializer list @a __l.
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  of elements assigned.
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       void
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       {
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 			    random_access_iterator_tag());
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       }
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** #endif
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       using _Base::get_allocator;
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       // iterators
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
ARM GAS  /tmp/cc27eAcR.s 			page 202


 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  element order.
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       iterator
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 2095              		.loc 6 808 7 view .LVU521
 2096              	.LBB1229:
 2097              	.LBB1230:
 2098              	.LBI1230:
 2099              		.file 13 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h"
   1:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
   3:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // Copyright (C) 2001-2019 Free Software Foundation, Inc.
   4:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** //
   5:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // any later version.
  10:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  11:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  16:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  20:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  25:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** /*
  26:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *
  27:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *
  30:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *
  38:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *
  39:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *
  42:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
ARM GAS  /tmp/cc27eAcR.s 			page 203


  47:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  */
  50:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  51:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *
  55:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****  */
  59:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  60:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  63:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #include <bits/move.h>
  66:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #include <bits/ptr_traits.h>
  67:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  68:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
  69:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** # include <type_traits>
  70:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #endif
  71:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  72:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #if __cplusplus > 201402L
  73:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** # define __cpp_lib_array_constexpr 201603
  74:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #endif
  75:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  76:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  77:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** {
  78:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  79:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  80:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /**
  81:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    * @addtogroup iterators
  82:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    * @{
  83:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    */
  84:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
  85:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  86:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /**
  87:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  88:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  89:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  90:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  91:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  92:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @code
  93:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  94:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @endcode
  95:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
  96:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  97:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  98:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  99:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 100:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 101:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 102:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
 103:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   */
ARM GAS  /tmp/cc27eAcR.s 			page 204


 104:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 105:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     class reverse_iterator
 106:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 107:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 108:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 109:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 110:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 111:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     {
 112:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     protected:
 113:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _Iterator current;
 114:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 115:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 116:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 117:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     public:
 118:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 119:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 120:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 121:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 122:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 123:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 124:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 125:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 126:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 127:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 128:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 129:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 130:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 131:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 132:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 133:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 134:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 135:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 136:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 137:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 138:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 139:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 140:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  The copy constructor is normal.
 141:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 142:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 143:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 144:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       : current(__x.current) { }
 145:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 146:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 147:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 148:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #endif
 149:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 150:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 151:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 152:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 153:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 154:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       template<typename _Iter>
 155:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 156:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 157:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	: current(__x.base()) { }
 158:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 159:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 160:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
ARM GAS  /tmp/cc27eAcR.s 			page 205


 161:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 162:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 163:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       base() const
 164:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return current; }
 165:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 166:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 167:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 168:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 169:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 170:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 171:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 172:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 173:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 174:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 175:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 176:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 177:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator*() const
 178:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 179:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 180:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *--__tmp;
 181:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 182:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 183:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 184:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 185:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 186:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 187:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 188:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 189:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator->() const
 190:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 191:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 192:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 193:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 194:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	--__tmp;
 195:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return _S_to_pointer(__tmp);
 196:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 197:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 198:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 199:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  @c *this
 200:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 201:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 202:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 203:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 204:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++()
 205:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 206:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	--current;
 207:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 208:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 209:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 210:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 211:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 212:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 213:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 214:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 215:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 216:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++(int)
 217:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
ARM GAS  /tmp/cc27eAcR.s 			page 206


 218:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 219:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	--current;
 220:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return __tmp;
 221:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 222:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 223:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 224:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  @c *this
 225:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 226:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 227:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 228:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 229:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator--()
 230:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 231:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	++current;
 232:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 233:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 234:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 235:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 236:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 237:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 238:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 239:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 240:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 241:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator--(int)
 242:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 243:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 244:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	++current;
 245:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return __tmp;
 246:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 247:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 248:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 249:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 250:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 251:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 252:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 253:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 254:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator+(difference_type __n) const
 255:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 256:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 257:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 258:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  *this
 259:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 260:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 261:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 262:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 263:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 264:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator+=(difference_type __n)
 265:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 266:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	current -= __n;
 267:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 268:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 269:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 270:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 271:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 272:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 273:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 274:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
ARM GAS  /tmp/cc27eAcR.s 			page 207


 275:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 276:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator-(difference_type __n) const
 277:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 278:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 279:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 280:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  *this
 281:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 282:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 283:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 284:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 285:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 286:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator-=(difference_type __n)
 287:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 288:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	current += __n;
 289:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 290:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 291:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 292:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 293:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 294:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 295:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 296:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 297:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 298:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator[](difference_type __n) const
 299:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *(*this + __n); }
 300:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 301:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     private:
 302:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       template<typename _Tp>
 303:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 304:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 305:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****         { return __p; }
 306:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 307:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       template<typename _Tp>
 308:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 309:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 310:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****         { return __t.operator->(); }
 311:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     };
 312:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 313:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   //@{
 314:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /**
 315:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 316:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 317:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @return  A simple bool.
 318:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 319:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 320:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 321:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 322:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   */
 323:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 324:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 325:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 326:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 327:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 328:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 329:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 330:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 331:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
ARM GAS  /tmp/cc27eAcR.s 			page 208


 332:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 333:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 334:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 335:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 336:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 337:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 338:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 339:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return !(__x == __y); }
 340:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 341:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 342:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 343:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 344:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 345:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __y < __x; }
 346:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 347:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 348:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 349:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 350:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 351:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return !(__y < __x); }
 352:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 353:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 354:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 355:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 356:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 357:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return !(__x < __y); }
 358:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 359:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 360:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 361:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 362:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 363:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 364:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 365:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 366:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 367:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 368:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 369:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 370:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 371:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 372:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 373:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 374:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 375:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 376:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 377:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return !(__x == __y); }
 378:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 379:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 380:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 381:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 382:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 383:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __y < __x; }
 384:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 385:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 386:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 387:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 388:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
ARM GAS  /tmp/cc27eAcR.s 			page 209


 389:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return !(__y < __x); }
 390:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 391:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 392:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 393:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 394:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 395:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return !(__x < __y); }
 396:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   //@}
 397:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 398:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 399:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 400:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 401:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 402:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 403:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 404:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 405:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 406:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 407:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 408:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 409:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 410:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #else
 411:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 412:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 413:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 414:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 415:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 416:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 417:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 418:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 419:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #endif
 420:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 421:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 422:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 423:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 424:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 425:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 426:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 427:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 428:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 429:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 430:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 431:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 432:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 433:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 434:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** # if __cplusplus > 201103L
 435:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402
 436:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 437:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 438:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // DR 2285. make_reverse_iterator
 439:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /// Generator function for reverse_iterator.
 440:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 441:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 442:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 443:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 444:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** # endif
 445:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #endif
ARM GAS  /tmp/cc27eAcR.s 			page 210


 446:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 447:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 448:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 449:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     auto
 450:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 451:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 452:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 453:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 454:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 455:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 456:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       : __is_move_iterator<_Iterator>
 457:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { };
 458:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 459:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator>
 460:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     auto
 461:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 462:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 463:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 464:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #endif
 465:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 466:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 467:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /**
 468:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 469:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 470:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 471:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 472:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  push_back.
 473:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 474:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 475:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  save typing.
 476:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   */
 477:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Container>
 478:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     class back_insert_iterator
 479:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 480:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     {
 481:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     protected:
 482:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _Container* container;
 483:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 484:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     public:
 485:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 486:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 487:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 488:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 489:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       explicit
 490:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x)
 491:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 492:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 493:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 494:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 495:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 496:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 497:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 498:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 499:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 500:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 501:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 502:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  always append the value to the end of the container.
ARM GAS  /tmp/cc27eAcR.s 			page 211


 503:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 504:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 505:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       back_insert_iterator&
 506:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 507:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 508:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	container->push_back(__value);
 509:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 510:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 511:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #else
 512:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       back_insert_iterator&
 513:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 514:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 515:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	container->push_back(__value);
 516:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 517:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 518:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 519:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       back_insert_iterator&
 520:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 521:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 522:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 523:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 524:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 525:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #endif
 526:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 527:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// Simply returns *this.
 528:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       back_insert_iterator&
 529:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator*()
 530:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *this; }
 531:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 532:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 533:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       back_insert_iterator&
 534:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++()
 535:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *this; }
 536:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 537:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 538:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       back_insert_iterator
 539:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++(int)
 540:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *this; }
 541:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     };
 542:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 543:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /**
 544:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 545:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 546:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 547:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 548:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 549:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 550:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 551:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 552:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  types for you.
 553:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   */
 554:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Container>
 555:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 556:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 557:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 558:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 559:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /**
ARM GAS  /tmp/cc27eAcR.s 			page 212


 560:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 561:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 562:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 563:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 564:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  push_front.
 565:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 566:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 567:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  save typing.
 568:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   */
 569:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Container>
 570:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     class front_insert_iterator
 571:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 572:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     {
 573:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     protected:
 574:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _Container* container;
 575:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 576:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     public:
 577:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 578:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 579:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 580:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 581:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x)
 582:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       : container(std::__addressof(__x)) { }
 583:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 584:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 585:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 586:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 587:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 588:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 589:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 590:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 591:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 592:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 593:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 594:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 595:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 596:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       front_insert_iterator&
 597:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 598:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 599:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	container->push_front(__value);
 600:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 601:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 602:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #else
 603:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       front_insert_iterator&
 604:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 605:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 606:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	container->push_front(__value);
 607:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 608:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 609:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 610:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       front_insert_iterator&
 611:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 612:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 613:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 614:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 615:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 616:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #endif
ARM GAS  /tmp/cc27eAcR.s 			page 213


 617:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 618:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// Simply returns *this.
 619:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       front_insert_iterator&
 620:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator*()
 621:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *this; }
 622:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 623:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 624:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       front_insert_iterator&
 625:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++()
 626:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *this; }
 627:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 628:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 629:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       front_insert_iterator
 630:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++(int)
 631:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *this; }
 632:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     };
 633:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 634:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /**
 635:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 636:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 637:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 638:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 639:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 640:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 641:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 642:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 643:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  types for you.
 644:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   */
 645:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Container>
 646:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 647:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 648:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 649:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 650:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /**
 651:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 652:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 653:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 654:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 655:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 656:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  position.
 657:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 658:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 659:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  %iterator's position.)
 660:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 661:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 662:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  save typing.
 663:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   */
 664:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Container>
 665:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     class insert_iterator
 666:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 667:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     {
 668:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     protected:
 669:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _Container* container;
 670:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typename _Container::iterator iter;
 671:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 672:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     public:
 673:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
ARM GAS  /tmp/cc27eAcR.s 			page 214


 674:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef _Container          container_type;
 675:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 676:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 677:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 678:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 679:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 680:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 681:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 682:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 683:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /**
 684:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 685:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 686:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 687:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 688:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 689:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 690:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 691:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 692:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 693:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 694:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 695:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @code
 696:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *     // vector v contains A and Z
 697:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 698:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 699:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *     i = 1;
 700:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *     i = 2;
 701:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *     i = 3;
 702:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *
 703:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 704:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****        *  @endcode
 705:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       */
 706:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #if __cplusplus < 201103L
 707:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       insert_iterator&
 708:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 709:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 710:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 711:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	++iter;
 712:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 713:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 714:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #else
 715:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       insert_iterator&
 716:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 717:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 718:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 719:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	++iter;
 720:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 721:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 722:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 723:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       insert_iterator&
 724:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 725:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 726:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 727:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	++iter;
 728:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 729:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 730:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** #endif
ARM GAS  /tmp/cc27eAcR.s 			page 215


 731:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 732:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// Simply returns *this.
 733:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       insert_iterator&
 734:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator*()
 735:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *this; }
 736:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 737:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 738:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       insert_iterator&
 739:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++()
 740:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *this; }
 741:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 742:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 743:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       insert_iterator&
 744:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++(int)
 745:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *this; }
 746:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     };
 747:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 748:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   /**
 749:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 750:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @param __i  An iterator into the container.
 751:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 752:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *
 753:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 754:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 755:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 756:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 757:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 758:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****    *  types for you.
 759:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   */
 760:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 761:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 762:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 763:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     {
 764:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 765:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 766:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     }
 767:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 768:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // @} group iterators
 769:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 770:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 771:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** } // namespace
 772:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 773:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 774:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** {
 775:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 776:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 777:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 778:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 779:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 780:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 781:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 782:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 783:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 784:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   using std::iterator_traits;
 785:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   using std::iterator;
 786:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 787:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     class __normal_iterator
ARM GAS  /tmp/cc27eAcR.s 			page 216


 788:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     {
 789:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     protected:
 790:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _Iterator _M_current;
 791:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 792:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 793:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 794:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     public:
 795:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 796:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 797:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 798:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 799:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 800:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 801:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 802:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
 803:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       : _M_current(_Iterator()) { }
 804:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 805:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       explicit
 806:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 2100              		.loc 13 806 7 view .LVU522
 2101              		.loc 13 806 7 is_stmt 0 view .LVU523
 2102              	.LBE1230:
 2103              	.LBE1229:
 2104              	.LBE1228:
  28:alohal/events/planner/planner_phase.cpp ****         consequence->Invoke();
 2105              		.loc 1 28 28 view .LVU524
 2106 0076 EC69     		ldr	r4, [r5, #28]
 2107              	.LVL191:
 2108              	.LBB1231:
 2109              	.LBI1231:
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  element order.
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       const_iterator
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h **** 
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       /**
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        *  element order.
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****        */
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       iterator
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 2110              		.loc 6 826 7 is_stmt 1 view .LVU525
 2111              	.LBB1232:
 2112              	.LBI1232:
 2113              		.loc 13 806 7 view .LVU526
 2114              	.LBB1233:
 807:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       : _M_current(__i) { }
 2115              		.loc 13 807 23 is_stmt 0 view .LVU527
 2116 0078 2D6A     		ldr	r5, [r5, #32]
 2117              	.LVL192:
ARM GAS  /tmp/cc27eAcR.s 			page 217


 2118              	.L76:
 2119              		.loc 13 807 23 view .LVU528
 2120              	.LBE1233:
 2121              	.LBE1232:
 2122              	.LBE1231:
  28:alohal/events/planner/planner_phase.cpp ****         consequence->Invoke();
 2123              		.loc 1 28 28 is_stmt 1 discriminator 3 view .LVU529
 2124              	.LBB1234:
 2125              	.LBI1234:
 808:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 809:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 810:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       template<typename _Iter>
 811:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 812:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 			  typename __enable_if<
 813:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 814:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
 815:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 816:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 817:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       // Forward iterator requirements
 818:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       reference
 819:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
 820:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return *_M_current; }
 821:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 822:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       pointer
 823:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
 824:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return _M_current; }
 825:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 826:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       __normal_iterator&
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
 828:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 829:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	++_M_current;
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 831:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 832:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 833:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       __normal_iterator
 834:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
 835:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 836:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 837:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 838:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       __normal_iterator&
 839:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
 840:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 841:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	--_M_current;
 842:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	return *this;
 843:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 844:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 845:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       __normal_iterator
 846:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
 847:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 848:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 849:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       // Random access iterator requirements
 850:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       reference
 851:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
 852:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return _M_current[__n]; }
 853:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 854:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       __normal_iterator&
 855:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
ARM GAS  /tmp/cc27eAcR.s 			page 218


 856:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 857:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 858:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       __normal_iterator
 859:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 860:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 861:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 862:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       __normal_iterator&
 863:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
 864:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 865:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 866:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       __normal_iterator
 867:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 868:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 869:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 870:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       const _Iterator&
 871:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
 872:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       { return _M_current; }
 873:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     };
 874:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 875:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 876:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 877:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 878:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 879:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 880:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 881:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 882:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 883:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   // Forward iterator requirements
 884:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 885:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline bool
 886:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 887:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 888:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 889:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 890:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 891:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 892:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline bool
 893:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 894:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 895:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 896:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 897:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 898:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 899:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline bool
 900:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 901:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 902:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     _GLIBCXX_NOEXCEPT
 903:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 904:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h **** 
 905:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 906:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     inline bool
 907:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 2126              		.loc 13 907 5 discriminator 3 view .LVU530
 2127              		.loc 13 907 5 is_stmt 0 discriminator 3 view .LVU531
 2128              	.LBE1234:
  28:alohal/events/planner/planner_phase.cpp ****         consequence->Invoke();
 2129              		.loc 1 28 28 discriminator 3 view .LVU532
ARM GAS  /tmp/cc27eAcR.s 			page 219


 2130 007a A542     		cmp	r5, r4
 2131 007c CFD0     		beq	.L68
 2132              	.LVL193:
  29:alohal/events/planner/planner_phase.cpp ****     }
 2133              		.loc 1 29 9 is_stmt 1 view .LVU533
  29:alohal/events/planner/planner_phase.cpp ****     }
 2134              		.loc 1 29 28 is_stmt 0 view .LVU534
 2135 007e 54F8040B 		ldr	r0, [r4], #4
 2136              	.LVL194:
  29:alohal/events/planner/planner_phase.cpp ****     }
 2137              		.loc 1 29 29 view .LVU535
 2138 0082 0368     		ldr	r3, [r0]
 2139              	.LVL195:
  29:alohal/events/planner/planner_phase.cpp ****     }
 2140              		.loc 1 29 29 view .LVU536
 2141 0084 9B68     		ldr	r3, [r3, #8]
  29:alohal/events/planner/planner_phase.cpp ****     }
 2142              		.loc 1 29 28 view .LVU537
 2143 0086 9847     		blx	r3
 2144              	.LVL196:
  28:alohal/events/planner/planner_phase.cpp ****         consequence->Invoke();
 2145              		.loc 1 28 5 is_stmt 1 view .LVU538
 2146              	.LBB1235:
 2147              	.LBI1235:
 827:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       {
 2148              		.loc 13 827 7 view .LVU539
 2149              	.LBB1236:
 830:/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator.h ****       }
 2150              		.loc 13 830 10 is_stmt 0 view .LVU540
 2151 0088 F7E7     		b	.L76
 2152              	.L80:
 2153 008a 00BF     		.align	2
 2154              	.L79:
 2155 008c 00000000 		.word	_ZSt19piecewise_construct
 2156              	.LBE1236:
 2157              	.LBE1235:
 2158              	.LBE1227:
 2159              		.cfi_endproc
 2160              	.LFE3342:
 2162              		.weak	_ZSt19piecewise_construct
 2163              		.section	.rodata._ZSt19piecewise_construct,"aG",%progbits,_ZSt19piecewise_construct,comdat
 2164              		.align	2
 2167              	_ZSt19piecewise_construct:
 2168 0000 00       		.space	1
 2169              		.text
 2170              	.Letext0:
 2171              		.file 14 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/type_traits"
 2172              		.file 15 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/arm-none-eabi/thumb/v7e
 2173              		.file 16 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/debug/debug.h"
 2174              		.file 17 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/exception_ptr.h"
 2175              		.file 18 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/utility"
 2176              		.file 19 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/cstdlib"
 2177              		.file 20 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/algorithmfwd.h"
 2178              		.file 21 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/limits"
 2179              		.file 22 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/cwchar"
 2180              		.file 23 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/char_traits.h"
 2181              		.file 24 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/cstdint"
ARM GAS  /tmp/cc27eAcR.s 			page 220


 2182              		.file 25 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/clocale"
 2183              		.file 26 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/string_view"
 2184              		.file 27 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/basic_string.h"
 2185              		.file 28 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/cstdio"
 2186              		.file 29 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/uses_allocator.h"
 2187              		.file 30 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/optional"
 2188              		.file 31 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/functional"
 2189              		.file 32 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/node_handle.h"
 2190              		.file 33 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/initializer_list"
 2191              		.file 34 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/vector.tcc"
 2192              		.file 35 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/enable_special_mem
 2193              		.file 36 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/ptr_traits.h"
 2194              		.file 37 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/stl_iterator_base_
 2195              		.file 38 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/bits/predefined_ops.h"
 2196              		.file 39 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/numeric_traits.h"
 2197              		.file 40 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/alloc_traits.h"
 2198              		.file 41 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/ext/aligned_buffer.h"
 2199              		.file 42 "/opt/gcc-arm-none-eabi-9-2020-q2/lib/gcc/arm-none-eabi/9.3.1/include/stddef.h"
 2200              		.file 43 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/machine/_default_types.h"
 2201              		.file 44 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/_types.h"
 2202              		.file 45 "<built-in>"
 2203              		.file 46 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/reent.h"
 2204              		.file 47 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/lock.h"
 2205              		.file 48 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/stdlib.h"
 2206              		.file 49 "/opt/gcc-arm-none-eabi-9-2020-q2/lib/gcc/arm-none-eabi/9.3.1/include/stdarg.h"
 2207              		.file 50 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/wchar.h"
 2208              		.file 51 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/_stdint.h"
 2209              		.file 52 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/stdint.h"
 2210              		.file 53 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/locale.h"
 2211              		.file 54 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/ctype.h"
 2212              		.file 55 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/stdio.h"
 2213              		.file 56 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/sys/errno.h"
 2214              		.file 57 "/opt/gcc-arm-none-eabi-9-2020-q2/arm-none-eabi/include/c++/9.3.1/pstl/execution_defs.h"
 2215              		.file 58 "alohal/events/planner/planner_phase.hpp"
ARM GAS  /tmp/cc27eAcR.s 			page 221


DEFINED SYMBOLS
                            *ABS*:0000000000000000 planner_phase.cpp
     /tmp/cc27eAcR.s:18     .text._ZN13Planner_phaseC2Ei:0000000000000000 $t
     /tmp/cc27eAcR.s:26     .text._ZN13Planner_phaseC2Ei:0000000000000000 _ZN13Planner_phaseC2Ei
     /tmp/cc27eAcR.s:26     .text._ZN13Planner_phaseC2Ei:0000000000000000 _ZN13Planner_phaseC1Ei
     /tmp/cc27eAcR.s:147    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_:0000000000000000 $t
     /tmp/cc27eAcR.s:154    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_:0000000000000000 _ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS2_EPSt18_Rb_tree_node_baseRS1_
     /tmp/cc27eAcR.s:245    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE4findERS1_:0000000000000000 $t
     /tmp/cc27eAcR.s:252    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE4findERS1_:0000000000000000 _ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE4findERS1_
     /tmp/cc27eAcR.s:349    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_unique_posERS1_:0000000000000000 $t
     /tmp/cc27eAcR.s:356    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_unique_posERS1_:0000000000000000 _ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE24_M_get_insert_unique_posERS1_
     /tmp/cc27eAcR.s:602    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E:0000000000000000 $t
     /tmp/cc27eAcR.s:609    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E:0000000000000000 _ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSA_PSt13_Rb_tree_nodeIS2_E
     /tmp/cc27eAcR.s:703    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IibEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_:0000000000000000 $t
     /tmp/cc27eAcR.s:710    .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IibEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_:0000000000000000 _ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE17_M_emplace_uniqueIJS0_IibEEEES0_ISt17_Rb_tree_iteratorIS2_EbEDpOT_
     /tmp/cc27eAcR.s:954    .text._ZN13Planner_phase11Add_triggerEi:0000000000000000 $t
     /tmp/cc27eAcR.s:961    .text._ZN13Planner_phase11Add_triggerEi:0000000000000000 _ZN13Planner_phase11Add_triggerEi
     /tmp/cc27eAcR.s:1096   .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_:0000000000000000 $t
     /tmp/cc27eAcR.s:1103   .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_:0000000000000000 _ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS2_ERS1_
     /tmp/cc27eAcR.s:1550   .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_:0000000000000000 $t
     /tmp/cc27eAcR.s:1557   .text._ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_:0000000000000000 _ZNSt8_Rb_treeIiSt4pairIKibESt10_Select1stIS2_ESt4lessIiESaIS2_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESD_IJEEEEESt17_Rb_tree_iteratorIS2_ESt23_Rb_tree_const_iteratorIS2_EDpOT_
     /tmp/cc27eAcR.s:1782   .text._ZN13Planner_phase7TriggerEib:0000000000000000 $t
     /tmp/cc27eAcR.s:1789   .text._ZN13Planner_phase7TriggerEib:0000000000000000 _ZN13Planner_phase7TriggerEib
     /tmp/cc27eAcR.s:2155   .text._ZN13Planner_phase7TriggerEib:000000000000008c $d
     /tmp/cc27eAcR.s:2167   .rodata._ZSt19piecewise_construct:0000000000000000 _ZSt19piecewise_construct
     /tmp/cc27eAcR.s:2164   .rodata._ZSt19piecewise_construct:0000000000000000 $d

UNDEFINED SYMBOLS
_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base
_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_
_Znwj
_ZdlPv
_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base
